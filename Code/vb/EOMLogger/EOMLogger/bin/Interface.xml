<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Interface</name>
    </assembly>
    <members>
        <member name="T:OutputMgr.Interface.IOutputManagerServerConnection">
            <summary>
            This is the "well known" interface that is published for Remoting.
            Clients obtain this interface, connect to the server via the <b>Connect</b> method
            and then navigate to any other desired interface.  When the client is finished with this
            server connection, it must call <see cref="M:OutputMgr.Interface.IOutputManagerServer.Disconnect"/>.
            </summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServerConnection.Connect(System.Runtime.Remoting.Lifetime.ISponsor,System.String@)">
            <summary>
            This method is no longer supported.  Use method
            <see cref="M:OutputMgr.Interface.IOutputManagerServerConnection.Connect(System.Version,System.Runtime.Remoting.Lifetime.ISponsor,System.String@)"/> instead.  
            </summary>
            <returns>A <see cref="T:System.ApplicationException"/> exception is returned to the caller.
            </returns>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServerConnection.Connect(System.Version,System.Runtime.Remoting.Lifetime.ISponsor,System.String@)">
            <summary>
            Establishes a unique client connection to the Output Manager service.  
            </summary>
            <param name="version">Version object.</param>
            <param name="clientSponsor">ISponsor object.</param>
            <param name="xmlPermissions">The XML permissions which describe a 
            "OutputMgr.Server.SecurityPermissions" object.</param>
            <returns>An interface object that exposes the main Output Manager object model.</returns>
        </member>
        <member name="T:OutputMgr.Interface.IOutputManagerServer">
            <summary>
            This interface provides access to all the major portions of the server object model.
            This includes things like attribute configuration, job and file management.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion">
            <summary>
            Get the version of this interface exposed by the Output Manager server to which
            this client is connected.
            Used by clients to determine which interface methods are available from
            the Output Manager server.
            </summary>
            <returns>Returns the numeric version of this interface provided by the
            Output Manager server.</returns>
            <remarks>This method was added in version 2 of the interface.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.Disconnect">
            <summary>
            Disconnects the client/server Remoting connection.  Clients must call this
            method when the server connection is no longer needed.  This method will dispose of
            all event registrations for the client so there is no need to do so explicitly.
            After calling this method, calls to any other methods obtained via this instance
            of the <see cref="T:OutputMgr.Interface.IOutputManagerServer"/> interface will fail.
            </summary>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.DisconnectConnection(System.Int32)">
            <summary>
            Disconnects the client/server Remoting connection of the specifed client id.  
            This method is only called when a user disconnects another Remoting connection.
            </summary>
            <remarks>This method was added in server interface version 20.</remarks>
            <param name="clientId">The client id of the client to disconnect.</param>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetAttributeConfigurationInterface">
            <summary>
            Returns an agent object that clients can use to obtain static attribute information. 
            </summary>
            <returns>An object that provides access to all the static attribute collections.
            </returns>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetFileManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain file management information. 
            </summary>
            <returns>An agent that provides access to the server's file data.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetPrintJobManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain print job management information. 
            </summary>
            <returns>An agent that provides access to the server's print job data.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetTransferJobManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain transfer job management information. 
            </summary>
            <returns>An agent that provides access to the server's transfer job data.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetEmailJobManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain e-mail job management information. 
            </summary>
            <returns>An agent that provides access to the server's e-mail job data.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetBackupJobManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain backup job management information. 
            </summary>
            <returns>An agent that provides access to the server's backup job data.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetCustomJobManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain custom job management 
            information. 
            </summary>
            <returns>An agent that provides access to the server's custom job data.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetTransformJobManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain transform job management 
            information. 
            </summary>
            <returns>An agent that provides access to the server's transform job data.</returns>
            <remarks>This method was added in server interface version 20.</remarks>
            <exclude>This method is not included in the API .chm file since the interface
            it returns is not documented.</exclude>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetTransferStatusManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain transfer status information. 
            </summary>
            <returns>An agent that provides access to the server's transfer status data.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetPrinterStatusInterface">
            <summary>
            Returns an agent object that clients can use to obtain printer status management 
            information. 
            </summary>
            <returns>An agent that provides access to the server's printer status data.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetBackupFileManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain a list of Backup Files 
            and to perform various operations on those files. </summary>
            <returns>An agent that provides access to the server's Backup File operations.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetIndexedFileManagementInterface">
            <summary>
            Returns an agent object that clients can use to obtain a list of Indexed Files 
            and to perform various operations on those files. </summary>
            <returns>An agent that provides access to the server's Indexed File operations.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetEmailExpansionInterface">
            <summary>
            Returns an agent object that the e-mail agents can use to communicate with 
            the service. </summary>
            <returns>An object that provides access to the e-mail expansion within 
            the service.</returns>
            <exclude/>This method is not included in the API .chm file since the interface
            it returns is not documented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetServicePropertiesInterface">
            <summary>
            Returns an agent object that clients can use to get and set properties 
            that affect the entire service. </summary>
            <returns>An object to access the properties of the service.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetCreateTaskInterface">
            <summary>
            Returns an agent object that clients can use to create working tasks within 
            the service. The main task is to create new jobs.</summary>
            <returns>An object that provides the capability to create new jobs.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetPrintersInterface">
            <summary>
            Returns an agent object that clients can use to operate on the printer 
            collection. </summary>
            <returns>An object that provides access to the printer collection.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.RegisterForMessageEvents(OutputMgr.Interface.IMessageReceivedSink)">
            <summary>
            Registers clients to receive Message Events.  These ares the same messages shown in the
            main client's Event window and logged as Event Message log entries.
            </summary>
            <param name="eventSink">The client object which will be used to deliver the messages.
            </param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.UnregisterForMessageEvents(OutputMgr.Interface.IMessageReceivedSink)">
            <summary>
            Removes the client's registration for Message Events.
            </summary>
            <param name="eventSink">The client object which was previously passed to method
            RegisterForMessageEvents.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.RegisterForFileJobSummaryEvents(OutputMgr.Interface.IFileJobSummarySink)">
            <summary>
            Registers clients to receive FileJobSummary Events.  These events notify the client of
            changes in the number of files or jobs in the server database.
            </summary>
            <param name="eventSink">The client object which will be used to deliver the
            updated number of files and jobs.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.UnregisterForFileJobSummaryEvents(OutputMgr.Interface.IFileJobSummarySink)">
            <summary>
            Removes the client's registration for FileJobSummary Events.
            </summary>
            <param name="eventSink">The client object which was previously passed to method
            RegisterForFileJobSummaryEvents.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.RegisterForFileJobSummaryEvents2(OutputMgr.Interface.IFileJobSummarySink2)">
            <summary>
            Registers clients to receive FileJobSummary Events (including transform jobs).
            These events notify the client of changes in the number of files
            or jobs in the server database.
            </summary>
            <param name="eventSink">The client object which will be used to deliver the
            updated number of files and jobs.</param>
            <remarks>This method was added in server interface version 20.</remarks>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.UnregisterForFileJobSummaryEvents2(OutputMgr.Interface.IFileJobSummarySink2)">
            <summary>
            Removes the client's registration for FileJobSummary Events.
            </summary>
            <param name="eventSink">The client object which was previously passed to method
            RegisterForFileJobSummaryEvents.</param>
            <remarks>This method was added in server interface version 20.</remarks>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetCertificateDetails(OutputMgr.Interface.CertificateStoreLocation)">
            <summary>
            Gets an XML string that provides details for each certificate in the specified
            store location.
            </summary>
            <param name="location">The certificate store location to retrieve the certificate
            information from.</param>
            <returns>
            An XML string that provides the details for each certificate in the specified
            store location.  The XML is created by serializing an array of CertificateDetails
            objects, thus the caller should deserialize the XML into an array of that type.
            An empty or null string means no certificates details exist.
            </returns>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetCodePageInfo">
            <summary>
            Gets the information identifying the installed and supported code pages.
            </summary>
            <returns>
            A 2-dimension "rectangular" array of strings, where each row contains the code
            page number in the first column and the encoding name associated with the code
            page in the second column.
            </returns>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetDisplayFieldDefinitions">
            <summary>
            This method gets the XML representation of all the <b>DisplayFieldDefinition</b> 
            objects in the <b>DisplayFields</b> table.
            </summary>
            <returns>Returns an array of XML strings, each representing a single 
            <b>DisplayFieldDefinition</b> object.</returns>
            <remarks>The collection consists of <b>DisplayFieldDefinition</b> class objects; 
            represented in XML. The <b>DisplayFieldDefinition</b> class is defined in the Output 
            Manager API schema (EomSchema.xsd) which can be found within the API folder in the 
            Output Manager server and client installation location. </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetDdaSystemVariableDefinitions">
            <summary>
            This method gets the XML representation of all the <b>DdaSystemVariableDefinition</b> 
            objects in the <b>DdaSystemVariables</b> table.
            </summary>
            <returns>Return an array of XML strings, each representing a single 
            <b>DdaSystemVariableDefinition</b> object.</returns>
            <remarks>The collection consists of <b>DdaSystemVariableDefinition</b> class objects; 
            represented in XML. The <b>DdaSystemVariableDefinition</b> class is defined in the Output 
            Manager API schema (EomSchema.xsd) which can be found within the API folder in the 
            Output Manager server and installation location. </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetFiles(System.String)">
            <summary>
            Gets the list of files in the folder.
            </summary>
            <param name="path">The path of the folder from which to get the list of
            files.</param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> of strings representing the names of
            all files contained in the directory.
            </returns>
            <remarks>
            The list of file names is left unsorted and is the responsibility of
            the caller to sort it if desired.
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetFiles(System.String,System.String[])">
            <summary>
            Gets the list of files in the folder based on the specified search pattern.
            </summary>
            <param name="path">The path of the folder to get the list of
            files.</param>
            <param name="searchPattern">The search pattern or filter based on which the files
            should be selected/fetched from the specified folder</param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> of strings representing the names of
            all files contained in the directory.
            </returns>
            <remarks>
            The list of file names is left unsorted and is the responsibility of
            the caller to sort it if desired.
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetChartTemplateData(System.String,OutputMgr.Interface.ChartElements)">
            <summary>
            Gets the items in the chart file under the requested collection 
            specified by the second parameter collectionName.
            </summary>
            <param name="fileName">Specifies the file name from where the items has
            to be fetched.</param>
            <param name="collectionName">The node name or the elements name in the chart
            template file whose collections is to be fetched.</param>
            <returns>Returns the ArrayList of the items under the specified collection</returns>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetFormFiles(System.String)">
            <summary>
            Gets the list of Form Files in the folder.
            </summary>
            <param name="path">The path of the folder from which to get the list of
            Form Files.</param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> of strings representing the names of
            all Form File files contained in the directory.
            </returns>
            <remarks>
            The list of file names is left unsorted and is the responsibility of
            the caller to sort it if desired.
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetGraphicFiles(System.String)">
            <summary>
            Retrieve all of the graphic files that exist in the specified path. 
            This includes files with the following extensions: 
            <list type="bullet">
            <item><description>.wmf</description></item>
            <item><description>.emf</description></item>
            <item><description>.dff</description></item>
            <item><description>.bmp</description></item>
            <item><description>.jpg</description></item>
            <item><description>.jpeg</description></item>
            <item><description>.gif</description></item>
            </list>
            </summary>
            <param name="path">The path of the folder from which to get the list of
            graphic files.</param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> of strings representing the names of
            all graphic files contained in the directory.
            </returns>
            <remarks>
            The list of file names is left unsorted and is the responsibility of
            the caller to sort it if desired.
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetFormFileFields(System.String)">
            <summary>
            Gets the list of fields from the specified Form File.
            </summary>
            <param name="filePath">The path of the Form File from which to retrieve the
            field names.</param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> of strings representing the names of
            all fields contained in the specified Form File.
            </returns>
            <remarks>
            The list of field names is left unsorted and is the responsibility of
            the caller to sort it if desired.
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetFontInfo(System.String,System.String,System.Byte)">
            <summary>
            Gets font information for a specific font.
            </summary>
            <param name="printerName">Optional - The name of the printer which is used
            to query for printer-resident fonts.</param>
            <param name="fontName">The name of the font to get information about.</param>
            <param name="characterSet">The character set (aka script) which affects
            the properties of the font.</param>
            <returns>Returns the XML representation of the <b>FontInfo</b> object describing
            the font's information.</returns>
            <remarks>The collection consists of <b>FontInfo</b> class objects; 
            represented in XML. The <b>FontInfo</b> class is defined in the Output 
            Manager API schema (EomSchema.xsd) which can be found within the API folder in the 
            Output Manager server and client installation location. </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetFontExample(System.String,System.Byte,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Gets an example image of the specified font.</summary>
            <param name="fontName">The name of the font.</param>
            <param name="characterSet">The character set identifier.</param>
            <param name="color">The color to display the font in.</param>
            <param name="height">The height of the font, in decipoints.</param>
            <param name="italic">Flag indicating whether to italicize the font.</param>
            <param name="strikeout">Flag indicating whether to strikeout the font.</param>
            <param name="underline">Flag indicating whether to underline the font.</param>
            <param name="bold">Flag indicating whether to bold the font.</param>
            <returns>Returns a memory stream containing a bitmap image.</returns>
            <exclude/>This method is not included in the API .chm file since it is not
            fully implemented.
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetFontNames(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of fonts available on the system, including printer-resident
            fonts if the printer name is supplied.
            </summary>
            <param name="printerName">Optional - The name of the printer which is used
            to query for printer-resident fonts.</param>
            <param name="fixedPitch">Flag indicating whether to include fixed pitch
            fonts in the search.</param>
            <param name="scalable">Flag indicating whether to include scalable fonts
            in the search.</param>
            <returns>Returns a collection of font names.</returns>
            <remarks>One or both of the boolean flag parameters should be true when
            this method is called.  Note that this method returns the font names only.
            Use the GetFontInfo method to get more information about a particular
            font.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetAdobePDFSettings">
            <summary>
            Retrieves the names of the Adobe PDF Settings (job options) and their associated
            description.
            </summary>
            <returns>
            A 2-dimension array, where each row contains the Adobe PDF setting name
            in the first column and the description for the Adobe PDF setting in the second
            column.
            </returns>
            <remarks>
            <para>
            The Adobe PDF settings are retrieved from the HKEY_CURRENT_USER registry hive
            under the key "Software\Adobe\Acrobat Distiller\AdobePDFSettings".  For older
            versions of Adobe Acrobat Distiller (such as 4.0), this registry key does not
            exist and no Adobe PDF Settings will be retrievable.
            </para>
            <para>
            The returned 2-dimension array will contain the "(Default)" registry key value
            name and that actually will be represented as an empty string.  The value for
            this name typically is the path where the PDF Setting (.joboptions) files are
            located.
            </para>
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.GetClientConnections">
            <summary>
            This method gets the XML representation of all the <b>ClientInformation</b> 
            objects known to the service.
            </summary>
            <returns>Return an array of XML strings, each representing a single 
            <b>ClientInformation</b> object.</returns>
            <remarks>The collection consists of <b>ClientInformation</b> class objects; 
            represented in XML. The <b>ClientInformation</b> class is defined in the Output 
            Manager API schema (EomSchema.xsd) which can be found within the API folder in the 
            Output Manager server and installation location.
            This method was added in server interface version 20.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IOutputManagerServer.Ping">
            <summary>This method performs no function.  It is provided solely to allow client
            applications to verify that the connection to the server is still functional.</summary>
            <remarks>This method was added in version 3 of the interface.  See
            <see cref="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion"/>.</remarks>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="T:OutputMgr.Interface.IAttributeConfiguration">
            <summary>
            This interface is used to obtain access to any of the static attribute
            collections.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfiguration.GetNamedAttributeInterface(OutputMgr.Interface.EomAttributeType)">
            <summary>
            Retrieves an implementation of a <b>INamedAttributeCollection</b> interface.
            This interface is used to access a collection of static attributes such as
            Print Attributes, File Masks, etc.
            </summary>
            <param name="attributeType">The desired type of static attribute.</param>
            <returns>The interface which provides access to the requested
            attribute collection.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfiguration.RegisterForEvents(OutputMgr.Interface.IAttributeChangedSink)">
            <summary>
            Registers a client to receive server events that report changes in the
            static attribute configuration.
            </summary>
            <param name="eventSink">An interface implemented by the caller that is used to
            deliver the events.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfiguration.UnregisterForEvents(OutputMgr.Interface.IAttributeChangedSink)">
            <summary>
            Removes the client sink from the list of registered event sinks.
            </summary>
            <param name="eventSink">A sink interface which was previously register by calling
            the <b>RegisterForEvents</b> method.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfiguration.GetDdaCommandDefaultValues(OutputMgr.Interface.DdaCommandType)">
            <summary>
            
            </summary>
            <param name="commandType"></param>
            <returns></returns>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfiguration.ValidateConfiguration(System.Boolean)">
            <summary>
            Validates all <b>NamedAttribute</b> entries in configuration.
            </summary>
            <param name="forceValidation">If set to <b>true</b>, perform the configuration validation.  
            If set to <b>false</b>, only perform configuration validation if the service is in an 
            "ErrorIdled" state but not in a "SafeMode" state.</param>  
            <returns>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:OutputMgr.Interface.AttributeArgumentException"/> 
            errors if errors were found.</returns>
            <exclude/> This method is not included in the API .chm file.  Mainly because
            we haven't exposed the "SafeMode" state.
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfiguration.SetXmlProperties(System.Collections.ArrayList)">
             <summary>
             Reads all attributes from an array of XML strings and converts them one at a
             time to a <b>NamedAttribute</b> object. these objects are then placed 
             into their corresponding 
             <b>NamedAttribute</b> collections.  If an error occurs, the attribute
             is not added to the collection and the resulting error(s) are added to 
             a list of errors(<see cref="T:OutputMgr.Interface.AttributeArgumentException"/>) to be 
             returned to the caller.
             </summary>
             <param name="xmlProperties">A string array of <b>NamedAttribute</b> represented in XML.
             </param>
             <returns>An <see cref="T:System.Collections.ArrayList"/> of 
             <see cref="T:OutputMgr.Interface.AttributeArgumentException"/>. If no errors occur during this process,
             the list of exceptions will be empty.</returns>
             <remarks>The collection consists of <b>NamedAttribute</b> class objects; 
             represented in XML. The <b>NamedAttribute</b> class is defined in the Output 
             Manager API schema (EomSchema.xsd) which can be found within the API folder in the 
             Output Manager server and client installation location. </remarks>
             <example>
             <para>The following C# example demonstrates creating the Directory Monitor named
             "dm1".</para>
             <code>
               // Create the directory monitor "dm1".
               // The directory monitor class is supplied to this program from the EomSchema.cs 
               // file which is included in the project.  You need to create the EomSchema.cs
               // file from the Output Manager schema.
               DirectoryMonitor dm = new DirectoryMonitor();        // Create object.
               dm.AutoEnableOnError = true;                         // Require retry if error.
               dm.AutoEnableInterval = 5;                           // Require retry every 5 minutes.
               dm.Comments = "Directory monitor created using API"; // Comments.
               dm.Enabled = true;                                   // Enable directory monitor.
               dm.FileDiscoveryType = FileDiscoveryTypes.Immediate; // Immediate detection.
               dm.Name = "dm1";                                     // Name of directory monitor.
               dm.Path = @"C:\temp\autodirectory\";                 // Directory monitor path.
               dm.SearchSubdirectories = true;                      // Search subdirectories.
            
               // Serialize the object into XML.
               System.IO.StringWriter nodeString = new System.IO.StringWriter();
               System.Xml.XmlTextWriter writer = new System.Xml.XmlTextWriter(nodeString);
               // Suppress the default namespaces, e.g. "...www.w3.org...".
               System.Xml.Serialization.XmlSerializerNamespaces ns = 
                  new System.Xml.Serialization.XmlSerializerNamespaces();
               ns.Add("", "");
               System.Xml.Serialization.XmlSerializer serializer = 
                  new System.Xml.Serialization.XmlSerializer(typeof(DirectoryMonitor));
               serializer.Serialize(writer, dm, ns);
            
               // Place serialized directory monitor object into proper container for API call.
               System.Collections.ArrayList al = new System.Collections.ArrayList();
               al.Add(nodeString.ToString());
            
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get necessary interface to call service with configuration change.
               OutputMgr.Interface.IAttributeConfiguration ac = server.GetAttributeConfigurationInterface();
               ac.SetXmlProperties(al);
            
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfiguration.DeleteXmlProperties(System.Collections.ArrayList)">
            <summary>
            Reads all attributes from an array of XML strings and converts them one at a
            time to a <b>NamedAttribute</b> object. These objects are then removed from 
            their corresponding <b>NamedAttribute</b> collections.  If an error occurs, 
            the attribute is not removed from the collection and the resulting error(s) 
            are added to a list of errors(<see cref="T:OutputMgr.Interface.AttributeArgumentException"/>) 
            returned to the caller.
            </summary>
            <param name="xmlProperties">A string array of <b>NamedAttribute</b> represented in XML.
            </param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> of 
            <see cref="T:OutputMgr.Interface.AttributeArgumentException"/>. 
            If no errors occur during this process, the list of 
            exceptions will be empty.
            </returns>
            <remarks>The collection consists of <b>NamedAttribute</b> class objects; 
            represented in XML. The <b>NamedAttribute</b> class is defined in the Output 
            Manager API schema (EomSchema.xsd) which can be found within the API folder in the 
            Output Manager server and client installation location. </remarks>
        </member>
        <member name="T:OutputMgr.Interface.IAttributeConfigurationExtractXmlCallback">
            <summary>Callback interface that extracts XML data from a binary configuration file.
            A callback is used because 1) the operation may take
            a fairly long time and the callback prevents remote timeout problems, and 2) the callback
            allows the data to be returned in smaller chunks.  Some DDA files are quite large and
            sending a subset of the items back through multiple callbacks, instead of one giant set
            of data, improves performance.</summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfigurationExtractXmlCallback.ExtractedXml(System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean)">
            <summary>Notifies the client that the extraction has finished processing all,
            or a subset of, the items in a configuration file.  The client can now process
            the returned items.</summary>
            <param name="xmlProperties">An array of XML strings.  Each one describes an item
            extracted from the configuration file.  This will be null if no items exist in
            the configuration file to be extracted.</param>
            <param name="totalExtracted">Total number of items to be extracted from the
            configuration file.</param>
            <param name="currentIndex">The zero-based index of the first item in the
            <b>xmlProperties</b> collection relative to <b>totalExtracted</b>.</param>
            <param name="finalCallback">True if all items have been extracted from this file and
            this is the last time this method will be called for this file.  False if more items
            exist for the file and this method will be called again.</param>
        </member>
        <member name="M:OutputMgr.Interface.IAttributeConfigurationExtractXmlCallback.ExtractionErrorOccurred(System.Exception)">
            <summary>Notifies the client that an exception has occurred trying to extract
            the XML data from a configuration file.  If this method is called, the extract
            operation has stopped processing the file and no more calls to <b>ExtractedXml</b>
            will be made.</summary>
            <param name="ex">The exception that caused the extraction operation to fail.</param>
        </member>
        <member name="T:OutputMgr.Interface.INamedAttributeCollection">
            <summary>
            This interface is implemented by each of the static attribute collections.
            Clients use this interface to manipulate these collections.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.INamedAttributeCollection.GetAllNames">
            <summary>Returns an XML document that describes the names of 
            all the attributes in the collection.</summary>
            <returns>An XML document containing the attribute names.</returns>
            <remarks>This method is intentionally not secured by any permission. 
            Any user can obtain a list of attribute names. These names are needed 
            to create and modify jobs.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.INamedAttributeCollection.GetAllNamesAsArray">
            <summary>Returns an array that describes the names of all the attributes 
            in the collection.</summary>
            <returns>An array that contains an attribute name in each array entry.</returns>      
            <remarks>This method is intentionally not secured by any permission. Any user
            can obtain a list of attribute names. These names are needed to create and modify 
            jobs.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.INamedAttributeCollection.GetDdaItemsCount(System.String)">
            <summary>
            Gets the number of items in this Data Dependent Attribute (DDA). 
            </summary>
            <param name="ddaName">The name of the DDA.</param>
            <returns>Return the number of DDA items.</returns>      
        </member>
        <member name="M:OutputMgr.Interface.INamedAttributeCollection.GetDdaItemNames(System.String)">
            <summary>
            Gets all the Data Dependent Attribute (DDA) item names for the specified DDA.
            </summary>
            <param name="ddaName">Name of the DDA to get the DDA item names from.</param>
            <returns>A string array of all the DDA item names contained in the
            specified DDA or null if no item names exist in the DDA.</returns>
        </member>
        <member name="M:OutputMgr.Interface.INamedAttributeCollection.GetIndexKeyNames">
            <summary>
            Gets names of all index keys in the collection.
            </summary>
            <returns>Returns the list of names (does not include duplicate names).</returns>      
        </member>
        <member name="M:OutputMgr.Interface.INamedAttributeCollection.GetConcurrencyCount(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns> 
            <exclude/> This method is not included in the API .chm file.     
        </member>
        <member name="M:OutputMgr.Interface.INamedAttributeCollection.GetDefaultValues">
            <summary>
            
            </summary>
            <returns></returns>  
            <exclude/> This method is not included in the API .chm file.    
        </member>
        <member name="M:OutputMgr.Interface.INamedAttributeCollection.GetXmlProperties(System.String)">
            <summary>
            Returns an XML document that describes the requested attribute.
            </summary>
            <param name="name">The name of the desired attribute.</param>
            <returns>
            <para>An XML document describing the requested attribute.</para>
            <para>The attribute requested is defined in the Output Manager API 
            schema (EomSchema.xsd) which can be found within the API folder in 
            the Output Manager server and client installation location.</para>
            </returns>
        </member>
        <member name="P:OutputMgr.Interface.INamedAttributeCollection.Count">
            <summary>Returns the total number of attributes in the collection.</summary>      
        </member>
        <member name="T:OutputMgr.Interface.IAttributeChangedSink">
            <summary>
            Provides notification to clients when static attributes are added or deleted.
            </summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IAttributeChangedSink.AttributeAdded(OutputMgr.Interface.EomAttributeType,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="eomType"></param>
            <param name="name"></param>
            <param name="parentMask"></param>
            <param name="isChildOfParent"></param>
        </member>
        <member name="M:OutputMgr.Interface.IAttributeChangedSink.AttributeModified(OutputMgr.Interface.EomAttributeType,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="eomType"></param>
            <param name="name"></param>
            <param name="parentMask"></param>
            <param name="isChildOfParent"></param>
        </member>
        <member name="M:OutputMgr.Interface.IAttributeChangedSink.AttributeDeleted(OutputMgr.Interface.EomAttributeType,System.String)">
            <summary>
            
            </summary>
            <param name="eomType"></param>
            <param name="name"></param>
        </member>
        <member name="T:OutputMgr.Interface.IMessageReceivedSink">
            <summary>
            Provides notification to clients when a new event message is generated by the server.
            </summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IMessageReceivedSink.MessageReceived(System.String,OutputMgr.Interface.EventMessageSeverities,System.DateTime)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="severity"></param>
            <param name="datetime"></param>
        </member>
        <member name="T:OutputMgr.Interface.IFileJobSummarySink">
            <summary>
            Provides notification to clients when the number of files or jobs changes
            in the server database.
            </summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IFileJobSummarySink.FileJobSummaryUpdated(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies clients of an update in the total number of files and jobs.
            </summary>
            <param name="fileCount">Total managed files in server database.</param>
            <param name="printJobCount">Total print jobs in server database.</param>
            <param name="transferJobCount">Total transfer jobs in server database.</param>
            <param name="backupJobCount">Total backup jobs in server database.</param>
            <param name="emailJobCount">Total e-mail jobs in server database.</param>
            <param name="customJobCount">Total custom jobs in server database.</param>
        </member>
        <member name="T:OutputMgr.Interface.IFileJobSummarySink2">
            <summary>
            Provides notification to clients when the number of files or jobs changes
            in the server database.
            </summary>
            <remarks>This class was added in server interface version 20 when Transform Jobs
            were created.</remarks>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IFileJobSummarySink2.FileJobSummaryUpdated(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies clients of an update in the total number of files and jobs.
            </summary>
            <param name="fileCount">Total managed files in server database.</param>
            <param name="printJobCount">Total print jobs in server database.</param>
            <param name="transferJobCount">Total transfer jobs in server database.</param>
            <param name="backupJobCount">Total backup jobs in server database.</param>
            <param name="emailJobCount">Total e-mail jobs in server database.</param>
            <param name="customJobCount">Total custom jobs in server database.</param>
            <param name="transformJobCount">Total transform jobs in server database.</param>
        </member>
        <member name="T:OutputMgr.Interface.IManagementWindow">
            <summary>
            The base interface for management windows.
            </summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IManagementWindow.RegisterForEvents(OutputMgr.Interface.IManagementWindowSink,System.String,OutputMgr.Interface.DisplayField[],System.Boolean)">
            <summary>
            Registers a client's sink interface to receive future events describing updates
            that are to be applied to the window.
            </summary>
            <param name="sink">A client callback interface that will receive the events.</param>
            <param name="xmlFilter">A filter describing the events that the client wishes
            to receive.  A null or empty string will result in all events being sent.</param>
            <param name="desiredFields">A collection of display fields that the client wishes 
            to receive on the <b>Added</b> and <b>Modified</b> events.</param>
            <param name="sendInitialEvents">When true, any existing objects in the collection
            are immediately sent to the client via an <b>Added</b>event.</param>
        </member>
        <member name="M:OutputMgr.Interface.IManagementWindow.UnregisterForEvents(OutputMgr.Interface.IManagementWindowSink)">
            <summary>
            Removes the client sink from the list of registered sinks.
            </summary>
            <param name="sink">A sink interface which was previously register by calling
            either the <b>RegisterForEvents</b> method.</param>
        </member>
        <member name="P:OutputMgr.Interface.IManagementWindow.Count">
            <summary>
            Returns the total number of objects in the underlying collection.  For backup and
            indexed files, this returns the total number of eligible files in the specified
            directory.  However, the client may not have permission to read them so they may
            not all be returned by <see cref="M:OutputMgr.Interface.IBackupIndexedFileManagement.GetFiles"/>.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.IManagementWindowSink">
            <summary>
            Defines the basic events that all management windows support.
            </summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])">
            <summary>
            Occurs when the server adds an object to the underlying collection or the
            <see cref="M:OutputMgr.Interface.IManagementWindow.RegisterForEvents(OutputMgr.Interface.IManagementWindowSink,System.String,OutputMgr.Interface.DisplayField[],System.Boolean)"/>
            method requests an initial set of events.</summary>
            <param name="xmlProperties">An array of XML strings that describe the newly added
            objects.</param>
            <remarks>This method is called when the server adds a new object to the collection.
            It is also called when the <b>sendInitialEvents</b> argument of the
            <see cref="M:OutputMgr.Interface.IManagementWindow.RegisterForEvents(OutputMgr.Interface.IManagementWindowSink,System.String,OutputMgr.Interface.DisplayField[],System.Boolean)"/> is true.
            The latter usage provides clients with a means of obtaining all the objects in the
            collection at the time of the registration.
            </remarks>
        </member>
        <member name="T:OutputMgr.Interface.IBackupIndexedFileManagement">
            <summary>
            Defines the basic Backup and Indexed File management operations.
            </summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The full path of the file to be deleted.</param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.DeleteMany(System.String[])">
            <summary>
            Deletes the specified files.
            </summary>
            <param name="paths">The full paths of the files to be deleted.</param>
            <returns>Returns an array of error messages if there were errors deleting
            one or more of the files.</returns>
            <exception cref="T:System.ApplicationException">Thrown when the files cannot be
            deleted because the service is shutting down.</exception>
            <remarks>This method was added in version 2 of the interface.  See
            <see cref="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion"/>.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.GetFiles">
            <summary>
            Instructs the server to deliver an <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event or events describing all the files found in the currently set
            directory that are to be displayed in the management window.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.GetPreviewInterface(System.String)">
            <summary>
            Gets an <see cref="T:OutputMgr.Interface.IPrintPreview"/> interface for the specified file.
            </summary>
            <param name="path">Full path of the file.</param>
            <returns>An <see cref="T:OutputMgr.Interface.IPrintPreview"/>.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.GetXmlProperties(System.String)">
            <summary>
            Retrieves various file related properties of the specified file.
            </summary>
            <param name="path">The full path of the file for which the properties are
            to be retrieved.</param>
            <returns>An XML string containing all the properties.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.Restore(System.String,System.Boolean,System.String)">
            <summary>
            Restores the specified file as a managed file.
            </summary>
            <param name="path">The full path of the file to restore.</param>
            <param name="applyToFileMasks">If true, the restored file is applied to the file
            masks to determine the File Group it is to be assigned to and to generate jobs
            as defined by the matching file masks.  If false, the file is assigned to the
            file masks specified by <paramref name="fileGroupName"/>.</param>
            <param name="fileGroupName">When <paramref name="applyToFileMasks"/> is false,
            this parameter is required and specifies the File Group that the restored file
            is to be assigned to.</param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.SetDirectory(System.String,System.Boolean)">
            <summary>
            Specifies the directory information for this management window.
            </summary>
            <param name="directory">A string representing a directory path or the name of a
            Directory Alias defining the directory path that this management window view is
            associated with.</param>
            <param name="searchSubdirectories">If true, subdirectories of the specified directory
            are searched when refreshing the files in the management window view.</param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.CreateCustomJob(System.String,System.String,System.String,System.String,System.String,System.Char,System.String)">
            <summary>
            Creates a new Custom Job for the specified backup or indexed file.
            </summary>
            <param name="filePath">The full path of the backup or indexed file.</param>
            <param name="customJobAttributeName">A Custom Job Attribute used to process the file.</param>
            <param name="customJobAttributeProperties">A Custom Job Attribute in XML form that will be
            used to process the file.  If specified, then <paramref name="customJobAttributeName"/>
            is ignored.</param>
            <param name="printAttributeName">An optional Print Attribute for re-formatting the file
            into a new output file for the custom job by creating a print job that uses this Print
            Attribute and executes on a 'Custom' printer.</param>
            <param name="printerName">The name of a 'Custom' printer that is used format a new
            output file for the user job using the specified Print Attribute.  This parameter is
            required if and only if <paramref name="printAttributeName"/> is specified.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="pageRange">Pages to be printed.  The <paramref name="printAttributeName"/>
            must also be specified to process the correct pages.</param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.CreateCustomJob(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.String,OutputMgr.Interface.FileType,System.Int32)">
            <summary>
            Creates a new Custom Job for the specified backup or indexed file.
            </summary>
            <param name="filePath">The full path of the backup or indexed file.</param>
            <param name="customJobAttributeName">A Custom Job Attribute used to process the file.</param>
            <param name="customJobAttributeProperties">A Custom Job Attribute in XML form that will be
            used to process the file.  If specified, then <paramref name="customJobAttributeName"/>
            is ignored.</param>
            <param name="printAttributeName">An optional Print Attribute for re-formatting the file
            into a new output file for the custom job by creating a print job that uses this Print
            Attribute and executes on a 'Custom' printer.</param>
            <param name="printerName">The name of a 'Custom' printer that is used format a new
            output file for the user job using the specified Print Attribute.  This parameter is
            required if and only if <paramref name="printAttributeName"/> is specified.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="pageRange">Pages to be printed.  The <paramref name="printAttributeName"/>
            must also be specified to process the correct pages.</param>
            <param name="fileGroup">The file group to assign the file to.  If not specified, the
            file group originally used by the backup or indexed file will be used.  If the file
            group does not exist, the "Default" file group will be substituted.</param>
            <param name="fileType">Determine how the file is processed by the print spooler.</param>
            <param name="codePage">The code page that is to be used for reading the file or
            <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
            </param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.CreateEmailJob(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.String)">
            <summary>
            Creates a new E-mail Job for the specified backup or indexed file.
            </summary>
            <param name="filePath">The full path of the backup or indexed file.</param>
            <param name="emailAttributeName">An e-mail Attribute used to mail the file.</param>
            <param name="emailAttributeProperties">An e-mail Attribute in XML form that will be
            used to mail the file.  If specified, then <paramref name="emailAttributeName"/>
            is ignored.</param>
            <param name="printAttributeName">An optional Print Attribute for re-formatting the file
            into a new output file for the e-mail job by creating a print job that uses this Print
            Attribute and executes on a 'E-mail' printer or 'Windows' printer that is configured to
            create an output file (such as a PDF file).</param>
            <param name="printerName">The name of a 'Custom' or 'Windows' printer that is used format
            a new output file for the e-mail job using the specified Print Attribute.  This parameter is
            required if and only if <paramref name="printAttributeName"/> is specified.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="pageRange">Pages to be printed.  The <paramref name="printAttributeName"/>
            must also be specified to process the correct pages.</param>
            <param name="attachmentDisplayName">An e-mail attachment display name. By default,
            the name of the file is used.</param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.CreateEmailJob(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.String,System.String,OutputMgr.Interface.FileType,System.Int32)">
            <summary>
            Creates a new E-mail Job for the specified backup or indexed file.
            </summary>
            <param name="filePath">The full path of the backup or indexed file.</param>
            <param name="emailAttributeName">An e-mail Attribute used to mail the file.</param>
            <param name="emailAttributeProperties">An e-mail Attribute in XML form that will be
            used to mail the file.  If specified, then <paramref name="emailAttributeName"/>
            is ignored.</param>
            <param name="printAttributeName">An optional Print Attribute for re-formatting the file
            into a new output file for the e-mail job by creating a print job that uses this Print
            Attribute and executes on a 'E-mail' printer or 'Windows' printer that is configured to
            create an output file (such as a PDF file).</param>
            <param name="printerName">The name of a 'Custom' or 'Windows' printer that is used format
            a new output file for the e-mail job using the specified Print Attribute.  This parameter is
            required if and only if <paramref name="printAttributeName"/> is specified.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="pageRange">Pages to be printed.  The <paramref name="printAttributeName"/>
            must also be specified to process the correct pages.</param>
            <param name="attachmentDisplayName">An e-mail attachment display name. By default,
            the name of the file is used.</param>
            <param name="fileGroup">The file group to assign the file to.  If not specified, the
            file group originally used by the backup or indexed file will be used.  If the file
            group does not exist, the "Default" file group will be substituted.</param>
            <param name="fileType">Determine how the file is processed by the print spooler.</param>
            <param name="codePage">The code page that is to be used for reading the file or
            <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
            </param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.CreatePrintJob(System.String,System.String,System.String,System.String,System.Char,System.Int16,System.String)">
            <summary>
            Creates a new Print Job for the specified backup or indexed file.
            </summary>
            <param name="filePath">The full path of the backup or indexed file.</param>
            <param name="printAttributeName">The Print Attribute used to print the file.</param>
            <param name="printAttributeProperties">A Print Attribute in XML form that will be
            used to print the file.  If specified, then <paramref name="printAttributeName"/>
            is ignored.</param>
            <param name="printerName">The printer on which the file will be printed.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="numberOfCopies">Number of times the file is printed.
            Must be in the range 1 to 32767.  Values outside that range are changed to one.</param>
            <param name="pageRange">Pages to be printed.</param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.CreatePrintJob(System.String,System.String,System.String,System.String,System.Char,System.Int16,System.String,System.String,OutputMgr.Interface.FileType,System.Int32)">
            <summary>
            Creates a new Print Job for the specified backup or indexed file.
            </summary>
            <param name="filePath">The full path of the backup or indexed file.</param>
            <param name="printAttributeName">The Print Attribute used to print the file.</param>
            <param name="printAttributeProperties">A Print Attribute in XML form that will be
            used to print the file.  If specified, then <paramref name="printAttributeName"/>
            is ignored.</param>
            <param name="printerName">The printer on which the file will be printed.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="numberOfCopies">Number of times the file is printed.
            Must be in the range 1 to 32767.  Values outside that range are changed to one.</param>
            <param name="pageRange">Pages to be printed.</param>
            <param name="fileGroup">The file group to assign the file to.  If not specified, the
            file group originally used by the backup or indexed file will be used.  If the file
            group does not exist, the "Default" file group will be substituted.</param>
            <param name="fileType">Determine how the file is processed by the print spooler.</param>
            <param name="codePage">The code page that is to be used for reading the file or
            <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
            </param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.CreateTransferJob(System.String,System.String,System.String,System.Char,System.String,System.Boolean)">
            <summary>
            Creates a new Transfer Job for the specified backup or indexed file.
            </summary>
            <param name="filePath">The full path of the backup or indexed file.</param>
            <param name="transferAttributeName">The Transfer Attribute that defines
             the transfer parameters.</param>
            <param name="transferAttributeProperties">A Transfer Attribute in XML form that will be
            used to transfer the file.  If specified, then <paramref name="transferAttributeName"/>
            is ignored.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="destinationQueue">Optionally, specifies the name of a print queue on the
            destination system.  If supplied, it overrides the host queue name defined in the
            transfer attribute. The queue name specified is case sensitive.</param>
            <param name="useLprLpdBanner">If true, a banner page is composed and sent before the
            file data.  Only applies when using sending to an LPR/LPD system.</param>
        </member>
        <member name="M:OutputMgr.Interface.IBackupIndexedFileManagement.CreateTransferJob(System.String,System.String,System.String,System.Char,System.String,System.Boolean,System.String,OutputMgr.Interface.FileType,System.Int32)">
            <summary>
            Creates a new Transfer Job for the specified backup or indexed file.
            </summary>
            <param name="filePath">The full path of the backup or indexed file.</param>
            <param name="transferAttributeName">The Transfer Attribute that defines
             the transfer parameters.</param>
            <param name="transferAttributeProperties">A Transfer Attribute in XML form that will be
            used to transfer the file.  If specified, then <paramref name="transferAttributeName"/>
            is ignored.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="destinationQueue">Optionally, specifies the name of a print queue on the
            destination system.  If supplied, it overrides the host queue name defined in the
            transfer attribute. The queue name specified is case sensitive.</param>
            <param name="useLprLpdBanner">If true, a banner page is composed and sent before the
            file data.  Only applies when using sending to an LPR/LPD system.</param>
            <param name="fileGroup">The file group to assign the file to.  If not specified, the
            file group originally used by the backup or indexed file will be used.  If the file
            group does not exist, the "Default" file group will be substituted.</param>
            <param name="fileType">Determine how the file is processed by the print spooler.</param>
            <param name="codePage">The code page that is to be used for reading the file or
            <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
            </param>
        </member>
        <member name="T:OutputMgr.Interface.IIndexedFileManagement">
            <summary>Defines the Indexed File management interface.</summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IIndexedFileManagement.Close">
            <summary>Releases all resources for any search operation that was performed.
            Clients should always call this if the <see cref="M:OutputMgr.Interface.IIndexedFileManagement.SearchIndexedFiles(System.String,OutputMgr.Interface.IIndexSearchCallback)"/>
            method has been called.</summary>
        </member>
        <member name="M:OutputMgr.Interface.IIndexedFileManagement.DeleteSearchResults(System.Collections.Hashtable,OutputMgr.Interface.IIndexSearchCallback)">
            <summary>Deletes some of the search result records that were found from an indexed file
            search created by <see cref="M:OutputMgr.Interface.IIndexedFileManagement.SearchIndexedFiles(System.String,OutputMgr.Interface.IIndexSearchCallback)"/>.  The result records were
            obtained by calling <see cref="M:OutputMgr.Interface.IIndexedFileManagement.GetSearchResultDetails(OutputMgr.Interface.IIndexSearchCallback)"/>.</summary>
            <param name="resultsToDelete">Hashtable defining the records to be removed from the
            search results.  The key of each entry was obtained from the <b>detailedResults</b>
            argument returned after calling <b>GetSearchResultDetails</b></param>
            <param name="clientCallback">Interface used to return the results
            of this request.</param>
            <remarks>Since this method may take some time to complete, the method returns
            immediately to the caller.  The results are returned asynchronously via the
            <b>clientCallback</b> interface.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IIndexedFileManagement.GetIndexKeys(System.String[])">
            <summary>Retrieves a list of all index key names for the
            specified indexed files.</summary>
            <param name="paths">An array strings specifying the indexed files that the
            indexed keys are to be retrieved from.</param>
            <returns>An array of strings containing all the indexed key names for the
            specified files.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IIndexedFileManagement.GetSearchResultsPreviewInterface(System.String,System.String,System.String@)">
            <summary>Gets the interface to allow previewing the search results.
            The client must have previously called <see cref="M:OutputMgr.Interface.IIndexedFileManagement.SearchIndexedFiles(System.String,OutputMgr.Interface.IIndexSearchCallback)"/>
            to create some search results.</summary>
            <param name="printAttributeName">Name of a Print Attribute that will be used
            to format the file in Print Preview.  This may be null if default formatting
            is acceptable.</param>
            <param name="fileGroupName">Name of a File Group which determines the directory
            and dispositions for the file which will be previewed.</param>
            <param name="warningMessage">If this is not empty, then it contains a warning message
            to show to the user.  The preview interface is functional, but may not display the
            file correctly.  The most likely warning is that the specified Print Attribute could
            not be found and default formatting was used.</param>
            <returns>An interface that can be used to preview the results of an
            indexed file search.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IIndexedFileManagement.GetSearchResultDetails(OutputMgr.Interface.IIndexSearchCallback)">
            <summary>Gets detailed information about each record that was found during an indexed
            file search.  The client must have previously called
            <see cref="M:OutputMgr.Interface.IIndexedFileManagement.SearchIndexedFiles(System.String,OutputMgr.Interface.IIndexSearchCallback)"/> to create some search results.</summary>
            <param name="clientCallback">Interface used to return the results
            of this request.</param>
            <remarks>Since this method may take some time to complete, the method returns
            immediately to the caller.  The results are returned asynchronously via the
            <b>clientCallback</b> interface.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IIndexedFileManagement.GetSearchResultFileProperties(System.Int64@,System.String@,System.String,System.String)">
            <summary>Gets properties of the file which contain the results of an indexed file
            search.  These properties can be used to create jobs for this result file.</summary>
            <param name="fileId">The file-id in the File Information Database for the file
            created from the indexed search results.  This file-id is only valid until the client
            calls <see cref="M:OutputMgr.Interface.IIndexedFileManagement.Close"/> or any other method, such as <see cref="M:OutputMgr.Interface.IIndexedFileManagement.SearchIndexedFiles(System.String,OutputMgr.Interface.IIndexSearchCallback)"/>,
            that would modify the search results.  This includes changing the
            <b>printAttributeName</b> or <b>fileGroupName</b>.</param>
            <param name="xmlFileProperties">The XML properties of that file.</param>
            <param name="printAttributeName">Name of a Print Attribute that will be inserted
            into the file properties as the "Last Print Attribute Referenced".  If this fileId
            is later used to create a print job, this Print Attribute will be offered as the
            default attribute to format the print file.  This may be null if default formatting
            is acceptable.</param>
            <param name="fileGroupName">Name of a File Group which determines the directory
            and dispositions for the result file.</param>
        </member>
        <member name="M:OutputMgr.Interface.IIndexedFileManagement.RearrangeSearchResults(System.Collections.ArrayList,OutputMgr.Interface.IIndexSearchCallback)">
            <summary>Rearranges the search result records that were found from an indexed file
            search created by <see cref="M:OutputMgr.Interface.IIndexedFileManagement.SearchIndexedFiles(System.String,OutputMgr.Interface.IIndexSearchCallback)"/>.  The result records were
            obtained by calling <see cref="M:OutputMgr.Interface.IIndexedFileManagement.GetSearchResultDetails(OutputMgr.Interface.IIndexSearchCallback)"/>.</summary>
            <param name="desiredResultOrder">Array defining the desired order of the search
            records</param>
            <param name="clientCallback">Interface used to return the results
            of this request.</param>
            <remarks>Clients typically call this method if the search result records need to
            be sorted, or rearranged in some custom way, in the search result file.
            Since this method may take some time to complete, the method returns
            immediately to the caller.  The results are returned asynchronously via the
            <b>clientCallback</b> interface</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IIndexedFileManagement.SearchIndexedFiles(System.String,OutputMgr.Interface.IIndexSearchCallback)">
            <summary>Initiates an indexed file search.</summary>
            <param name="searchParameters">An XML specification of the search arguments.
            This defines the file(s) to search as well as the keys and values to compare
            during the search.</param>
            <param name="clientCallback">Interface used to return the results
            of this request.</param>
            <remarks>Since this method may take some time to complete, the method returns
            immediately to the caller.  The results are returned asynchronously via the
            <b>clientCallback</b> interface.</remarks>
        </member>
        <member name="T:OutputMgr.Interface.IIndexSearchCallback">
            <summary>A single common callback interface that is used by various methods in the
            <see cref="T:OutputMgr.Interface.IIndexedFileManagement"/> interface.</summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IIndexSearchCallback.RequestComplete">
            <summary>Called by the <see cref="M:OutputMgr.Interface.IIndexedFileManagement.DeleteSearchResults(System.Collections.Hashtable,OutputMgr.Interface.IIndexSearchCallback)"/>
            or <see cref="M:OutputMgr.Interface.IIndexedFileManagement.RearrangeSearchResults(System.Collections.ArrayList,OutputMgr.Interface.IIndexSearchCallback)"/> when those methods
            successfully complete their respective operations.</summary>
        </member>
        <member name="M:OutputMgr.Interface.IIndexSearchCallback.RequestComplete(System.String[])">
            <summary>Called by the <see cref="M:OutputMgr.Interface.IIndexedFileManagement.SearchIndexedFiles(System.String,OutputMgr.Interface.IIndexSearchCallback)"/>
            method after it successfully completes its search operation.</summary>
            <param name="xml">An array of XML strings that define the number of matches
            that were found in the indexed files that were searched.  Each XML document
            represents a <b>IndexedSearchResultFileSummary</b> object.</param>
        </member>
        <member name="M:OutputMgr.Interface.IIndexSearchCallback.RequestComplete(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>Called by the <see cref="M:OutputMgr.Interface.IIndexedFileManagement.GetSearchResultDetails(OutputMgr.Interface.IIndexSearchCallback)"/>
            method after it successfully completes its retrieval operation.</summary>
            <param name="indexedFilenames">Array of all the indexed filenames that
            were searched.</param>
            <param name="originalFilenames">Array of all the original filenames for those indexed
            files that were searched.  The original filename is found as data within the indexed
            file.  This array is the same length as <b>indexedFilenames</b> and the names are
            in the corresponding order to relate these names to the <b>indexedFilenames</b>.</param>
            <param name="keyNames">Array of index keys that were specified during the original
            search operation.</param>
            <param name="detailedResults">Array of XML strings that define each record matched
            during the indexed file search.  Each string specifies an index into the
            <b>originalFilenames</b> and <b>originalFilenames</b> arrays to define the file in
            which the match was found.  It also specifies indices into the <b>keyNames</b> array
            along with the values of each key that was matched.</param>
        </member>
        <member name="M:OutputMgr.Interface.IIndexSearchCallback.RequestFailed(System.Exception)">
            <summary>The requested operation has failed.</summary>
            <param name="ex">Exception which contains the details of the failure.</param>
        </member>
        <member name="M:OutputMgr.Interface.IIndexSearchCallback.RequestProgress(System.Int32,System.String)">
            <summary>Called by any method that requires an <see cref="T:OutputMgr.Interface.IIndexSearchCallback"/>
            interface.  Any such method may require substantial time to perform its requested
            operation.  This method is called during such an operation to report the progress
            of the operation.</summary>
            <param name="percentComplete">The progress of the operation as a percentage.
            This always returns a value from 0 to 100.</param>
            <param name="message">A message detailing further information of the progress.
            For example, this may define the indexed file that is being searched.  This may
            be null if it has not changed since the last progress message.</param>
        </member>
        <member name="T:OutputMgr.Interface.IManagedObjectCollection">
            <summary>
            An interface used by clients to manage a collection of server objects.
            </summary>
            <remarks>Methods are provided to list, modify, and delete objects.
            The objects to be managed include files, jobs, printers, and file transfers.
            The objects are returned to the client as XML strings which describe the
            properties of the object.</remarks>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.GetXmlProperties(System.String,OutputMgr.Interface.DisplayField[])">
            <summary>
            Retrieves the properties of the objects in the underlying collection.
            </summary>
            <param name="xmlFilter">A filter describing the objects that the client wishes
            to receive.  A null or empty string will result in all objects being sent.</param>
            <param name="desiredFields">A collection of display fields that the client wishes 
            to receive.</param>
            <returns>An array of XML strings that describe each entry in the underlying collection
            that matches the filter criteria.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.GetXmlProperties(System.Int64)">
            <summary>
            Retrieves all the properties of the specified object from the collection.
            </summary>
            <param name="entryId">The id of the desired object.  This id was supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
            <returns>An XML string containing all the object's properties.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.SetXmlProperties(System.Int64,System.String)">
            <summary>
            Allows clients to update some of the object's properties.  To determine which
            properties may be updated, refer to the object that implements this interface.
            </summary>
            <param name="entryId">The id of the desired object.  This id was supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
            <param name="properties">An XML string describing the properties to update.</param>
            <remarks>This method is not supported by all objects that implement this interface.
            Refer to the description of the object.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.Delete(System.Int64)">
            <summary>
            Deletes an object with the specified id from the underlying collection.
            </summary>
            <param name="entryId">The id of the desired object.  This id was supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
            <remarks>This method is not supported by all objects that implement this interface.
            Refer to the description of the object.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.DeleteMany(System.Int64[])">
            <summary>
            Deletes multiple objects with the specified ids from the underlying collection.
            </summary>
            <param name="entryIds">The ids of the desired objects.  These ids were supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
            <returns>Returns an array of error messages if there were errors deleting
            one or more of the objects.</returns>
            <exception cref="T:System.ApplicationException">Thrown when the objects cannot be
            deleted because the service is shutting down.</exception>
            <remarks><para>This method is not supported by all objects that implement this 
            interface. Refer to the description of the object.</para>
            <para>This method was added in version 2 of the interface.  See
            <see cref="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion"/>.</para></remarks>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.Disable(System.Int64)">
            <summary>
            Disables a job, which prevents it from being executed.
            </summary>
            <param name="entryId">The id of the desired job.  This id was supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
            <exception cref="T:OutputMgr.Interface.JobInProgressException">Thrown when attempting to disable
            a job that is currently being executed.</exception>
            <exception cref="T:OutputMgr.Interface.JobDoesNotExistException">The job no longer exists.</exception>
            <exception cref="T:System.ApplicationException">Thrown to denote various failed attempts
            to disable the job.  The exception message property includes the detailed description of
            the problem.</exception>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.DisableMany(System.Int64[],OutputMgr.Interface.JobDisableOverrideFlags)">
            <summary>
            Disables multiple jobs, which prevents them from being executed.
            </summary>
            <param name="entryIds">The ids of the jobs to enable.  These ids were supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
            <param name="overrideFlags">Special override flags used to direct the Output
            Manager server to bypass certain checks that normally would result in an
            error when disabling a job.</param>
            <returns>Returns an array of error messages if there were errors disabling
            one or more of the jobs.</returns>
            <exception cref="T:System.ApplicationException">Thrown when the jobs cannot be
            disabled because the service is shutting down.</exception>
            <remarks>This method was added in version 2 of the interface.  See
            <see cref="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion"/>.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.Enable(System.Int64)">
            <summary>
            Enables a job, allowing it to be scheduled for execution.
            </summary>
            <param name="entryId">The id of the desired job.  This id was supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.EnableMany(System.Int64[])">
            <summary>
            Enables multiple jobs, allowing them to be scheduled for execution.
            </summary>
            <param name="entryIds">The ids of the jobs to enable.  These ids were supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
            <returns>Returns an array of error messages if there were errors enabling
            one or more of the jobs.</returns>
            <exception cref="T:System.ApplicationException">Thrown when the jobs cannot be
            enabled because the service is shutting down.</exception>
            <remarks>This method was added in version 2 of the interface.  See
            <see cref="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion"/>.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollection.GetPreviewInterface(System.Int64,OutputMgr.Interface.PreviewType)">
            <summary>Gets an interface that allows the requested file to be viewed in
            a print preview window.</summary>
            <param name="id">The id of the desired file.  This id was supplied when a
            collection entry was created and the <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>
            event method was called.</param>
            <param name="fileType">The type of file interface that was used to obtain
            the <b>id</b>.</param>
            <returns>An interface that provides access to preview methods.</returns>
        </member>
        <member name="T:OutputMgr.Interface.IManagedObjectCollectionSink">
            <summary>
            Provides notification events to clients when entries represented by a ManagedCollection
            are added, deleted, or modified in the server.
            </summary>
            <remarks>To receive these events, a class implementing this interface must be passed
            to the <see cref="M:OutputMgr.Interface.IManagementWindow.RegisterForEvents(OutputMgr.Interface.IManagementWindowSink,System.String,OutputMgr.Interface.DisplayField[],System.Boolean)"/> method.</remarks>
            <exclude/> This interface is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollectionSink.Modified(System.String)">
            <summary>
            Occurs when an existing object has been modified in the underlying collection.
            </summary>
            <param name="xmlProperties">An XML string describing properties of the object.</param>
        </member>
        <member name="M:OutputMgr.Interface.IManagedObjectCollectionSink.Deleted(System.Int64[])">
            <summary>
            Occurs when an existing object has been deleted from the underlying collection.
            </summary>
            <param name="entryId">The id of the deleted object.</param>
        </member>
        <member name="T:OutputMgr.Interface.IPrinters">
            <summary>
            This interface provides access to the printers that are marked available.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetAllNames">
            <summary>
            This method returns a collection of all printer names corresponding to the
            available printers.
            </summary>
            <returns>A collection of printer names.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetPrinter(System.String)">
            <summary>
            This method retrieves an <see cref="T:OutputMgr.Interface.IPrinter"/> interface to the specified printer.
            </summary>
            <param name="printerName">Name of the printer.</param>
            <returns>An <see cref="T:OutputMgr.Interface.IPrinter"/> interface to the specified printer or <b>null</b>
            if the specified printer is not an available printer.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetPrinterPaperTypeAssociations(System.String)">
            <summary>
            Gets the paper type associations for the specified printer.
            </summary>
            <param name="printerName">The name of the printer.</param>
            <returns>An array of strings defining the paper types.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetInstalledWindowsPrinters">
            <summary>
            This method gets all of the configured Windows printer names.
            </summary>
            <returns>An array of strings containing all the configured printer names.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetAvailablePrintDriverEntries">
            <summary>
            This method gets the XML representation of all the DriverEntry objects in
            the PrintDrivers table that are available to the installed edition of the service.
            </summary>
            <returns>An array of XML strings, each representing a single DriverEntry</returns>
            <remarks>The collection consists of <b>DriverEntry</b> class objects; represented 
            in XML. The <b>DriverEntry</b> class is defined in the Output Manager API schema 
            (EomSchema.xsd) which can be found within the API folder in the Output Manager server 
            and client installation location.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetAllPrintDriverEntries">
            <summary>
            This method gets the XML representation of all the DriverEntry objects in
            the PrintDrivers table.
            </summary>
            <returns>An array of XML strings, each representing a single DriverEntry</returns>
            <remarks>The collection consists of <b>DriverEntry</b> class objects; represented 
            in XML. The <b>DriverEntry</b> class is defined in the Output Manager API schema 
            (EomSchema.xsd) which can be found within the API folder in the Output Manager server 
            and client installation location.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetPageSizeEntries">
            <summary>
            This method gets the XML representation of all the PageSizeEntry objects in
            the PageSizes table.
            </summary>
            <returns>An array of XML strings, each representing a single PageSizeEntry</returns>
            <remarks>The collection consists of <b>PageSizeEntry</b> class objects; represented 
            in XML. The <b>PageSizeEntry</b> class is defined in the Output Manager API schema 
            (EomSchema.xsd) which can be found within the API folder in the Output Manager server 
            and client installation location.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetWindowsPrinterInfo(System.String,System.Boolean@,System.Boolean@)">
            <summary>
            The method gets the names of the input paper bins for the given printer, plus
            determines if the printer supports duplex printing and landscape orientation.
            </summary>
            <param name="printerName">Name of the printer to query.</param>
            <param name="duplexSupported">Flag to set regarding duplex capability.</param>
            <param name="landscapeSupported">Flag to set regarding landscape capability.</param>
            <returns>Returns ArrayList of input paper bin names.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetWindowsPrinterInfoFromPhysicalPrinter(System.String,System.Boolean@,System.Boolean@)">
            <summary>
            The method gets the names of the input paper bins given a PhysicalPrinter name,
            plus determines if the printer supports duplex printing and landscape orientation.
            </summary>
            <param name="printerName">Name of the printer to query.</param>
            <param name="duplexSupported">Flag to set regarding duplex capability.</param>
            <param name="landscapeSupported">Flag to set regarding landscape capability.</param>
            <returns>Returns ArrayList of input paper bin names.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetPhysicalPrinterNames(OutputMgr.Interface.PrinterKinds)">
            <summary>
            Gets a list of Physical Printer names based upon the <see cref="T:OutputMgr.Interface.PrinterKinds"/> specification.
            </summary>
            <param name="kindOfPrinters">A <see cref="T:OutputMgr.Interface.PrinterKinds"/> enumeration value
            indicating the kind or printer and/or type of printer for which the names
            are to be returned.</param>
            <returns>The list of printer names.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IPrinters.GetLogicalPrinterNames(OutputMgr.Interface.PrinterKinds)">
            <summary>
            Gets a list of Logical Printer names based upon the <see cref="T:OutputMgr.Interface.PrinterKinds"/> specification.
            </summary>
            <param name="kindOfPrinters">A <see cref="T:OutputMgr.Interface.PrinterKinds"/> enumeration value
            indicating the kind or printer for which the names are to be returned.</param>
            <returns>The list of printer names.</returns>
            <remarks>
            Not all combinations of PrinterKinds enumeration values are supported due to the
            definition of logical printers.  A logical printer can contain any combination of
            'Windows' or 'LPR/LPD' printers.  However, if it contains a 'Custom', 'E-mail' or
            'Index' printer, then the logical printer must only contain that respective printer
            type.  Therefore, one should only specify <see cref="F:OutputMgr.Interface.PrinterKinds.All"/>, 
            <see cref="F:OutputMgr.Interface.PrinterKinds.Custom"/>, <see cref="F:OutputMgr.Interface.PrinterKinds.Email"/>.,
            <see cref="F:OutputMgr.Interface.PrinterKinds.Index"/> or <see cref="F:OutputMgr.Interface.PrinterKinds.EmailJobCompatible"/>
            for <paramref name="kindOfPrinters"/>.  Any other combination of <see cref="T:OutputMgr.Interface.PrinterKinds"/>
            will produce undefined results. 
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.IPrinters.Count">
            <summary>
            Gets the count of printers.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.IPrinter">
            <summary>
            This interface provides access to a specific printer that is marked available. 
            </summary>
            <remarks>If a client has an <b>IPrinter</b> interface to one of the printer 
            objects and the server removes that object from the printer collection, then 
            that object will not be valid and an exception may occur.</remarks>
            <internal>
            Implementation may lead to the server maintaining a collection of printers that
            represents Output Manager's "active printers" (i.e., those printers in the printer
            management window).  If a client has an IPrinter interface to one of the printer
            objects and the server removes that object from the printer collection, then any
            operation (method, property call) on the object is not useful.  In this case, we
            need to ensure the client is aware that the object is no longer valid from the
            server's perspective.  Possibly ObjectDisposedException is the solution.  Does
            the .NET Framework throw this exception if the object has been disposed?  If so,
            maybe all the server needs to do is dispose the object and the client will be
            responsible for catching the exception. 
            </internal>
        </member>
        <member name="M:OutputMgr.Interface.IPrinter.CompleteJobAndLock">
            <summary>
            This method directs the spooling process to finish the current print job on
            the printer (if any) and lock the printer.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.IPrinter.Delete(System.Boolean)">
            <summary>
            This method directs the spooling process to quit processing and delete the currently active
            print job.  Based upon the lock parameter, the printer is locked or left in the ready 
            state following the removal and deletion of the print job.
            </summary>
            <param name="lockPrinter">true if the printer should be locked after deleting the print
            job, false if the printer should be left in the ready state in order to allow the next
            queued print job to be scheduled.</param>
        </member>
        <member name="M:OutputMgr.Interface.IPrinter.Requeue(System.Boolean)">
            <summary>
            This method directs the spooling process quit processing the currently active print job
            and to requeue it.  Based upon the lock parameter, the printer is locked or left in the
            ready state after requeuing the print job.
            </summary>
            <param name="lockPrinter">true if the printer should be locked after requeuing the print
            job, false if the printer should be left in the ready state to allow printing to resume.
            to be scheduled.</param>
        </member>
        <member name="M:OutputMgr.Interface.IPrinter.Start">
            <summary>
            This method starts the printer from either a locked or suspended state.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.IPrinter.SuspendJob">
             <summary>
             This method suspends the currently printing print job.
             </summary>
             <example>
             <para>The following C# example demonstrates getting the status of
             printer named "Print1".</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Suspend the currently printing print job on printer "Print1".
               OutputMgr.Interface.IPrinters Iprint = server.GetPrintersInterface();
               OutputMgr.Interface.IPrinter printer = Iprint.GetPrinter("Print1");
               printer.SuspendJob();
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.DebugMode">
            <summary>
            Gets or sets the printer debug mode flag.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.DocumentName">
            <summary>
            Gets the name of the document currently being printed on the printer.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.Name">
            <summary>
            Gets the name of the printer.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.Pages">
            <summary>
            Gets the number of logical pages printed for the current print job.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.PaperType">
            <summary>
            Gets or sets the current paper (form) type setting for the printer.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.PercentComplete">
            <summary>
            Gets an estimate of what percentage of the current print job is complete.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.PrinterType">
            <summary>
            Gets the printer type.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.SkipToPage">
            <summary>
            Sets the skip-to page for an active print job.  The spooling process skips forward or
            backwards and resumes printing at the designated page.  If the printer is currently
            suspended, the printing will be resumed in order to process the skip-to page command.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.Status">
             <summary>
             Gets the status of the printer.
             </summary>
             <example>
             <para>The following C# example demonstrates getting the status of
             printer named "Print1".</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get "Print1" printer status.
               OutputMgr.Interface.IPrinters Iprint = server.GetPrintersInterface();
               OutputMgr.Interface.IPrinter printer = Iprint.GetPrinter("Print1");
               OutputMgr.Interface.PrinterStatus status = printer.Status;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IPrinter.TestPrintAndLock">
             <summary>
             Gets or sets the printer test print and lock flag.
             </summary>
             <example>
             <para>The following C# example demonstrates setting the test print
             and lock flag.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Set test print and lock for printer "Print1".
               OutputMgr.Interface.IPrinters Iprint = server.GetPrintersInterface();
               OutputMgr.Interface.IPrinter printer = Iprint.GetPrinter("Print1");
               printer.TestPrintAndLock = true;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="T:OutputMgr.Interface.IServiceProperties">
            <summary>
            This interface provides methods and properties that update the behavior of the service. 
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.RegisterForEvents(OutputMgr.Interface.IServicePropertiesChangedSink)">
            <summary>
            Registers a client to receive server events that report changes to the properties
            of the service.
            </summary>
            <param name="eventSink">An interface implemented by the caller that is used to
            deliver the events.</param>
            <remarks>This method does not validate any permissions.  Any client can call this method.
            However, the event methods of <see cref="T:OutputMgr.Interface.IServicePropertiesChangedSink"/> will only be
            called if the client has permission to view the data sent by the event.</remarks>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.UnregisterForEvents(OutputMgr.Interface.IServicePropertiesChangedSink)">
            <summary>
            Removes the client sink from the list of registered event sinks.
            </summary>
            <param name="eventSink">A sink interface which was previously registered by calling
            the <b>RegisterForEvents</b> method.</param>
            <exclude/> This method is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.GetXmlProperties">
            <summary>
            Retrieves the properties of the service.  Many of the properties returned by this
            method are read-only and cannot be modified by an external client.
            </summary>
            <returns></returns>
            <exclude/> This method is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.GetEmailSettings">
            <summary>
            Gets the e-mail settings.
            </summary>
            <returns>
            An XML string representing the settings used for sending of e-mail.
            </returns>
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.SetEmailSettings(System.String)">
            <summary>
            Sets the e-mail settings.
            </summary>
            <param name="sendEmailSettings">An XML string representing the settings used for
            sending of e-mail.</param>
            <returns>An object that contains a collection of errors and/or warnings that
            report the stauts of this request.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.GetSmtpAdvancedFields(System.Collections.Specialized.StringCollection@,System.Collections.Specialized.StringCollection@,System.Collections.Specialized.StringCollection@)">
            <summary>
            Get the collection of advanced fields for the internal SMTP sending agent.
            </summary>
            <param name="smtpAdvancedNames">String collection with the field names only. Each 
            element must have a corresponding element in the collection with the field values.</param>
            <param name="smtpAdvancedValues">String collection with the field values only. Each 
            element must have a corresponding element in the collection with the field names.</param>
            <param name="smtpAdvancedKnown">String collection with the predefined SMTP field names.</param>
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.SetSmtpAdvancedFields(System.Collections.Specialized.StringCollection,System.Collections.Specialized.StringCollection,System.Collections.Specialized.StringCollection)">
            <summary>
            Set the collection of advanced fields for the internal SMTP sending agent.
            </summary>
            <param name="smtpAdvancedNames">String collection with the field names only. Each
            element must have a corresponding element in the collection with the field values. This
            parameter cannot be null.</param>
            <param name="smtpAdvancedValues">String collection with the field values only. Each 
            element must have a corresponding element in the collection with the field names. This
            parameter cannot be null.</param>
            <param name="smtpAdvancedKnown">String collection with the predefined SMTP field names.
            This value can be null which means that the caller did not make any changes.</param>
            <remarks>
            This method is called to set the three collections associated with the SMTP advanced 
            fields. The collections with the names and values must be specified, the collection with
            the predefined known names is optional.
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.GetReceiveEmailSettings">
            <summary>
            Gets the settings used to receive e-mail.
            </summary>
            <returns>
            An XML string representing the settings used for receiving e-mail.
            </returns>
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.SetReceiveEmailSettings(System.String)">
            <summary>
            Sets the settings used to receive e-mail.
            </summary>
            <param name="receiveEmailSettings">An XML string representing the settings used for
            receiving e-mail.</param>
            <returns>An object that contains a collection of errors and/or warnings that
            report the status of this request.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.GetXslFoProperties">
            <summary>
            Gets the properties which configure any external XSL-FO components.
            </summary>
            <returns>An XML string representing the properties used to configure external
            XSL-FO components.</returns>
            <remarks>This method was added in version 20 of the interface.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServiceProperties.SetXslFoProperties(System.String)">
            <summary>
            Sets the properties which configure external XSL-FO components.
            </summary>
            <param name="xslFoProperties">An XML string describing the properties used to configure
            external XSL-FO components.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the values are invalid.</exception>
            <remarks>This method was added in version 20 of the interface.</remarks>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.FlushLogFile">
            <summary>
            Controls whether the application log files are flushed immediately to disk or whether
            the operating system is allowed to cache them.
            </summary>
            <value>True if log files should be flushed immediately.  This value improves the
            reliability of the log data, but the write operations are slower.
            False if the files can be cached in memory.</value>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.BackupJobSchedulingEnabled">
             <summary>
             Controls whether the scheduling of new backup jobs is currently enabled.
             </summary>
             <value>True if scheduling of backup jobs is currently allowed.
             False if backup job scheduling is currently prevented.</value>
             <example>
             <para>The following C# example demonstrates disabling backup job
             scheduling.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop backup job scheduling.
               sp.BackupJobSchedulingEnabled = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.EmailJobSchedulingEnabled">
             <summary>
             Controls whether the scheduling of new e-mail jobs is currently enabled.
             </summary>
             <value>True if scheduling of e-mail jobs is currently allowed.
             False if e-mail job scheduling is currently prevented.</value>
             <example>
             <para>The following C# example demonstrates disabling e-mail job
             scheduling.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop e-mail job scheduling.
               sp.EmailJobSchedulingEnabled = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.PrintJobSchedulingEnabled">
             <summary>
             Controls whether the scheduling of new print jobs is currently enabled.
             </summary>
             <value>True if scheduling of print jobs is currently allowed.
             False if print job scheduling is currently prevented.</value>
             <example>
             <para>The following C# example demonstrates disabling print job
             scheduling.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop print job scheduling.
               sp.PrintJobSchedulingEnabled = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.TransferJobSchedulingEnabled">
             <summary>
             Controls whether the scheduling of new transfer jobs is currently enabled.
             </summary>
             <value>True if scheduling of transfer jobs is currently allowed.
             False if transfer job scheduling is currently prevented.</value>
             <example>
             <para>The following C# example demonstrates disabling transfer job
             scheduling.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop transfer job scheduling.
               sp.TransferJobSchedulingEnabled = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.CustomJobSchedulingEnabled">
             <summary>
             Controls whether the scheduling of new custom jobs is currently enabled.
             </summary>
             <value>True if scheduling of custom jobs is currently allowed.
             False if custom job scheduling is currently prevented.</value>
             <example>
             <para>The following C# example demonstrates disabling custom job
             scheduling.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop custom job scheduling.
               sp.CustomJobSchedulingEnabled = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.TransformJobSchedulingEnabled">
             <summary>
             Controls whether the scheduling of new transform jobs is currently enabled.
             </summary>
             <value>True if scheduling of transform jobs is currently allowed.
             False if transform job scheduling is currently prevented.</value>
             <example>
             <para>The following C# example demonstrates disabling transform job
             scheduling.</para>
             <code>
               // Create instance for connection to "222.222.222.222", with
               // default port number of "8086" and default authentication of "Connect",
               // and default security provider of "NTLM".
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop transform job scheduling.
               sp.TransformJobSchedulingEnabled = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.IncomingTransfersAllowed">
             <summary>
             Controls whether the service is accepting incoming file requests from
             (TCP) transfers.
             </summary>
             <value>
             True if incoming TCP transfer requests are to be accepted, false
             otherwise.
             </value>
             <example>
             <para>The following C# example demonstrates disabling incoming 
             TCP transfers.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop incoming TCP transfers.
               sp.IncomingTransfersAllowed = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.DirectoryMonitorsAllowed">
             <summary>
             Controls whether the service is accepting processing of incoming file via
             the <b>DirectoryMonitor</b> interface.
             </summary>
             <value>
             True if processing of files from the <b>DirectoryMonitor</b> interface is currently 
             allowed, false otherwise.
             </value>
             <example>
             <para>The following C# example demonstrates disabling incoming 
             directory monitors.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop incoming directory monitors.
               sp.DirectoryMonitorsAllowed= false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.FilesFromRemotingAndComAllowed">
             <summary>
             Controls whether the service is accepting job creation requests for files
             via the Remoting and COM interfaces.
             </summary>
             <value>
             True if files from the Remoting and COM interfaces are to be accepted for
             creating jobs, false otherwise.
             </value>
             <example>
             <para>The following C# example demonstrates disabling incoming 
             files via the Remoting and COM interfaces.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop incoming files via Remoting and COM.
               sp.FilesFromRemotingAndComAllowed= false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MessageQueueMonitorsAllowed">
             <summary>
             Controls whether the service is accepting job creation requests for data
             received via the Message Queue Monitor interface.
             </summary>
             <value>
             True if data from the Message Queue Monitor interface are to be accepted
             for creating jobs, false otherwise.
             </value>
             <example>
             <para>The following C# example demonstrates disabling incoming data via
             the Message Queue Monitor interface.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop incoming files via Remoting and COM.
               sp.MessageQueueMonitorsAllowed = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.IncomingEmailAllowed">
             <summary>
             Controls whether the service is accepting incoming e-mail.
             </summary>
             <value>
             True if incoming e-mail is to be accepted, false otherwise.
             </value>
             <example>
             <para>The following C# example demonstrates disabling incoming e-mail.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Stop incoming e-mail.
               sp.IncomingEmailAllowed = false;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
             <remarks>This property was added in version 25 of the interface.</remarks>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.LocalIpAddress">
            <summary>
            Gets and sets the local IP Address for this service.  This is only used during some
            transfer jobs.
            </summary>
            <remarks>
            This property was marked obsolete because it was never implemented and now with
            the IPv6 integration a single local IP address for binding to when creating the
            sockets for sending communication paths would not be sufficient.  If a binding
            address is required, then consideration will have to be given to placing that
            on the communication path attribute(s).w
            </remarks>
            <exclude/> This property is not included in the API .chm.
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.LocalHostName">
            <summary>
            Gets and sets the local host name for this service.  This name is only used during some
            file transfers to identify this end point in the transfer.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.CommunicationPollingPathTimeInterval">
             <summary>
             Gets or sets the time interval between polling of the Communication Polling Paths.
             </summary>
             <example>
             <para>The following C# example demonstrates changing the communication 
             polling path to 1 minute.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Change value.
               sp.CommunicationPollingPathTimeInterval= 60;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.EnforceComSecurity">
            <summary>Gets and sets a flag that enables or disables the impersonation of COM
            clients using the IOutputManager COM interface.</summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.EnableRemoteScripts">
            <summary>This property is no longer supported.  It should not be used.  It remains
            only to provide compatibility with old client applications.</summary>
            <exclude/> This interface is no longer included in the API .chm file. 
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MaxConcurrentPrintJobs">
             <summary>
             Gets and sets the maximum number of print jobs that can execute concurrently.
             </summary>
             <example>
             <para>The following C# example demonstrates changing the maximum 
             concurrent print jobs to 1.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Change value.
               sp.MaxConcurrentPrintJobs= 1;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MaxConcurrentTransferJobs">
             <summary>
             Gets and sets the maximum number of transfer jobs that can execute concurrently.
             </summary>
             <example>
             <para>The following C# example demonstrates changing the maximum 
             concurrent transfer jobs to 1.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Change value.
               sp.MaxConcurrentTransferJobs = 1;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MaxConcurrentTransformJobs">
             <summary>
             Gets and sets the maximum number of transform jobs that can execute concurrently.
             The maximum value allowed depends on the edition of the Output Manager server.
             </summary>
             <example>
             <para>The following C# example demonstrates changing the maximum 
             concurrent transform jobs to 1.</para>
             <code>
               // Create instance for connection to "222.222.222.222", with
               // default port number of "8086" and default authentication of "Connect",
               // and default security provider of "NTLM".
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Change value.
               sp.MaxConcurrentTransformJobs = 1;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MaxConcurrentCustomJobs">
             <summary>
             Gets and sets the maximum number of custom jobs that can execute concurrently.
             </summary>
             <example>
             <para>The following C# example demonstrates changing the maximum 
             concurrent custom jobs to 1.</para>
             <code>
               // Create instance for connection to "222.222.222.222", with
               // default port number of "8086" and default authentication of "Connect",
               // and default security provider of "NTLM".
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Change value.
               sp.MaxConcurrentCustomJobs = 1;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MaxConcurrentIncomingConnections">
            <summary>
            Gets and sets the maximum number of Tcp listens that can be open concurrently.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MaxFileDatabaseEntries">
             <summary>
             Gets and sets the maximum number of files that can reside in the file information database
             for this service.  When the database reaches this capacity, requests to add new files are 
             rejected.
             </summary>
             <example>
             <para>The following C# example demonstrates changing the maximum 
             number of file information database entries.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Change value.
               sp.MaxFileDatabaseEntries = 100000;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MaxLogFiles">
             <summary>
             Gets and sets the maximum number of log files to be retained by this service.
             When the number of files exceeds this value, the oldest files are deleted.
             </summary>
             <example>
             <para>The following C# example demonstrates changing the maximum 
             number of log files.</para>
             <code>
               // Create connection to server "222.222.222.222" using the default port number.
               sc = new OutputMgr.Interface.ServerConnection("222.222.222.222");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get service property interface.
               OutputMgr.Interface.IServiceProperties sp = server.GetServicePropertiesInterface();
               
               // Change value.
               sp.MaxLogFiles = 60;
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.SasServer">
            <summary>Gets and sets the name of the Sentinel Alert Services server that is used to 
            process alerts generated by the Output Manager service.</summary>
            <value>The name of the server that provides alerts services.</value>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.ClientPermissions">
            <summary>
            Gets an XML document that describes the permissions that are allowed or denied
            for the requesting client.
            </summary>
            <remarks>The collection consists of <b>SecurityPermissions</b> class objects; 
            represented in XML. The <b>SecurityPermissions</b> class is defined in the Output 
            Manager API schema (EomSchema.xsd) which can be found within the API folder in the 
            Output Manager server and client installation location. </remarks>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.LocalGroupNames">
            <summary>Gets the local group names from the service computer.  These group
            names are used to assign security roles.</summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.EmailSendingOption">
            <summary>
            Get or set how the service will send e-mail messages.
            </summary>
            <remarks>
            This property is obsolete starting with server interface version 11, but remains
            defined for clients calling servers running older versions.  For servers running
            version 11 or greater (as indicated by method
            <see cref="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion"/>),
            method <see cref="M:OutputMgr.Interface.IServiceProperties.GetEmailSettings"/>
            and/or <see cref="M:OutputMgr.Interface.IServiceProperties.SetEmailSettings(System.String)"/>
            should be used instead.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.SmtpTransport">
            <summary>
            Get or set the SMTP transport provider name.
            </summary>
            <remarks>
            This property is obsolete starting with server interface version 11, but remains
            defined for clients calling servers running older versions.  For servers running
            version 11 or greater (as indicated by method
            <see cref="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion"/>),
            method <see cref="M:OutputMgr.Interface.IServiceProperties.GetEmailSettings"/>
            and/or <see cref="M:OutputMgr.Interface.IServiceProperties.SetEmailSettings(System.String)"/>
            should be used instead.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.TextSizeLimit">
            <summary>
            Get or set the e-mail message body maximum size.
            </summary>
            <remarks>
            This property is obsolete starting with server interface version 11, but remains
            defined for clients calling servers running older versions.  For servers running
            version 11 or greater (as indicated by method
            <see cref="M:OutputMgr.Interface.IOutputManagerServer.GetInterfaceVersion"/>),
            method <see cref="M:OutputMgr.Interface.IServiceProperties.GetEmailSettings"/>
            and/or <see cref="M:OutputMgr.Interface.IServiceProperties.SetEmailSettings(System.String)"/>
            should be used instead.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.Edition">
            <summary>
            Get the server edition (Enterprise, Department, or Professional).
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.MajorMinorVersion">
            <summary>
            Get the major/minor version of the server (e.g. "7.0").
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.FullVersion">
            <summary>
            Get the full version of the server.
            This includes the major/minor/build/revision values (e.g. "7.0.4.2").
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.ReleaseVersion">
            <summary>
            Get the major/minor version of the server and optionally the build and revision values.
            The build and revision values are only supplied if they are nonzero.  If revision is
            nonzero, this returns the same value as <see cref="P:OutputMgr.Interface.IServiceProperties.FullVersion"/>.  If the revision is
            zero, it is not included, e.g. "7.0.3".  If build and revision are both zero,
            neither are included, e.g. "7.0".
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.ThresholdEnabled">
            <summary>
            Get or set the flag indicating if the threshold monitors are enabled.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.FileJobThresholds">
            <summary>
            Get or set the collection of file/job thresholds and their corresponding definitions.
            </summary>
            <remarks>The collection consists of <b>FileJobThreshold</b> class objects; represented 
            in XML. The <b>FileJobThreshold</b> class is defined in the Output Manager API schema 
            (EomSchema.xsd) which can be found within the API folder in the Output Manager server 
            and client installation location. </remarks>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.ListeningPathThresholds">
            <summary>
            Get or set the collection of listening path thresholds and their corresponding 
            definitions.
            </summary>
            <remarks>The collection consists of <b>ListeningPathThreshold </b> class objects; 
            represented in XML. The <b>ListeningPathThreshold </b> class is defined in the 
            Output Manager API schema (EomSchema.xsd) which can be found within the API folder 
            in the Output Manager server and client installation location. </remarks>
        </member>
        <member name="P:OutputMgr.Interface.IServiceProperties.SnmpRunningAndExtensionAgentInstalled">
            <summary>
            Get a flag indicating if the Windows SNMP service is running and the Output Manager
            SNMP Extension Agent is installed.  
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.IServicePropertiesChangedSink">
            <summary>
            Provides events that notify clients of changes to application properties
            within the service that may affect the presentation of a client's user interface.
            </summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IServicePropertiesChangedSink.JobSchedulingStateChanged(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The state of job scheduling in the service has changed.
            </summary>
            <param name="backupJobsAllowed">If true, backup job scheduling is allowed.</param>
            <param name="emailJobsAllowed">If true, e-mail job scheduling is allowed.</param>
            <param name="printJobsAllowed">If true, print job scheduling is allowed.</param>
            <param name="transferJobsAllowed">If true, transfer job scheduling is allowed.</param>
            <param name="customJobsAllowed">If true, custom job scheduling is allowed.</param>
            <remarks>This method is only called if the client has permission to view the
            properties that control suspending and resuming jobs and incoming files.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServicePropertiesChangedSink.JobSchedulingStateChanged2(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The state of job scheduling in the service has changed.
            </summary>
            <param name="backupJobsAllowed">If true, backup job scheduling is allowed.</param>
            <param name="emailJobsAllowed">If true, e-mail job scheduling is allowed.</param>
            <param name="printJobsAllowed">If true, print job scheduling is allowed.</param>
            <param name="transferJobsAllowed">If true, transfer job scheduling is allowed.</param>
            <param name="customJobsAllowed">If true, custom job scheduling is allowed.</param>
            <param name="transformJobsAllowed">If true, transform job scheduling is allowed.</param>
            <remarks>This method is only called if the client has permission to view the
            properties that control suspending and resuming jobs and incoming files.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServicePropertiesChangedSink.IncomingFilesStateChanged(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The state of accepting incoming file requests in the service has changed.
            </summary>
            <param name="transfersAllowed">If true, incoming transfers are allowed.</param>
            <param name="directoryMonitorsAllowed">If true, directory monitoring is
             allowed.</param>
            <param name="remotingAndComAllowed">If true, incoming files or job creation 
            requests are allowed via the Remoting and COM interfaces.</param>
            <param name="messageQueueMonitorsAllowed">If true, message queue monitoring is
            allowed.</param>
            <remarks>
            <para>
            This method is only called if the client has permission to view the
            properties that control suspending and resuming jobs and incoming files.
            </para>
            <para>
            This interface method is provided for clients that connect to a server supporting
            version 10 or later with the new Message Queue Monitor capability.  It allows the
            client to receive an event call including a status of whether message queue
            monitoring is currently allowed.
            </para>
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServicePropertiesChangedSink.IncomingFilesStateChanged2(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The state of accepting incoming file requests in the service has changed.
            </summary>
            <param name="transfersAllowed">If true, incoming transfers are allowed.</param>
            <param name="directoryMonitorsAllowed">If true, directory monitoring is
             allowed.</param>
            <param name="remotingAndComAllowed">If true, incoming files or job creation 
            requests are allowed via the Remoting and COM interfaces.</param>
            <param name="messageQueueMonitorsAllowed">If true, message queue monitoring is
            </param>
            <param name="emailReceiveAllowed">If true, the service is allowed to receive e-mail.
            allowed.</param>
            <remarks>
            <para>
            This method is only called if the client has permission to view the
            properties that control suspending and resuming jobs and incoming files.
            </para>
            <para>
            This interface method is provided for clients that connect to a server supporting
            version 25 or later.  Such servers provide the new ability to suspend and resume
            receiving of e-mail.
            </para>
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServicePropertiesChangedSink.SasServerChanged(System.String)">
            <summary>
            The server which provides alert services has changed.
            </summary>
            <param name="serverName">The name of the server which now processes alert
            services for this instance of Output Manager.</param>
            <remarks>This method is only called if the client has permission to view the
            alerts.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServicePropertiesChangedSink.SecurityRolesChanged">
            <summary>A security role has been updated.  Clients should refresh their permissions via
            <see cref="P:OutputMgr.Interface.IServiceProperties.ClientPermissions"/> to insure that the user interface
            reflects the updated permissions.  The service throttles these events.  Therefore, if
            many Security Roles are updated quickly, only one event is sent.</summary>
            <remarks>This method is always called, regardless of the client's permissions.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServicePropertiesChangedSink.ServiceIsStopping">
            <summary>The service is stopping.  Clients should avoid invoking any service methods.
            All interfaces previously obtained should be destroyed.</summary>
            <remarks>This method is always called, regardless of the client's permissions.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IServicePropertiesChangedSink.DisconnectedConnection">
            <summary>The client connection has been disconnected by another user.
            Clients should avoid invoking any service methods. All interfaces previously obtained 
            should be destroyed.</summary>
            <remarks>This method was added in server interface version 20.</remarks>
        </member>
        <member name="T:OutputMgr.Interface.ICreateTask">
            <summary>
            This interface provides methods to create jobs, custom alerts, and user log entries. 
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreatePrintJob(System.String,System.String,System.String,System.String,System.Char,System.Int32,System.Int16,System.String,OutputMgr.Interface.FileType,System.String)">
             <summary>Create a new print job for the specified file.  The File Group dispositions
             control when the file will be deleted.</summary>
             <param name="filePath">The full path name of the file to print.  The service must be
             able to read the file using this path name.  The file must not be deleted by the user
             until the print job has finished.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the file after
             the print job completes.  It also defines the first digit of the job's priority.</param>
             <param name="printAttributeName">The Print Attribute used to print the file.</param>
             <param name="printerName">The printer on which the file will be printed.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="numberOfCopies">Number of times the file is printed.
             Must be in the range 1 to 32767.  Values outside that range are changed to one.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="pageRange">Pages to be printed.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a print job, an exception 
             of type <see cref="T:System.Security.SecurityException"/> will be returned.</para>
             <para>If a parameter is supplied to the <b>CreatePrintJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a print job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating print job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Create print job.
               ct.CreatePrintJob(@"c:\data.txt",       // Fully qualified file name
                  "FileGroup",                         // File group
                  "PrintAttribute",                    // Print attribute name
                  "PrinterName",                       // Printer name
                  'A',                                 // Priority
                  1,                                   // Estimated pages
                  1,                                   // Number of copies
                  "BannerId",                          // Banner id
                  OutputMgr.Interface.FileType.ASCII,  // File type
                  "1");                                // Page range
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreatePrintJob(System.String,System.String,System.String,System.String,System.Char,System.Int32,System.Int16,System.String,OutputMgr.Interface.FileType,System.Int32,System.String)">
             <summary>Create a new print job for the specified file.  The File Group dispositions
             control when the file will be deleted.</summary>
             <param name="filePath">The full path name of the file to print.  The service must be
             able to read the file using this path name.  The file must not be deleted by the user
             until the print job has finished.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the file after
             the print job completes.  It also defines the first digit of the job's priority.</param>
             <param name="printAttributeName">The Print Attribute used to print the file.</param>
             <param name="printerName">The printer on which the file will be printed.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="numberOfCopies">Number of times the file is printed.
             Must be in the range 1 to 32767.  Values outside that range are changed to one.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="codePage">The code page that is to be used for reading the file or
             <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
             </param>
             <param name="pageRange">Pages to be printed.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a print job, an exception 
             of type <see cref="T:System.Security.SecurityException"/> will be returned.</para>
             <para>If a parameter is supplied to the <b>CreatePrintJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a print job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating print job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Create print job.
               ct.CreatePrintJob(@"c:\data.txt",       // Fully qualified file name
                  "FileGroup",                         // File group
                  "PrintAttribute",                    // Print attribute name
                  "PrinterName",                       // Printer name
                  'A',                                 // Priority
                  1,                                   // Estimated pages
                  1,                                   // Number of copies
                  "BannerId",                          // Banner id
                  OutputMgr.Interface.FileType.ASCII,  // File type
                  1252,                                // Code page
                  "1");                                // Page range
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreatePrintJob(System.IO.FileStream,System.String,System.String,System.String,System.Char,System.Int32,System.Int16,System.String,OutputMgr.Interface.FileType,System.String)">
             <summary>Create a new print job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The print job will print the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to print.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the print job completes.  It also defines the first digit of the print
             job's priority.</param>
             <param name="printAttributeName">The Print Attribute used to print the file.</param>
             <param name="printerName">The printer on which the file will be printed.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="numberOfCopies">Number of times the file is printed.
             Must be in the range 1 to 32767.  Values outside that range are changed to one.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="pageRange">Pages to be printed.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a print job, an exception 
             of type <see cref="T:System.Security.SecurityException"/> will be returned.</para>
             <para>If a parameter is supplied to the <b>CreatePrintJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a print job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating print job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create print job.
               ct.CreatePrintJob(fs,                   // File stream object
                  "FileGroup",                         // File group
                  "PrintAttribute",                    // Print attribute name
                  "PrinterName",                       // Printer name
                  'A',                                 // Priority
                  1,                                   // Estimated pages
                  1,                                   // Number of copies
                  "BannerId",                          // Banner id
                  OutputMgr.Interface.FileType.ASCII,  // File type
                  "1");                                // Page range
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreatePrintJob(System.IO.FileStream,System.String,System.String,System.String,System.Char,System.Int32,System.Int16,System.String,OutputMgr.Interface.FileType,System.Int32,System.String)">
             <summary>Create a new print job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The print job will print the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to print.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the print job completes.  It also defines the first digit of the print
             job's priority.</param>
             <param name="printAttributeName">The Print Attribute used to print the file.</param>
             <param name="printerName">The printer on which the file will be printed.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="numberOfCopies">Number of times the file is printed.
             Must be in the range 1 to 32767.  Values outside that range are changed to one.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="codePage">The code page that is to be used for reading the file or
             <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
             </param>
             <param name="pageRange">Pages to be printed.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a print job, an exception 
             of type <see cref="T:System.Security.SecurityException"/> will be returned.</para>
             <para>If a parameter is supplied to the <b>CreatePrintJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a print job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating print job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create print job.
               ct.CreatePrintJob(fs,                   // File stream object
                  "FileGroup",                         // File group
                  "PrintAttribute",                    // Print attribute name
                  "PrinterName",                       // Printer name
                  'A',                                 // Priority
                  1,                                   // Estimated pages
                  1,                                   // Number of copies
                  "BannerId",                          // Banner id
                  OutputMgr.Interface.FileType.ASCII,  // File type
                  1252,                                // Code page
                  "1");                                // Page range
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreatePrintJob(System.Int64,System.String,System.String,System.String,System.Char,System.Int16,System.String)">
            <summary>Create a new print job for a file already in the file database.
            <p style="color: #ff0000;">This method supports the Output Manager
            infrastructure and is not intended to be used directly by your code.</p></summary>
            <param name="fileId">A file identifier obtained from a file management event. 
            See <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>.</param>
            <param name="printAttributeName">The Print Attribute used to print the file.</param>
            <param name="printAttributeProperties">A Print Attribute in XML form that will be
            used to print the file.  If this is specified, then <b>printAttributeName</b>
            is ignored.</param>
            <param name="printerName">The printer on which the file will be printed.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="numberOfCopies">Number of times the file is printed.
            Must be in the range 1 to 32767.  Values outside that range are changed to one.</param>
            <param name="pageRange">Pages to be printed.</param>
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateTransferJob(System.IO.FileStream,System.String,System.String,System.String,System.Char,System.Int32,System.String,OutputMgr.Interface.FileType,System.Boolean)">
             <summary>Create a new transfer job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The transfer job will transfer the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to transfer.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the transfer job completes.  It also defines the first digit of the transfer
             job's priority.</param>
             <param name="transferAttributeName">The Transfer Attribute that defines
              the transfer parameters.</param>
             <param name="destinationQueue">Optionally, specifies the name of a print queue on the
             destination system.  If supplied, it overrides the host queue name defined in the
             transfer attribute. The queue name specified is case sensitive.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="fileType">Specified how the file is processed.</param>
             <param name="useLprLpdBanner">If true, a banner page is composed and sent before the
             file data.  Only applies when using sending to an LPR/LPD system.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a transfer job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateTransferJob</b> method which is not 
             valid, an exception of type <see cref="T:System.ArgumentException"/> will be returned.
             </para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a transfer job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating transfer job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create transfer job.
               ct.CreateTransferJob(fs,                // File stream object
                  "FileGroup",                         // File group
                  "TransferAttribute",                 // Transfer attribute
                  "DestinationQueue",                  // Destination queue
                  'A',                                 // Priority
                  10,                                  // Estimated pages
                  "BannerId",                          // Banner id
                  OutputMgr.Interface.FileType.ASCII,  // File type
                  false);                              // Use LPR/LPD banner page?
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateTransferJob(System.IO.FileStream,System.String,System.String,System.String,System.Char,System.Int32,System.String,OutputMgr.Interface.FileType,System.Int32,System.Boolean)">
             <summary>Create a new transfer job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The transfer job will transfer the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to transfer.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the transfer job completes.  It also defines the first digit of the transfer
             job's priority.</param>
             <param name="transferAttributeName">The Transfer Attribute that defines
              the transfer parameters.</param>
             <param name="destinationQueue">Optionally, specifies the name of a print queue on the
             destination system.  If supplied, it overrides the host queue name defined in the
             transfer attribute. The queue name specified is case sensitive.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="fileType">Specified how the file is processed.</param>
             <param name="codePage">The code page that is to be used for reading the file or
             <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
             </param>
             <param name="useLprLpdBanner">If true, a banner page is composed and sent before the
             file data.  Only applies when using sending to an LPR/LPD system.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a transfer job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateTransferJob</b> method which is not 
             valid, an exception of type <see cref="T:System.ArgumentException"/> will be returned.
             </para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a transfer job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating transfer job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create transfer job.
               ct.CreateTransferJob(fs,                // File stream object
                  "FileGroup",                         // File group
                  "TransferAttribute",                 // Transfer attribute
                  "DestinationQueue",                  // Destination queue
                  'A',                                 // Priority
                  10,                                  // Estimated pages
                  "BannerId",                          // Banner id
                  OutputMgr.Interface.FileType.ASCII,  // File type
                  1252,                                // Code page
                  false);                              // Use LPR/LPD banner page?
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>  
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateTransferJob(System.Int64,System.String,System.String,System.Char,System.String,System.Boolean)">
            <summary>Create a new transfer job for a file already in the file database.
            <p style="color: #ff0000;">This method supports the Output Manager
            infrastructure and is not intended to be used directly by your code.</p></summary>
            <param name="fileId">A file identifier obtained from a file management event. 
            See <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>.</param>
            <param name="transferAttributeName">The Transfer Attribute that defines
             the transfer parameters.</param>
            <param name="transferAttributeProperties">A Transfer Attribute in XML form that will be
            used to transfer the file.  If this is specified, then <b>transferAttributeName</b>
            is ignored.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="destinationQueue">Optionally, specifies the name of a print queue on the
            destination system.  If supplied, it overrides the host queue name defined in the
            transfer attribute. The queue name specified is case sensitive.</param>
            <param name="useLprLpdBanner">If true, a banner page is composed and sent before the
            file data.  Only applies when using sending to an LPR/LPD system.</param>
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateBackupJob(System.IO.FileStream,System.String,System.String,System.String,System.Char,System.Int32,System.String,OutputMgr.Interface.FileType)">
             <summary>Create a new backup job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The backup job will backup the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to backup.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the backup job completes.  It also defines the first digit of the backup
             job's priority.</param>
             <param name="backupAttributeName">A Backup Attribute that defines how to backup
              the file.</param>
             <param name="printAttributeName">A Print Attribute to be saved in the backup file that
             defines the print definition when the backup file is restored or viewed with
             print preview.</param>
             <param name="priority">This field is reserved for future use.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="fileType">Determines how the file is processed by the print spooler.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a backup job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateBackupJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a backup job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating backup job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create backup job.
               ct.CreateBackupJob(fs,                     // Specify file stream object.
                  "FileGroupName",                        // Specify name of file group.
                  "BackupAttribute",                      // Specify backup attribute name.
                  "PrintAttribute",                       // Specify print attribute name.
                  'A',                                    // Specify priority.
                  3,                                      // Specify estimated pages.
                  "BannerId",                             // Specify banner id.
                  OutputMgr.Interface.FileType.ASCII);    // Specify file type.
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateBackupJob(System.IO.FileStream,System.String,System.String,System.String,System.Char,System.Int32,System.String,OutputMgr.Interface.FileType,System.Int32)">
             <summary>Create a new backup job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The backup job will backup the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to backup.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the backup job completes.  It also defines the first digit of the backup
             job's priority.</param>
             <param name="backupAttributeName">A Backup Attribute that defines how to backup
              the file.</param>
             <param name="printAttributeName">A Print Attribute to be saved in the backup file that
             defines the print definition when the backup file is restored or viewed with
             print preview.</param>
             <param name="priority">This field is reserved for future use.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="fileType">Determines how the file is processed by the print spooler.</param>
             <param name="codePage">The code page that is to be used for reading the file or
             <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
             </param>
             <remarks>
             <para>If the caller does not have security privileges to create a backup job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateBackupJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a backup job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating backup job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create backup job.
               ct.CreateBackupJob(fs,                     // Specify file stream object.
                  "FileGroupName",                        // Specify name of file group.
                  "BackupAttribute",                      // Specify backup attribute name.
                  "PrintAttribute",                       // Specify print attribute name.
                  'A',                                    // Specify priority.
                  3,                                      // Specify estimated pages.
                  "BannerId",                             // Specify banner id.
                  OutputMgr.Interface.FileType.ASCII,     // Specify file type.
                  1252);                                  // Code page.
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateBackupJob(System.Int64,System.String,System.String)">
            <summary>Create a new backup job for a file already in the file database.
            <p style="color: #ff0000;">This method supports the Output Manager
            infrastructure and is not intended to be used directly by your code.</p></summary>
            <param name="fileId">A file identifier obtained from a file management event. 
            See <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>.</param>
            <param name="backupAttributeName">A Backup Attribute that defines how to backup
             the file.</param>
            <param name="backupAttributeProperties">A Backup Attribute in XML form that will be
            used to backup the file.  If this is specified, then <b>backupAttributeName</b>
            is ignored.</param>
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateEmailJob(System.IO.FileStream,System.String,System.String,System.String,System.String,System.Char,System.String,System.Int32,System.String,OutputMgr.Interface.FileType,System.String)">
             <summary>Create a new e-mail job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The e-mail job will e-mail the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to e-mail.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the e-mail job completes.  It also defines the first digit of the e-mail
             job's priority.</param>
             <param name="emailAttributeName">The EmailAttribute used to e-mail the file.</param>
             <param name="printAttributeName">An optional Print Attribute for re-formatting the file
             into a new output file for the e-mail job by creating a print job that uses this Print
             Attribute and executes on a 'E-mail' printer or 'Windows' printer that is configured to
             create an output file (such as a PDF file).</param>
             <param name="printerName">The name of a 'Custom' or 'Windows' printer that is used format
             a new output file for the e-mail job using the specified Print Attribute.  This parameter is
             required if and only if <paramref name="printAttributeName"/> is specified.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="estimatedPages">The estimated number of pages that will be e-mailed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="pageRange">Pages to be printed.  The <b>printAttributeName</b>
             must also be specified to process the correct pages.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="attachmentDisplayName">An e-mail attachment display name. If left blank,
             the attachment display name from the e-mail attribute will be used.  If that is blank,
             then the name of the file is used.</param>
             <remarks>
             <para>If the caller does not have security privileges to create an e-mail job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateEmailJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create an e-mail job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating an e-mail job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create e-mail job.
               ct.CreateEmailJob(fs,                     // File stream object
                  "FileGroup",                           // File group
                  "EmailAttribute",                      // E-mail attribute name
                  "PrintAttribute",                      // Print attribute name
                  "PrinterName",                         // Printer name
                  'A',                                   // Priority
                  "BannerId",                            // Banner id
                  10,                                    // Estimated pages
                  "1",                                   // Page range
                  OutputMgr.Interface.FileType.ASCII,    // File type
                  "AttachmentDisplayName");              // Attachment display name
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateEmailJob(System.IO.FileStream,System.String,System.String,System.String,System.String,System.Char,System.String,System.Int32,System.String,OutputMgr.Interface.FileType,System.Int32,System.String)">
             <summary>Create a new e-mail job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The e-mail job will e-mail the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to e-mail.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the e-mail job completes.  It also defines the first digit of the e-mail
             job's priority.</param>
             <param name="emailAttributeName">The EmailAttribute used to e-mail the file.</param>
             <param name="printAttributeName">An optional Print Attribute for re-formatting the file
             into a new output file for the e-mail job by creating a print job that uses this Print
             Attribute and executes on a 'E-mail' printer or 'Windows' printer that is configured to
             create an output file (such as a PDF file).</param>
             <param name="printerName">The name of a 'Custom' or 'Windows' printer that is used format
             a new output file for the e-mail job using the specified Print Attribute.  This parameter is
             required if and only if <paramref name="printAttributeName"/> is specified.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="estimatedPages">The estimated number of pages that will be e-mailed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="pageRange">Pages to be printed.  The <b>printAttributeName</b>
             must also be specified to process the correct pages.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="codePage">The code page that is to be used for reading the file or
             <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
             </param>
             <param name="attachmentDisplayName">An e-mail attachment display name. If left blank,
             the attachment display name from the e-mail attribute will be used.  If that is blank,
             then the name of the file is used.</param>
             <remarks>
             <para>If the caller does not have security privileges to create an e-mail job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateEmailJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create an e-mail job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating an e-mail job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create e-mail job.
               ct.CreateEmailJob(fs,                     // File stream object
                  "FileGroup",                           // File group
                  "EmailAttribute",                      // E-mail attribute name
                  "PrintAttribute",                      // Print attribute name
                  "PrinterName",                         // Printer name
                  'A',                                   // Priority
                  "BannerId",                            // Banner id
                  10,                                    // Estimated pages
                  "1",                                   // Page range
                  OutputMgr.Interface.FileType.ASCII,    // File type
                  1252,                                  // Code page
                  "AttachmentDisplayName");              // Attachment display name
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateEmailJob(System.Int64,System.String,System.String,System.String,System.String,System.Char,System.String,System.String)">
            <summary>Create a new e-mail job for a file already in the file database.
            <p style="color: #ff0000;">This method supports the Output Manager
            infrastructure and is not intended to be used directly by your code.</p></summary>
            <param name="fileId">The file identifier obtained from a file management event. 
            See <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>.</param>
            <param name="emailAttributeName">A EmailAttribute used to e-mail the file.</param>
            <param name="emailAttributeProperties">A EmailAttribute in XML form that will be
            used to e-mail the file.  If this is specified, then <b>emailAttributeName</b>
            is ignored.</param>
            <param name="printAttributeName">An optional Print Attribute for re-formatting the file
            into a new output file for the e-mail job by creating a print job that uses this Print
            Attribute and executes on a 'E-mail' printer or 'Windows' printer that is configured to
            create an output file (such as a PDF file).</param>
            <param name="printerName">The name of a 'Custom' or 'Windows' printer that is used format
            a new output file for the e-mail job using the specified Print Attribute.  This parameter is
            required if and only if <paramref name="printAttributeName"/> is specified.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="pageRange">Pages to be printed.  The <b>printAttributeName</b>
            must also be specified to process the correct pages.</param>
            <param name="attachmentDisplayName">An e-mail attachment display name. If left blank,
            the attachment display name from the e-mail attribute will be used.  If that is blank,
            then the name of the file is used.</param>
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateCustomJob(System.IO.FileStream,System.String,System.String,System.String,System.String,System.Char,System.String,System.Int32,OutputMgr.Interface.FileType,System.String)">
             <summary>Create a new custom job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The custom job will process the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to print.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the custom job completes.  It also defines the first digit of the user
             job's priority.</param>
             /// <param name="customJobAttributeName">A Custom Job Attribute that defines the
             program or script that is launched to process the file.</param>
             <param name="printAttributeName">An optional Print Attribute for re-formatting the file
             into a new output file for the custom job by creating a print job that uses this Print
             Attribute and executes on a 'Custom' printer.</param>
             <param name="printerName">The name of a 'Custom' printer that is used format a new
             output file for the user job using the specified Print Attribute.  This parameter is
             required if and only if <paramref name="printAttributeName"/> is specified.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="pageRange">Pages to be printed.  The <b>printAttributeName</b>
             must also be specified to process the correct pages.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a custom job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateCustomJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a custom job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating custom job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create custom job.
               ct.CreateCustomJob(fs,                     // File stream object
                  "FileGroupName",                        // Name of file group
                  "CustomAttribute",                      // Custom job attribute name
                  "PrintAttribute",                       // Print attribute name
                  "PrinterName",                          // Printer name
                  'A',                                    // Priority
                  "BannerId",                             // Banner id
                  3,                                      // Estimated pages 
                  OutputMgr.Interface.FileType.ASCII,     // File type
                  "1");                                   // Page range
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateCustomJob(System.IO.FileStream,System.String,System.String,System.String,System.String,System.Char,System.String,System.Int32,OutputMgr.Interface.FileType,System.Int32,System.String)">
             <summary>Create a new custom job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The custom job will process the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file to print.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the custom job completes.  It also defines the first digit of the user
             job's priority.</param>
             /// <param name="customJobAttributeName">A Custom Job Attribute that defines the
             program or script that is launched to process the file.</param>
             <param name="printAttributeName">An optional Print Attribute for re-formatting the file
             into a new output file for the custom job by creating a print job that uses this Print
             Attribute and executes on a 'Custom' printer.</param>
             <param name="printerName">The name of a 'Custom' printer that is used format a new
             output file for the user job using the specified Print Attribute.  This parameter is
             required if and only if <paramref name="printAttributeName"/> is specified.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="estimatedPages">The estimated number of pages that will be printed.
             If this is zero, an estimate will be calculated based on the file's size.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="codePage">The code page that is to be used for reading the file or
             <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
             </param>
             <param name="pageRange">Pages to be printed.  The <b>printAttributeName</b>
             must also be specified to process the correct pages.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a custom job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateCustomJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a custom job.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating custom job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create custom job.
               ct.CreateCustomJob(fs,                     // File stream object
                  "FileGroupName",                        // Name of file group
                  "CustomAttribute",                      // Custom job attribute name
                  "PrintAttribute",                       // Print attribute name
                  "PrinterName",                          // Printer name
                  'A',                                    // Priority
                  "BannerId",                             // Banner id
                  3,                                      // Estimated pages 
                  OutputMgr.Interface.FileType.ASCII,     // File type
                  1252,                                   // Code page
                  "1");                                   // Page range
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateCustomJob(System.Int64,System.String,System.String,System.String,System.String,System.Char,System.String)">
            <summary>Create a new custom job for a file already in the file database.
            <p style="color: #ff0000;">This method supports the Output Manager
            infrastructure and is not intended to be used directly by your code.</p></summary>
            <param name="fileId">The file identifier obtained from a file management event. 
            See <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>.</param>
            <param name="customJobAttributeName">A Custom Job Attribute used to process the file.</param>
            <param name="customJobAttributeProperties">A Custom Job Attribute in XML form that will be
            used to process the file.  If this is specified, then <b>customJobAttributeName</b>
            is ignored.</param>
            <param name="printAttributeName">An optional Print Attribute for re-formatting the file
            into a new output file for the custom job by creating a print job that uses this Print
            Attribute and executes on a 'Custom' printer.</param>
            <param name="printerName">The name of a 'Custom' printer that is used format a new
            output file for the user job using the specified Print Attribute.  This parameter is
            required if and only if <paramref name="printAttributeName"/> is specified.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <param name="pageRange">Pages to be printed.  The <b>printAttributeName</b>
            must also be specified to process the correct pages.</param>
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateTransformJob(System.IO.FileStream,System.String,System.String,System.String,System.Char,OutputMgr.Interface.FileType,System.String,System.Int32)">
             <summary>Create a new transform job for the file identified by the input stream.
             The file will be copied to either the File Group's hold directory or the Print Hold
             directory.  The transform job will process the copied file.  The File Group dispositions
             control when the copied file will be deleted.  The original file can be deleted by
             the caller at any time after this method completes.</summary>
             <param name="stream">Stream that identifies the file for the new job.</param>
             <param name="fileGroup">A File Group that specifies the disposition of the copied
             file after the transform job completes.  It also defines the first digit of the user
             job's priority.</param>
             /// <param name="transformAttributeName">A Transform Attribute that defines the
             properties of the new job.</param>
             <param name="sourceName">The source name which, if specified, will override the value
             of the Source property in the Transform Attribute.</param>
             <param name="priority">The second digit of the job's priority.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="bannerId">An optional identifier that can be printed on
              header or trailer pages.</param>
             <param name="codePage">The code page that is to be used for reading the file or
             <see cref="F:OutputMgr.Interface.CodePages.None"/> if no encoding/decoding is to occur.
             </param>
             <remarks>
             <para>If the caller does not have security privileges to create a transform job, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateTransformJob</b> method which is not valid, 
             an exception of type <see cref="T:System.ArgumentException"/> will be returned.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a transform job.</para>
             <code>
               // Create instance for connection to "eom1", with
               // default port number of "8086", default authentication of "Connect",
               // and default security provider of "NTLM".
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating transform job.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Acquire file stream object.
               System.IO.FileStream fs = new System.IO.FileStream(@"c:\data.txt", 
                  System.IO.FileMode.Open);
            
               // Create transform job.
               ct.CreateTransformJob(fs,                  // File stream object
                  "FileGroupName",                        // Name of file group
                  "TransformAttribute",                   // Transform Attribute name
                  "ApplicationA",                         // Source of file
                  'A',                                    // Priority
                  OutputMgr.Interface.FileType.ASCII,     // File type
                  "BannerId",                             // Banner id
                  1252);                                  // Code page
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateTransformJob(System.Int64,System.String,System.String,System.String,System.Char)">
            <summary>Create a new transform job for a file already in the file database.</summary>
            <param name="fileId">The file identifier obtained from a file management event. 
            See <see cref="M:OutputMgr.Interface.IManagementWindowSink.Added(System.String[])"/>.</param>
            <param name="transformAttributeName">A Transform Attribute that defines the properties
            of the new job.</param>
            <param name="transformJobAttributeProperties">A Transform Attribute in XML form that
            defines the properties of the new job.  If this is specified, then
            <b>transformAttributeName</b> is ignored.</param>
            <param name="sourceName">The source name which, if specified, will override the value
            of the Source property in the Transform Attribute.</param>
            <param name="priority">The second digit of the job's priority.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateJobFromMapi(System.String,System.String,System.String,System.String,System.IO.Stream,System.String)">
            <summary>Create a job from a received e-mail message</summary>
            <param name="emailSubject">Identifies the subject from the email message. This value is
            saved in the FileHeader as EmailSubject and HostBannerId.</param>
            <param name="emailOriginator">Identifies the originator/sender of the email message. This
            value is saved in the FileHeader as OriginalFilename and HostQueue.</param>
            <param name="emailOriginatorAddress">Identifies the original/sender address. For simple 
            MAPI, this parameter value is always an empty string.</param>
            <param name="emailOriginatorType">Identifies the original/sender address type. For simple 
            MAPI, this parameter value is always an empty string.</param>
            <param name="stream">Stream whose contents becomes the print file associated with the 
            created job. The stream object is a FileStream when the job is from an attachment and
            the stream is a MemoryStream when the job is for the e-mail message body. If this is a
            FileStream, then the name associated with it is displayed if there is any problems.</param>
            <param name="attachmentName">The name associated with the attachment. For CDO, this value 
            comes from the Attachment.Name property. For simple MAPI, this value comes from 
            MapiRecipDesc.lpszName.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateJobViaFileMask(System.String,System.String)">
             <summary>Creates zero or more jobs for a file by comparing the XML data passed by the 
             user to the File Mask hierarchy.  The File Group found in the first matching File Mask
             determines the disposition of the file after all jobs complete for the file.</summary>
             <param name="filePath">The full path name of the file.  The service must be able to
             read the file using this path name.  The file must not be deleted by the user
             until all the jobs have finished.</param>
             <param name="xml">An XML culture invariant string representing the 
             <see cref="T:OutputMgr.Interface.FileMaskExtension"/> object.  This defines the values that will be
             compared with the File Masks to create any jobs for the file.
             <para>To see the schema describing the structure and content of the XML that 
             Output Manager recognizes in this <b>FileMaskExtension</b> object,
             look in the file FileMaskExtensionSchema.xsd located in the API subfolder under the folder
             where the Output Manager service is installed.</para></param>
             <remarks>
             <para>If the caller does not have security privileges to create a job via a file mask, 
             an exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateJobViaFileMask</b> method which is not 
             valid, an exception of type <see cref="T:System.ArgumentException"/> will be returned.
             </para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a job via a file mask.</para>
             <code>
            
               // Create the file mask extension object.
               // The FileMaskExtension class could also be generated from the
               // FileMaskExtensionSchema.xsd schema
               // using the Microsoft® Windows® Software Development Kit (SDK) xsd.exe tool.
               OutputMgr.Interface.FileMaskExtension fme =
                 new OutputMgr.Interface.FileMaskExtension(); // Create object.
               fme.DirectoryMonitor = "BankStatement";        // Set Directory Monitor name.
               fme.UserTags = "$LINE1$";
            
               // Serialize the object into XML.
               string xml = fme.SerializeAsXml();
            
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating a job via a file mask.
               OutputMgr.Interface.ICreateTask ct = server.GetCreateTaskInterface();
            
               // Create a job via file mask.
               ct.CreateJobViaFileMask(@"c:\data.txt",  // Fully qualified filename
                  xml);                                 // Specify the File Mask values
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateJobViaFileMask(System.String,OutputMgr.Interface.FileType,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
             <summary>Creates zero or more jobs for a file by comparing the file data to the
             File Mask hierarchy.  The File Group found in the first matching File Mask
             determines the disposition of the file after all jobs complete for the file.</summary>
             <param name="filePath">The full path name of the file.  The service must be able to
             read the file using this path name.  The file must not be deleted by the user
             until all the jobs have finished.</param>
             <param name="fileType">Determine how the file is processed by the print spooler.</param>
             <param name="runId">The Host Runid to compare in the File Masks.</param>
             <param name="hostQueue">The Host Queue to compare in the File Masks.</param>
             <param name="hostSystem">The Host System to compare in the File Masks.</param>
             <param name="account">The Host Account to compare in the File Masks.</param>
             <param name="projectId">The Host Project to compare in the File Masks.</param>
             <param name="userId">The Host Userid to compare in the File Masks.</param>
             <param name="qualifier">The Host Qualifier to compare in the File Masks.</param>
             <param name="fileName">The Host File Name to compare in the File Masks.</param>
             <param name="bannerId">The Host Bannerid to compare in the File Masks.</param>
             <param name="estimatedPages">The Estimated Pages to compare in the File Masks.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a job via a file mask, 
             an exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateJobViaFileMask</b> method which is not 
             valid, an exception of type <see cref="T:System.ArgumentException"/> will be returned.
             </para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a job via a file mask.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating a job via a file mask.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Create a job via file mask.
               ct.CreateJobViaFileMask( @"c:\data.txt",  // Fully qualified filename
                  OutputMgr.Interface.FileType.ASCII,    // File type
                  "RunId",                               // Run id
                  "HostQueue",                           // Host queue
                  "HostSystem",                          // Host system
                  "Account",                             // Account
                  "ProjectId",                           // Project id
                  "UserId",                              // User id
                  "Qualifier",                           // Qualifier
                  "FileName",                            // File name
                  "BannerId",                            // Banner id
                  10);                                   // Estimated pages
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateLogEntry(System.String,System.Boolean)">
             <summary>Creates a "User Log Message" log entry in the Output Manager log file.</summary>
             <param name="logMessage">Message that the caller wants inserted into the log entry.</param>
             <param name="alsoEventLog">True, if the message should also be sent to external clients
             to be displayed in their Event window.</param>
             <remarks>
             <para>If the caller does not have security privileges to create a log entry, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateLogEntry</b> method which is not 
             valid, an exception of type <see cref="T:System.ArgumentException"/> will be returned.
             </para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create an Output Manager 
             "User Log Message" log entry.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating a log entry.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Create log entry.
               ct.CreateLogEntry(                         
                  "Full backup of Output Manager has completed",  // Log entry text.                     
                  false);       
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.CreateAlert(OutputMgr.Interface.AlertMessageIdentifiers,OutputMgr.Interface.AlertMessageSeverities,System.String,System.String,System.String)">
             <summary>Create an alert.</summary>
             <param name="alertId">Alert identifier that can later be used for filtering and/or
             alert policies.  Most alert identifier values are reserved for use by Output Manager.
             This method can only use those identifiers whose names start with "CustomAlert",
             such as CustomAlert1, CustomAlert2, and so on.</param>
             <param name="severity">Severity of the alert.</param>
             <param name="qualifier">Alert qualifier (Optional).  This parameter, along with the alert 
             identifier attribute, makes the alert unique. It can consist of any text meaningful to
             the application, such as a system name, 
             printer name, job name, or file name to create the unique alert. </param>
             <param name="alertText">Text which describes the alert (Required).</param>
             <param name="alertHelpText">Additional help text for the alert (Optional).</param>
             <remarks>
             <para>If the caller does not have security privileges to create an alert, an 
             exception of type <see cref="T:System.Security.SecurityException"/> will be returned.
             </para>
             <para>If a parameter is supplied to the <b>CreateAlert</b> method which is not valid 
             or an alert identifier is used other than the ten Custom Alert identifiers defined 
             here <see cref="T:OutputMgr.Interface.AlertMessageIdentifiers"/>, an exception of type 
             <see cref="T:System.ArgumentException"/> will be returned.
             </para>
             <para>Two alerts are considered to be identical if all of the following 
             attributes are the same:
             <list type="bullet">
             <item><description>Alert identifier</description></item> 
             <item><description>Alert qualifier</description></item>
             <item><description>Alert severity</description></item>
             </list>
             If an incoming alert is determined to be identical to an outstanding alert, the 
             incoming alert is discarded.
             </para>
             <para>Alerts that duplicate the Alert identifier and Alert qualifier, 
             but have a different Alert severity are not created, but are escalated 
             or de-escalated depending on the change in severity.</para>
             </remarks>
             <example>
             <para>The following C# example demonstrates how to create a custom alert.</para>
             <code>
               // Create connection to server "eom1" using the default port number.
               ServerConnection sc = new ServerConnection("eom1");
            
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               OutputMgr.Interface.IOutputManagerServer server = sc.Connect(out permissions);
            
               // Get interface for creating a custom alert.
               ICreateTask ct = server.GetCreateTaskInterface();
            
               // Create alert.
               ct.CreateAlert( OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert1,
                  OutputMgr.Interface.AlertMessageSeverities.Critical, // Severity
                  "Custom Alert Program",                              // Alert qualifier (optional)
                  "Time to run backup program",                        // Alert text
                  "");                
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example> 
        </member>
        <member name="M:OutputMgr.Interface.ICreateTask.RegisterCustomJobLauncher(OutputMgr.Interface.ICustomJobLauncher)">
            <summary>Registers the Migration Agent program as the desktop program which
            can launch custom jobs.  No other program should ever call this method.</summary>
            <param name="launcher">The interface implemented by the Migration Agent that the
            Output Manager service uses to pass custom job launch requests.  Passing null indicates
            that the Migration Agent has become unavailable.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="T:OutputMgr.Interface.PreviewType">
            <summary>The type of object the preview request if being made for.</summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.PreviewType.ManagedFile">
            <summary>Preview a managed file (from the File Management window).  The <b>id</b>
            returned by <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> is a managed file-id.</summary>
        </member>
        <member name="F:OutputMgr.Interface.PreviewType.PrintJob">
            <summary>Preview a print job (from the Print Job Management window).  The <b>id</b>
            returned by <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> identifies the print job.</summary>
        </member>
        <member name="F:OutputMgr.Interface.PreviewType.TransferJob">
            <summary>Preview a transfer job (from the Transfer Job Management window).  The <b>id</b>
            returned by <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> identifies the transfer job.</summary>
        </member>
        <member name="F:OutputMgr.Interface.PreviewType.BackupFile">
            <summary>Preview a backup file (from the Backup File Management window).  The <b>id</b>
            returned by <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> identifies the backup file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.PreviewType.IndexedFile">
            <summary>Preview an indexed file (from the Indexed File Management window).  The <b>id</b>
            returned by <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> identifies the indexed file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.PreviewType.IndexedSearchResults">
            <summary>Preview the result file created by searching indexed files.  The <b>id</b>
            returned by <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> identifies the file.
            This file is deleted when the user finishes the search operation .</summary>
        </member>
        <member name="T:OutputMgr.Interface.ImageQuality">
            <summary>Quality of the preview image.</summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.ImageQuality.High">
            <summary>High quality.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ImageQuality.Medium">
            <summary>Medium quality.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ImageQuality.Low">
            <summary>Low quality.</summary>
        </member>
        <member name="T:OutputMgr.Interface.PageRequest">
            <summary>The type of page request being made by the client.</summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.PageRequest.FirstDataPage">
            <summary>Requests the first page with user data skipping any header page.</summary>
        </member>
        <member name="F:OutputMgr.Interface.PageRequest.NextPhysicalPage">
            <summary>Requests the next physical page following the page most recently
            returned.</summary>
        </member>
        <member name="F:OutputMgr.Interface.PageRequest.PreviousPhysicalPage">
            <summary>Requests the previous physical page prior to the page most recently
            returned.</summary>
        </member>
        <member name="F:OutputMgr.Interface.PageRequest.ExactLogicalPage">
            <summary>Requests the physical page which contains the supplied logical page number.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.IPrintPreview">
            <summary>The interface that a client uses to request Print Preview operations.</summary>
            <exclude/> This interface is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.Cancel">
            <summary>Cancels any operations that are in progress, such as operations started
            by the <see cref="M:OutputMgr.Interface.IPrintPreview.FindText(System.Int32,OutputMgr.Interface.IPrintPreviewCallback,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)"/> method.  Any outstanding operations will not call the
            client back on the <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> interface.</summary>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.Close">
            <summary>Close any files and release all resources associated with this instance of
            <see cref="T:OutputMgr.Interface.IPrintPreview"/>.  Any future calls to methods on this instance
            will receive errors.</summary>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.FindText(System.Int32,OutputMgr.Interface.IPrintPreviewCallback,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Find text in the print file and return the page containing the text.</summary>
            <param name="imageQuality">Desired image quality</param>
            <param name="callback">The interface that will be used to return the requested
            page data.</param>
            <param name="startingLogicalPage">The first logical page to be searched.</param>
            <param name="text">The text to be found.</param>
            <param name="searchForward">True to search forward in the file.  False to
            search backwards.</param>
            <param name="matchCase">True to perform a case-sensitive search.</param>
            <param name="matchWholeWord">True if the text should be matched only against
            whole words.</param>
            <returns>True if the request was submitted successfully.  False if it could not
            be started at this time.  Only one <b>FindText</b> or <b>RequestPage</b> method
            call may be active for this <see cref="T:OutputMgr.Interface.IPrintPreview"/> instance.</returns>
            <remarks>This method runs asynchronously.  It schedules the request and returns control
            to the client.  The preview results are eventually returned via the
            <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> callback interface.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.GetPageRange(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>Gets information about the page range for the file being previewed.</summary>
            <param name="currentPageNumber">current logical page number of the file.</param>
            <param name="firstLogicalPageNumber">First logical page number of the file.</param>
            <param name="lastLogicalPageNumber">Last logical page number of the file.</param>
            <param name="headerPageCount">Number of header pages.</param>
            <param name="trailerPageCount">Number of trailer pages.</param>
            <param name="changing">True if the pages are still being generated by the spooler.
            In this case, the <b>lastLogicalPageNumber</b> is not accurately known.  False if
            all pages have been generated and the page values are accurate.</param>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.GetCheckedBy">
            <summary>Gets the value of the CheckedBy property for this file.</summary>
            <returns>Either an empty string or the name of the user who previously called
            the <see cref="M:OutputMgr.Interface.IPrintPreview.SetCheckedBy"/> method.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.ClearCheckedBy">
            <summary>Clears the value of the CheckedBy property for this file.</summary>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.SetCheckedBy">
            <summary>Sets the value of the CheckedBy property for this file to be the
            name of the current client.</summary>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.Recompose">
            <summary>Restart the spooling operation to rebuild the paginated file.  This is useful
            after the file, the Print Attribute, or the DDA has changed.</summary>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.RequestPage(System.Int32,OutputMgr.Interface.IPrintPreviewCallback,OutputMgr.Interface.PageRequest,System.Int32)">
            <summary>Requests that the data for a specific page be obtained.</summary>
            <param name="imageQuality">Desired image quality</param>
            <param name="callback">The interface that will be used to return the requested
            page data.</param>
            <param name="pageRequest">Type of page being requested.</param>
            <param name="requestedLogicalPage">If <b>pageRequest</b> is for an exact logical page,
            then this defines the requested page number.</param>
            <returns>True if the request was submitted successfully.  False if it could not
            be started at this time.  Only one <b>FindText</b> or <b>RequestPage</b> method
            call may be active for this <see cref="T:OutputMgr.Interface.IPrintPreview"/> instance.</returns>
            <remarks>This method runs asynchronously.  It schedules the request and returns control
            to the client.  The preview results are eventually returned via the
            <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/> callback interface.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreview.ReturnUserInput(System.String)">
            <summary>Returns requested user input, which was prompted by
            <see cref="M:OutputMgr.Interface.IPrintPreviewCallback.SolicitUserInput(System.String,System.Boolean)"/>, back to the spooler which allows
            the spooling of the job to resume.</summary>
            <param name="userResponse">User response to pass back to the spooler.</param>
        </member>
        <member name="P:OutputMgr.Interface.IPrintPreview.PreviewFileId">
            <summary>Gets a value that uniquely identifies the file or job.  This matches the
            <b>id</b> value returned by <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/>.</summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrintPreview.PreviewFileName">
            <summary>The full path file name of the file being previewed.</summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrintPreview.PreviewFileType">
            <summary>Gets a value that identifies the type of file or job.  This matches the
            value returned by <see cref="T:OutputMgr.Interface.IPrintPreviewCallback"/>.</summary>
        </member>
        <member name="P:OutputMgr.Interface.IPrintPreview.TextMode">
            <summary>True if the client wants only text returned for the requested page.
            False if the graphic image of the page is desired.</summary>
            <remarks>This property was added in version 3 of the interface.</remarks>
        </member>
        <member name="T:OutputMgr.Interface.PageIndicator">
            <summary>Identifies a special type of page being returned.</summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.PageIndicator.HeaderPage">
            <summary>
            If a header page is returned, this is the value returned as the page number.
            </summary> 
        </member>
        <member name="F:OutputMgr.Interface.PageIndicator.TrailerPage">
            <summary>
            If a trailer page is returned, this is the value returned as the page number.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.IPrintPreviewCallback">
            <summary>Callback interface supplied by the client when requesting Print Preview data.
            An asynchronous callback is used because the operation may take a fairly long time
            waiting for the requested data to be spooled.  This prevents blocking the client thread
            for an extended time.</summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreviewCallback.PreviewFailed(System.Exception)">
            <summary>The Print Preview request has failed.</summary>
            <param name="ex">The exception that describes the failure.</param>
            <remarks>Custom exceptions that can be returned include
             <see cref="T:OutputMgr.Interface.PreviewOutOfRangeException"/> and
             <see cref="T:OutputMgr.Interface.PreviewSpoolerException"/>.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreviewCallback.ReceivePage(System.Int64,OutputMgr.Interface.PreviewType,System.String,System.IO.MemoryStream,System.Int32,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.String[],System.String[])">
            <summary>Returns a page requested by <see cref="M:OutputMgr.Interface.IPrintPreview.FindText(System.Int32,OutputMgr.Interface.IPrintPreviewCallback,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)"/> or
            <see cref="M:OutputMgr.Interface.IPrintPreview.RequestPage(System.Int32,OutputMgr.Interface.IPrintPreviewCallback,OutputMgr.Interface.PageRequest,System.Int32)"/>.  The data is contained in the <b>streamImage</b>
            parameter.</summary>
            <param name="id">Identifier for the file or job being previewed.  The client can match
            this value against the requested value in if multiple files are being viewed.</param>
            <param name="type">Identifier for the type of file or job being previewed.  The client
            can match this against an expected value.</param>
            <param name="fileName">Name of file being previewed.  The client can match this
            against an expected value.</param>
            <param name="streamImage">An image of the page.  The stream must be deserialized into
            an <see cref="T:System.Drawing.Image"/> object.</param>
            <param name="pageNumber">The page number of the returned page.  If this value is less
            than zero, then <see cref="T:OutputMgr.Interface.PageIndicator"/> describes the type of page.</param>
            <param name="pageDescription">A text description of the returned page.
            For example, "Page 1 of 10".</param>
            <param name="topMargin">Top margin (in inches) for the page.</param>
            <param name="leftMargin">Left margin (in inches) for the page.</param>
            <param name="bottomMargin">Bottom margin (in inches) for the page.</param>
            <param name="rightMargin">Right margin (in inches) for the page.</param>
            <param name="linesPerInch">Number of lines per inch on the page based on the first
            font encountered on the page.  This can be used to position rulers around the page
            image, but is only useful if the page uses a fixed point font and does not position
            the data (with DDA).</param>
            <param name="columnsPerInch">Number of columns per inch on the page based on the first
            font encountered on the page.  This can be used to position rulers around the page
            image, but is only useful if the page uses a fixed point font and does not position
            the data (with DDA).</param>
            <param name="warnings">Possible warning messages which could indicate that the data
            was not formatted as expected.  For instance, a default Print Attribute had to be used
            because the requested one was not found.</param>
            <param name="displayVariables">Each entry in the array is an XML string describing
            any DDA Display Variable commands encountered on the page.</param>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreviewCallback.ReceivePage(System.Int64,OutputMgr.Interface.PreviewType,System.String,System.String[],System.Int32,System.String,System.String[],System.String[])">
            <summary>Returns a page requested by <see cref="M:OutputMgr.Interface.IPrintPreview.FindText(System.Int32,OutputMgr.Interface.IPrintPreviewCallback,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)"/> or
            <see cref="M:OutputMgr.Interface.IPrintPreview.RequestPage(System.Int32,OutputMgr.Interface.IPrintPreviewCallback,OutputMgr.Interface.PageRequest,System.Int32)"/>.  The data is contained in the <b>text</b>
            parameter.  The <see cref="P:OutputMgr.Interface.IPrintPreview.TextMode"/> property was set to <b>true</b>.
            </summary>
            <param name="id">Identifier for the file or job being previewed.  The client can match
            this value against the requested value in if multiple files are being viewed.</param>
            <param name="type">Identifier for the type of file or job being previewed.  The client
            can match this against an expected value.</param>
            <param name="fileName">Name of file being previewed.  The client can match this
            against an expected value.</param>
            <param name="text">Array of text strings representing each image that would have
            been printed on the page.</param>
            <param name="pageNumber">The page number of the returned page.  If this value is less
            than zero, then <see cref="T:OutputMgr.Interface.PageIndicator"/> describes the type of page.</param>
            <param name="pageDescription">A text description of the returned page.
            For example, "Page 1 of 10".</param>
            <param name="warnings">Possible warning messages which could indicate that the data
            was not formatted as expected.  For instance, a default Print Attribute had to be used
            because the requested one was not found.</param>
            <param name="displayVariables">Each entry in the array is an XML string describing
            any DDA Display Variable commands encountered on the page.</param>
        </member>
        <member name="M:OutputMgr.Interface.IPrintPreviewCallback.SolicitUserInput(System.String,System.Boolean)">
            <summary>Informs the client that the spooler requires a user response before it
            can continue processing the file.  This is most often due to a DDA Get User
            Input command.  The client must solicit the response from the user and then
            pass that response back to the server by calling
            <see cref="M:OutputMgr.Interface.IPrintPreview.ReturnUserInput(System.String)"/>.</summary>
            <param name="userRequest"></param>
            <param name="hideUserResponse"></param>
        </member>
        <member name="T:OutputMgr.Interface.IEmailExpansion">
            <summary>Interface implemented by the EOM server to provide MAPI and CDO
            methods for use by the Legacy Interface Assistant application.</summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IEmailExpansion.GetEmailExpansionStatus">
            <summary>
            Get the email expansion status
            </summary>
            <remarks>
            This interface is called remotely by the external e-mail client to get the current
            status of the email expansion in the EOM service. 
            </remarks>
            <returns>An <see cref="T:OutputMgr.Interface.enumExpansionStatus"/> detailing the specific status of
            the external client.</returns>
        </member>
        <member name="M:OutputMgr.Interface.IEmailExpansion.RegisterForService(OutputMgr.Interface.IEmailClient,OutputMgr.Interface.EmailRegisterService)">
            <summary>Register external e-mail client for specific service(s)</summary>
            <remarks>
            This interface method is called remotely by the external e-mail client to 
            register/reregister/unregister for specific service(s). 
            </remarks>
            <param name="clientInterface">Identifies the interface pointer associated with this 
            register. A value of null indicates that the register is really an unregister.</param>
            <param name="registerService">Value indicates what type of service the external e-mail 
            client is registering for.</param>
        </member>
        <member name="M:OutputMgr.Interface.IEmailExpansion.NotifyError(OutputMgr.Interface.EmailException)">
            <summary></summary>
            <remarks>
            
            </remarks>
            <param name="emailException"></param>
        </member>
        <member name="P:OutputMgr.Interface.IEmailExpansion.SuspendAgent">
            <summary>
            
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.ICustomJobLauncher">
            <summary>Interface implemented by the Legacy Interface Assistant to launch
            interactive Custom Jobs.</summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.ICustomJobLauncher.LaunchCustomJob(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.String)">
            <summary>Request an external program to start a new process,
            a.k.a. launch an interactive custom job.</summary>
            <param name="path">Fully qualified path to the executable to start.</param>
            <param name="args">Arguments for the new process.</param>
            <param name="winStyle">Windows style for the new desktop process.</param>
            <param name="workingDirectory">Working directory for the new process.</param>
            <returns></returns>
        </member>
        <member name="T:OutputMgr.Interface.IEmailClient">
            <summary>Interface implemented by the Legacy Interface Assistant to provide
            MAPI and CDO e-mail methods for use by the EOM server.</summary>
            <exclude/> This interface is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.IEmailClient.LookupAddress(System.String,System.String@)">
            <summary>Lookup the e-mail addresses and return the resulting e-mail addresses</summary>
            <remarks>
            This interface method is used by the EOM service to notify the legacy e-mail client to 
            lookup the addresses found in the e-mail message represented in the parameter.
            </remarks>
            <param name="xmlMessage">XML representation of the e-mail message with the e-mail
            addresses. This value must be a valid string that the EmailMessage class can serialize 
            from.</param>
            <param name="xmlMessageAfterLookup">XML representation of the e-mail message with the
            e-mail addresses resulting from the lookup. </param>
        </member>
        <member name="M:OutputMgr.Interface.IEmailClient.Send(System.String)">
            <summary>Send an e-mail message using the legacy e-mail client</summary>
            <remarks>
            This interface method is used by the EOM service to notify the legacy e-mail client to 
            send the e-mail message represented in the parameter.
            </remarks>
            <param name="xmlEmailMessage">XML representation of the e-mail message to send. This 
            value must be a valid string that the EmailMessage class can serialize from.</param>
        </member>
        <member name="M:OutputMgr.Interface.IEmailClient.NotifyError(OutputMgr.Interface.EmailException)">
            <summary>Notify the legacy e-mail client of an error</summary>
            <remarks>
            This interface method is used by the EOM service to notify the legacy e-mail client of 
            an error using the EmailException parameter.
            </remarks>
            <param name="emailException">EmailException object describing the error</param>
        </member>
        <member name="T:OutputMgr.Interface.JobInProgressException">
            <summary>The custom exception that is thrown when an operation is requested 
            for a job that cannot be satisfied because execution of the job is in-progress.</summary>
        </member>
        <member name="M:OutputMgr.Interface.JobInProgressException.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <b>JobInProgressException</b> class with a specified
            error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="jobId">The identifier of the job.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.JobInProgressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>JobInProgressException</b> class with serialized
            data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:OutputMgr.Interface.JobInProgressException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialziation interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.JobInProgressException.ToString">
            <summary>
            Overrides the base ToString() method used for tracing only.
            </summary>    
            <exclude/> This method is not included in the API .chm file.  
        </member>
        <member name="P:OutputMgr.Interface.JobInProgressException.JobId">
            <summary>
            Gets or sets the job identifier associated with the job for which
            this exception is generated.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.DdaCommandArgumentException">
            <summary>The object generated to report a DDA command argument error.</summary>
        </member>
        <member name="T:OutputMgr.Interface.AttributeArgumentException">
            <summary>The object generated to report an attribute argument error.</summary>
            <remarks>
            The <b>AttributeArgumentException</b> class is a base class that is used to report errors 
            from the <see cref="M:OutputMgr.Interface.IAttributeConfiguration.SetXmlProperties(System.Collections.ArrayList)"/>, and
            <see cref="M:OutputMgr.Interface.IAttributeConfiguration.DeleteXmlProperties(System.Collections.ArrayList)"/> methods.  
            These methods do not throw this exception (or its derived classes).  Instead, if an 
            error is detected, the methods return an array of these exceptions.  Each exception 
            describes the reason that a particular attribute cannot be modified or deleted.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.AttributeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the constructor required for deserialization to occur if a class 
            supports the ISerialization Interface. (It complements the GetObjectData()
            method for serialization).
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the context parameter <paramref name="context"/>.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.AttributeArgumentException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Implements the derived constructor required to support this class
            </summary>
            <param name="namedAttributeType">Holds the object type the exception applies to.</param>    
            <param name="namedAttributeName">Holds the name of the object the exception applies to. Note -
            for those derived AttributeArgumentExceptions which are not identified by a name,
            this value will be null. For now the only derived AttributeArgumentException where
            this occurs is a DdaCommandArgumentException (command object instances are not named).</param>
            <param name="propertyName">Holds the name of the property the exception applies to.</param>
            <param name="message">Holds the text message describing problem that triggered the exception.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.AttributeArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialization Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.AttributeArgumentException.ToString">
            <summary>
            Overrides the base ToString() method used for tracing only.
            </summary>  
            <exclude/> This method is not included in the API .chm file.   
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.PropertyName">
            <summary>
            Gets or sets the name of the property containing the value which is the subject 
            of the exception. This property can have different meanings for different error 
            types: 
            <list type="bullet">
            <item><description><see cref="F:OutputMgr.Interface.AttributeErrorType.Syntax"/> - identifies the 
            property containing the value which has the syntax error. This property is contained 
            within the attribute which is the subject of this exception identified by the
            <see cref="P:OutputMgr.Interface.AttributeArgumentException.Type"/> and <see cref="P:OutputMgr.Interface.AttributeArgumentException.Name"/> properties.
            </description></item>
            <item><description><see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceAdd"/> - identifies the 
            property containing the illegal attribute name reference value. This property is 
            contained within the attribute which is the subject of this exception identified  
            by the <see cref="P:OutputMgr.Interface.AttributeArgumentException.Type"/> and <see cref="P:OutputMgr.Interface.AttributeArgumentException.Name"/> properties.
            </description></item>
            <item><description><see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceDelete"/> - identifies the 
            property containing the attribute name reference to the attribute which cannot be 
            deleted. In this case, the property is contained within the attribute identified by 
            the <see cref="P:OutputMgr.Interface.AttributeArgumentException.ReferenceTypeName"/> and <see cref="P:OutputMgr.Interface.AttributeArgumentException.ReferenceName"/> properties. 
            If the <see cref="P:OutputMgr.Interface.AttributeArgumentException.ReferenceTypeName"/> is a job type versus an 
            attribute type, then this property is not applicable.
            </description></item>
            </list>
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.Type">
            <summary>
            Gets or sets the attribute type as a string.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.Name">
            <summary>
            Gets or sets the name of the object which is the subject of this exception 
            (for example, "MyPA"). 
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.ErrorType">
            <summary>
            Gets or sets the attribute error type.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.ReferenceTypeName">
            <summary>
            <para>
            Gets or sets the name of the attribute/job type. This property can have different 
            meanings for different error types:
            <list type="bullet">
            <item><description><see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceDelete"/> - the name of 
            the attribute type or job type which has 
            a reference to the item identified by the <see cref="P:OutputMgr.Interface.AttributeArgumentException.Type"/>
            and <see cref="P:OutputMgr.Interface.AttributeArgumentException.Name"/> properties.
            </description></item>
            <item><description><see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceAdd"/> - the name of 
            the attribute type that is being referenced by the item identified 
            by the <see cref="P:OutputMgr.Interface.AttributeArgumentException.Type"/> and <see cref="P:OutputMgr.Interface.AttributeArgumentException.Name"/> properties.
            </description></item>
            </list> 
            </para>
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.JobCount">
            <summary>
            Gets or sets the number of jobs of type <see cref="P:OutputMgr.Interface.AttributeArgumentException.ReferenceTypeName"/> that reference
            the item identified by the <see cref="P:OutputMgr.Interface.AttributeArgumentException.Type"/> and <see cref="P:OutputMgr.Interface.AttributeArgumentException.Name"/> properties. Only 
            applicable when <see cref="P:OutputMgr.Interface.AttributeArgumentException.ErrorType"/> is of type 
            <see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceDelete"/>.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.FileCount">
            <summary>
            Gets or sets the number of files in the managed file database that reference 
            the item identified by the <see cref="P:OutputMgr.Interface.AttributeArgumentException.Type"/> and <see cref="P:OutputMgr.Interface.AttributeArgumentException.Name"/> properties. 
            Only applicable when <see cref="P:OutputMgr.Interface.AttributeArgumentException.ErrorType"/> is of type 
            <see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceDelete"/>. 
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.ReferenceName">
            <summary>
            <para>
            Gets or sets the reference name. This property can have different meanings for 
            different error types: 
            <list type="bullet">
            <item><description><see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceDelete"/> - the name of 
            the attribute which is referencing the item identified by the <see cref="P:OutputMgr.Interface.AttributeArgumentException.Type"/>
            and <see cref="P:OutputMgr.Interface.AttributeArgumentException.Name"/> properties.
            </description></item>
            <item><description><see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceAdd"/> - the name of 
            the attribute which is the target attribute being reference by the item identified 
            by the <see cref="P:OutputMgr.Interface.AttributeArgumentException.Type"/> and <see cref="P:OutputMgr.Interface.AttributeArgumentException.Name"/> properties.
            </description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.IsErrorTypeReferenceAdd">
            <summary>
            Gets a value indicating whether the underlying error is of type
            <see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceAdd"/>.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.IsErrorTypeReferenceDelete">
            <summary>
            Gets a value indicating whether the underlying error is of type
            <see cref="F:OutputMgr.Interface.AttributeErrorType.ReferenceDelete"/>.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.IsErrorTypeSyntax">
            <summary>
            Gets a value indicating whether the underlying error is of type
            <see cref="F:OutputMgr.Interface.AttributeErrorType.Syntax"/>.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeArgumentException.IsErrorTypeWarning">
            <summary>
            Gets a value indicating whether the underlying error is of type
            <see cref="F:OutputMgr.Interface.AttributeErrorType.Warning"/>.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the constructor required for deserialization to occur if a class 
            supports the ISerialization Interface. (It complements the GetObjectData()
            method for serialization).
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the context parameter <paramref name="context"/>.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandArgumentException.#ctor(System.String,System.String,System.String,OutputMgr.Interface.DdaCommandType,System.Int32,System.String,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="namedAttributeType">The NamedAttribute's class.ToString()</param>
            <param name="namedAttributeName">The NamedAttribute object's Name value.</param>
            <param name="ddaItemName">The DdaItem object's Name value.</param>
            <param name="commandType">The DdaCommandType enumeration value which indicates
            which type of command generated the exception.</param>
            <param name="commandIndex">The index of the command within the DdaItem's Commands
            collection.</param>
            <param name="commandPropertyName">The DdaCommand property which has the problem.
            This can be empty if it is a general error with the command (i.e. An If command
            missing it's corresponding EndIf command.)</param>
            <param name="ddaOperandPropertyName"></param>
            <param name="message">The error message.</param>
            <exclude/> This method is not included in the API .chm file.  
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandArgumentException.#ctor(System.String,System.String,System.String,System.String,OutputMgr.Interface.DdaCommandType,System.Int32,System.String,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="namedAttributeType">The NamedAttribute's class.ToString()</param>
            <param name="namedAttributeName">The NamedAttribute object's Name value.</param>
            <param name="ddaItemName">The DdaItem object's Name value.</param>
            <param name="referencingDdaName">Name of the Data Dependent Attribute that has
            a reference to attribute specifieed by <paramref name="namedAttributeName"/>
            that is in error.</param>
            <param name="commandType">The DdaCommandType enumeration value which indicates
            which type of command generated the exception.</param>
            <param name="commandIndex">The index of the command within the DdaItem's Commands
            collection.</param>
            <param name="commandPropertyName">The DdaCommand property which has the problem.
            This can be empty if it is a general error with the command (i.e. An If command
            missing it's corresponding EndIf command.)</param>
            <param name="ddaOperandPropertyName"></param>
            <param name="message">The error message.</param>
            <exclude/> This method is not included in the API .chm file.  
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialziation Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file.  
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandArgumentException.ToString">
            <summary>
            Overrides the base ToString() method used for tracing only.
            </summary>  
            <exclude/> This method is not included in the API .chm file.     
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandArgumentException.DdaItemName">
            <summary>
            Gets or sets the name of the DDA item. 
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandArgumentException.CommandType">
            <summary>
            Gets or sets the DDA comment type value. 
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandArgumentException.CommandIndex">
            <summary>
            Gets or sets the index of the command in the containing DDA item object.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandArgumentException.CommandPropertyName">
            <summary>
            Gets or sets the name of the command's property. 
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandArgumentException.DdaOperandPropertyName">
            <summary>
            Gets or sets the name of the property of the operand. 
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandArgumentException.ReferencingDdaName">
            <summary>
            Gets or sets the name of the DDA that has a reference error with respect to the DDA.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.JobDoesNotExistException">
            <summary>The custom exception that is thrown when an operation is requested 
            for a job that no longer exists in Output Manager. </summary>
        </member>
        <member name="M:OutputMgr.Interface.JobDoesNotExistException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>JobDoesNotExistException</b> class with a specified
            error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.JobDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>JobDoesNotExistException</b> class with serialized
            data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:OutputMgr.Interface.FileDoesNotExistException">
            <summary>The custom exception that is thrown when when an operation is requested for a file 
            that no longer exists in Output Manager as a managed file. This exception is used to 
            differentiate from <see cref="T:System.IO.FileNotFoundException"/>, which means the file 
            cannot be found at all.</summary>
        </member>
        <member name="M:OutputMgr.Interface.FileDoesNotExistException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>FileDoesNotExistException</b> class with a specified
            error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.FileDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>FileDoesNotExistException</b> class with
            serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:OutputMgr.Interface.ClientSponsor">
            <summary>Implements the
            <see cref="T:System.Runtime.Remoting.Lifetime.ISponsor"/> interface to provide default
            Remoting lifetime behavior.  This object can be used as an argument to the
            <see cref="M:OutputMgr.Interface.IOutputManagerServerConnection.Connect(System.Version,System.Runtime.Remoting.Lifetime.ISponsor,System.String@)"/> method.</summary>
            <exclude/> This class is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ClientSponsor.#ctor(System.Int32)">
            <summary>Creates a new instance of the <see cref="T:OutputMgr.Interface.ClientSponsor"/> class using the
            specified poll time.</summary>
            <param name="pollConnectionInSecs">The time (in seconds) that the lease should be
            renewed for this object.  This determines the frequency that the system polls this
            object.</param>
        </member>
        <member name="M:OutputMgr.Interface.ClientSponsor.Renewal(System.Runtime.Remoting.Lifetime.ILease)">
            <summary>Implements the <see cref="M:System.Runtime.Remoting.Lifetime.ISponsor.Renewal(System.Runtime.Remoting.Lifetime.ILease)"/>
            method to renew the lease on this object.</summary>
            <param name="lease">The lifetime lease of the object that requires lease renewal.</param>
            <returns>The additional lease time for the specified object.</returns>
        </member>
        <member name="M:OutputMgr.Interface.ClientSponsor.InitializeLifetimeService">
            <summary>Implements the <see cref="M:System.MarshalByRefObject.InitializeLifetimeService"/> method
            to control the lifetime policy of this object.</summary>
            <returns>Always returns <b>null</b> to indicate that the remoting lifetime of this object
            is the as the lifetime of the .Net object.  That is, as long as some other object
            holds a reference to this object.</returns>
        </member>
        <member name="T:OutputMgr.Interface.PreviewOutOfRangeException">
            <summary>This exception is thrown when a preview request specifies a page that
            does not exist in the file being previewed.</summary>
            <exclude/> This class is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.PreviewOutOfRangeException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>PreviewOutOfRangeException</b> class
            with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
            <param name="lowestPage"></param>
            <param name="highestPage"></param>
        </member>
        <member name="M:OutputMgr.Interface.PreviewOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>PreviewOutOfRangeException</b> class with serialized
            data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:OutputMgr.Interface.PreviewOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a SerializationInfo with the data needed to serialize
            this object.</summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination object for this serialization.</param>
        </member>
        <member name="P:OutputMgr.Interface.PreviewOutOfRangeException.HighestPage">
            <summary>
            Gets or sets the highest page number that can be previewed.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.PreviewOutOfRangeException.LowestPage">
            <summary>
            Gets or sets the lowest page number that can be previewed.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PreviewSpoolerException">
            <summary>This exception is thrown when the spooler encounters any type of error while
            creating the preview data.  Often the print job will be disabled when this happens.</summary>
            <exclude/> This class is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.PreviewSpoolerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>PreviewSpoolerException</b> class with a specified
            error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:OutputMgr.Interface.PreviewSpoolerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>PreviewSpoolerException</b> class with serialized
            data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:OutputMgr.Interface.AttributeSubpropertyException">
            <summary>The object generated to report an attribute sub-property error.</summary>
        </member>
        <member name="M:OutputMgr.Interface.AttributeSubpropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the constructor required for deserialization to occur if a class 
            supports the ISerialization Interface. (It complements the GetObjectData()
            method for serialization).
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the context parameter <paramref name="context"/>.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.AttributeSubpropertyException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implements the derived constructor required to support this class
            </summary>
            <param name="namedAttributeType">The NamedAttribute's class.ToString()</param>
            <param name="namedAttributeName">The NamedAttribute object's Name value.</param>
            <param name="propertyName">In this class, always the property "Items"</param>
            <param name="subpropertyTypeName"></param>
            <param name="subpropertyName">The subproperty with the problem.</param>
            <param name="message">The error message.</param>
            <exclude/> This method is not included in the API .chm file. 
        </member>
        <member name="M:OutputMgr.Interface.AttributeSubpropertyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialziation Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file. 
        </member>
        <member name="P:OutputMgr.Interface.AttributeSubpropertyException.SubpropertyTypeName">
            <summary>
            Gets or sets the name of the sub-property type.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeSubpropertyException.SubpropertyName">
            <summary>
            Gets or sets the name of the sub-property with a problem.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.AlertMessageSeverities">
            <summary>
            Severities defined for Alert Messages.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageSeverities.Critical">
            <summary>
            The alert identifies a critical error.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageSeverities.Major">
            <summary>
            The alert identifies a major error.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageSeverities.Minor">
            <summary>
            The alert identifies a minor error.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageSeverities.Warning">
            <summary>
            The alert identifies a warning.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageSeverities.Informational">
            <summary>
            The alert identifies an informational message.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageSeverities.Clear">
            <summary>
            The alert is being cleared.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageSeverities.None">
            <summary>
            The alert severities is not yet classified (internal usage only).
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.AlertMessageIdentifiers">
            <summary>
            Alert Message identifiers.  These represent the category in which the Alert pertains to.
            This allows the user to filter and/or set policies based on specific Alert identifiers.
            </summary>
            <internal>
            New alerts identifiers must be added at the end of the non-custom alert list and
            given the next sequential enum value.  The custom alerts should remain at the end
            of the list and the enum value range left open ended for any possible future 
            increase in the number of supported custom alert identifiers.
            </internal>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.None">
            <summary>
            Initialization value only.  This is not a valid Alert Identifier.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.ServiceStart">
            <summary>
            This alert is raised when the Output Manager service has started and
            automatically cleared if the ServiceStop alert is raised.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.ServiceStop">
            <summary>
            This alert is raised when the Output Manager service has stopped and
            is automatically is cleared if the ServiceStart alert is raised.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.ServiceStopWithError">
            <summary>
            This alert is raised when the Output Manager service has stopped due to an error.
            The alert message will identify the problem encountered.  The Windows Event Log 
            (Application Log) also identifies the problem encountered.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.ServiceProcessingSuspended">
            <summary>
            This alert is raised when the Output Manager service detects an internal problem
            that requires the service to suspend both the receiving of incoming files and
            scheduling of jobs in order to prevent running into operational abnormalities.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.ServiceReferenceError">
            <summary>
            This alert is raised when the Output Manager service is started and 
            it is found the configuration contains at least one attribute reference
            that is invalid. To find the source of the invalid reference and repair
            it, the user must use the Output Manager client to initiate a configuration 
            validation report.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.BackupJobDisabled">
            <summary>
            This alert is sent when execution of a backup job fails and the job is
            disabled.  The alert message will identify the problem encountered.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CreateJobFailure">
            <summary>
            This alert is sent when the File Masking process fails to create a defined
            job.  Typically, this is sent when a job defined to be created by a File
            Mask cannot be created due to an unresolved attribute name.
            </summary>
            <remarks>
            <para>
            This alert is sent with the Alert Qualifier set to the name of the file mask
            for which the job create failure occurred.  A file mask can contain many job
            definitions; therefore, it is only possible for the last job create failure
            for a particular job to be outstanding at a time.  If this alert is issued,
            the Output Manager log file should be examined to determine if there were
            multiple alerts issued for job create failures associated with the same file
            mask.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CriticalFileAccessError">
            <summary>
            This alert is sent when a problem is encountered accessing a file that is
            critical for normal operations.  Typically this is sent for the configuration
            and file or job information database files.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.DdaGetUserInput">
            <summary>
            This alert is sent when the Data Dependent Attribute (DDA) 'Get User Input'
            command is executed to get input text for continuing the associated
            print job.
            </summary>
            <remarks>
            The print job is suspended until the alert is cleared.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.DirectoryMonitorError">
            <summary>
            This alert is sent when an an error was encountered while monitoring a directory.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.DrawMetafileError">
            <summary>
            This alert is sent when a fatal error occurs while attempting to draw a Windows
            Metafile during for a print job or print preview operation.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.EditionInstallationError">
            <summary>
            This alert is sent when the installed edition could not be determined.
            The service assumes Professional Edition for licensing purposes.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.EmailJobConfiguration">
            <summary>
            This alert is sent when the service detects an issue with the e-mail configuration.
            Generally, this will occur when the external e-mail agent found in the Legacy Interface 
            Assistant is not connected. In this situation, the current status of the Legacy Interface 
            Assistant needs to be checked.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.EmailJobDisableSend">
            <summary>
            This alert is sent when the e-mail expansion encounters an exception which affects the
            ability to send e-mail messages. Note that the sending of e-mail remains disabled as long 
            as the alert remains active.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.FileDatabaseLimit">
            <summary>
            This alert is sent when the number of entries in the managed file information
            database is nearing or has reached the configured limit.  Once the limit has
            been reached, no more files can be received by Output Manager.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.FileExpirationSearchError">
            <summary>
            This alert is sent when an error is encountered while monitoring a file expiration search.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.JobConfigurationError">
            <summary>
            This alert is sent when execution of a job fails due to an error with the
            configuration.  The job type is indicated in the alert message.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.JobExecutionError">
            <summary>
            This alert is sent when execution of a job fails.  The job type is indicated
            in the alert message.  The reason for failure is indicated either in the
            alert message or the alert help text.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.MapiCreateJobError">
            <summary>
            This alert is sent when an error is encountered when attempting to create a job from the
            external e-mail receive agent.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.LegacyAssistantEmailError">
            <summary>
            This alert is sent when the e-mail client within the Legacy Interface Assistant
            encounters an unexpected error. Specifics on the error can be found in the alert help.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.LegacyAssistantSuspend">
            <summary>
            This alert is sent when the Legacy Interface Assistant is connected but cannot send
            e-mail because it has been suspended.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.LegacyAssistantNotConnected">
            <summary>
            This alert is sent when the Legacy Interface Assistant is not connected and is
            required to complete a job.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrinterAbnormalEndState">
            <summary>
            This alert is sent when a print job is being requeued to a printer and the
            printer is not in the "Ready" state.  In this situation, normal termination
            of the print job may not be entirely possible, which could result in the
            printer being left in an abnormal state.  The printer should be checked to
            ensure it is not in an abnormal state.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrinterBandIdAndOrLpiChange">
            <summary>
            This alert is sent when a band-id and/or lines-per-inch (LPI) change is
            required on the printer for the current print job.
            </summary>
            <remarks>
            The print job is suspended until the alert is cleared.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrinterCheckFormsAlignment">
            <summary>
            This alert is sent when printing operations, such as skip-to-page, requeue
            job or delete job, occur that would potentially leave the paper at a position
            that is not at the top of the form/page.  The alert is sent only for those
            Output Manager printer drivers that could be associated with printers that
            would require the paper to be adjusted so the next page prints on the next
            page.
            </summary>
            <remarks>
            The print job is suspended until the alert is cleared.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrinterCodedCharacterSetOperatorMessage">
            <summary>
            This alert is sent when a Coded Character Set Table action is processed
            that includes an operator message.
            </summary>
            <remarks>
            The print job is suspended until the alert is cleared.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrinterFormRestore">
            <summary>
            This alert is sent to inform the operator that the printer's original forms
            can now be restored.  The alert is sent during the completion phase of
            a print job only if a request to load special forms was issued.
            </summary>
            <remarks>
            The print job is suspended until the alert is cleared.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrinterSpecialFormRequest">
            <summary>
            This alert is sent to inform the operator that a special form is to be
            loaded for the specified printer.
            </summary>
            <remarks>
            The print job is suspended until the alert is cleared.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrintingFileTypeError">
            <summary>
            This alert is sent when trying to print a file as a text file that has
            lines (records) that are longer than what normally would be expected
            with a text file.  The file type probably should be set to PassThru.
            </summary>
            <remarks>
            The print job is suspended until the alert is cleared.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrintJobAcrobatDistillerError">
            <summary>
            This alert is sent when an error occurs during the Acrobat Distiller
            phase that creates a PDF file for a print job.
            </summary>
            <remarks>
            <para>
            The print job that was currently printing on the specified printer is
            disabled and the printer is able to execute any waiting print jobs.
            </para>
            <para>
            The alert help text will identify the Acrobat Distiller log file that
            may contain information pertaining to the reason for the failure.  Note,
            when an error is reported by Acrobat Distiller the Acrobat Distiller log
            file reported in the help text must be manually deleted by the administrator
            after analysis of this alert is complete.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrintJobDestroyedWindow">
            <summary>
            This alert is sent when the server is running in a non-interactive mode
            (i.e., as a non-interactive Windows service) and a print job detects an
            attempt to create a window and/or dialog box on its thread by a non-Output
            Manager component (such as a Windows print driver).  The window or dialog
            box is destroyed, which in most cases will result in a subsequent error
            that will most likely error the print job and lock the printer.
            </summary>
            <remarks>
            <para>
            A non-interactive service is assigned a Windows station and associated
            desktop that the user cannot interact with.  Some Windows print drivers
            will attempt to display a dialog in certain situations to report errors or
            even solicit user input.  If the desktop is non-interactive, any displayed
            window or dialog can never be answered and that would result in the print
            job thread hanging.  If this were allowed to happen, the service would have
            to be terminated to get rid of the hung thread and it may also be necessary
            to kill the process via Task Manager.
            </para>
            <para>
            To avoid this hang situation, the printing threads contain logic to detect
            any attempt to create a window or dialog for the executing thread and a
            response is taken that will cause the window or dialog to be destroyed
            before it can be created or activated.  When this happens, this alert is
            issued to report the problem as it will prevent the print job from ever
            executing if the window or dialog creation is unavoidable on subsequent
            attempts to print the job on the associated printer.
            </para>
            <para>
            When this alert is generated, very little information is available to help
            diagnose what window or dialog is being displayed.  An attempt is made to
            capture the title bar text (if the to-be-created window has a title bar and
            associated text) to be included in the alert details.  However, even if the
            title bar text is obtainable, it may not provide much insight as to why the
            window or dialog was being displayed.  In this situation, you will probably
            need to reproduce the problem while running the Output Manager server as an
            interactive desktop application so the window or dialog box can be viewed
            to decipher the problem (for details on how to run the Output Manager server
            as an interactive desktop application, see the Output Manager online help).
            </para>
            <para>
            Once the reason for the window or dialog being displayed is determined, you
            will then hopefully be able to correct the problem.  Unfortunately, the
            decision to display a window or dialog is completely under control of the
            components, such as print drivers, used to print the job to the printer and
            we have no way of knowing which components will behave this way.  One known
            case that does display a window is a Windows printer that uses the standard
            'FILE' port, which by design prompts the user for the file path where the
            output is to be written (using a printer with the 'FILE' port can be avoided
            by using the Output Manager print-to-file Physical Printer option along with
            the output file naming rule in the Print Attribute).  If the display of a
            window or dialog turns out to be unavoidable, then it will not be possible
            to run the Output Manager server as a non-interactive service and instead it
            will have to be run as an interactive desktop application.
            </para>
            <para>
            Note, this alert and associated destruction of the window or dialog being
            created does not apply to message boxes that are displayed using the
            "Default Desktop Only" or "Service Notification" flags.  This is because the
            flags cause the message box dialog to be displayed on the active desktop (either
            the desktop of the logged on user or the console desktop) and as such the
            message box dialog is not directly tied to the printing thread which is
            running under a different desktop.  It is not known whether many Windows
            print drivers or other components that display a message box will use
            these flags; however, if they do the message box will be displayed and will
            need to be answered in order for the print job to continue.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrintJobDisabled">
            <summary>
            This alert is sent when an error occurs that results in a print job
            being disabled.  This often occurs when a configuration error is
            detected, but it can occur for other reasons.
            </summary>
            <remarks>
            The print job that was currently printing on the specified printer is
            disabled and the printer is able to execute any waiting print jobs.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrintJobIncompatibleForPrinter">
            <summary>
            This alert is sent when an incompatibility between a print job and
            the target printer is detected that prevents the job from being
            executed.
            </summary>
            <remarks>
            The print job that was currently printing on the specified printer is
            disabled and the printer is able to execute any waiting print jobs.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrintJobTerminated">
            <summary>
            This alert is sent when an error condition is detected that results
            in a print job being terminated.  The alert message details the
            specific error condition encountered and the state that the print
            job is left in.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrinterLockedDueToError">
            <summary>
            This alert is sent when execution of a print job encounters an error that
            results in the printer being locked.
            </summary>
            <remarks>
            The printer is set to an error locked state.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.ReadMetafileError">
            <summary>
            This alert is sent when a fatal error occurs while attempting to open and/or
            read a Windows metafile during for a print job or print preview operation.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.SocketListenerError">
            <summary>
            This alert is raised when the Output Manager service cannot establish a
            listening socket as defined by one of the Listening Communication Paths.
            The alert message identifies the problem that was encountered.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.TransferJobDisabled">
            <summary>
            This alert is sent when execution of a transfer job fails and the job is
            disabled.  The alert message will identify the problem encountered.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.EvaluationEditionWarning">
            <summary>
            This alert is sent when an evaluation edition has been installed to remind the
            customer when the edition will expire.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.PrintJobAcrobatDistillerNoPdf">
            <summary>
            This alert is sent when the Acrobat Distiller processing completes normally
            but does not produce a PDF file.
            </summary>
            <remarks>
            <para>
            Acrobat Distiller will produce no PDF file if the input PostScript file
            is empty or possibly contains no commands to render any actual pages.  In
            this case the print job is terminated as if it completed normally.  Any
            subsequent file/job operations (such as creating an e-mail job, passing
            the output (PDF) file back to File Masking or creating an Information File
            (.inf) for posting to the Web) will be skipped because there is no valid
            output file to operation on.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.ThresholdExceeded">
            <summary>
            This alert is raised when one of the Output Manager thresholds has exceeded
            the defined value.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.ConfigurationFilesUpgraded">
            <summary>
            The alert is raised when the configuration files have been upgraded from
            to the latest level. 
            </summary>
            <remarks>
            <para>
            The configuration upgrade will also make backup copies of the configuration
            files.  The folder where the configuration files are backed up to and the
            file containing details of the configuration upgrade will be identified in the
            alert help text.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.MessageQueuingError">
            <summary>
            This alert is raised when an error occurs related to receiving data for a
            Message Queue.
            </summary>
            <remarks>
            <para>
            This alert is sent with the alert qualifier set to the name of the Message
            Queue Monitor attribute.  The details of the error will be provided in the
            alert help text.
            </para>
            <para>
            This alert may be issued for normal events, such as the Message Queuing
            service being stopped (either directly or as the result of the remote
            computer containing a particular Message Queue being rebooted).  The
            server will attempt to automatically restart receiving of data from a
            Message Queue that has reported an error; however, if the error persists
            then manual intervention may be needed to correct the problem.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.SmtpError">
            <summary>
            This alert is sent when the server encounters an error sending e-mail via SMTP
            that is related to the SMTP transport itself and not an e-mail job.
            </summary>
            <remarks>
            <para>
            This alert is sent if the configured SMTP transport(s) are not available for
            sending e-mail, which may merely be a temporary problem.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.HttpListenerError">
            <summary>
            This alert is raised when the server cannot establish an HTTP listener
            as defined by one of the Listening Communication Paths.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.JobFailedRetryPending">
            <summary>
            This alert is sent when a error occurs executing a job and the error is determined
            to specific to the particular job and re-executing the job later may succeed.  For
            example, if an FTP transfer job failed because the destination file is in-use then
            the failure is specific to the file name given in the URI and when the file is no
            longer in-use the transfer should be successful.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomJobDisabled">
            <summary>
            This alert is raised when execution of a custom job fails and the job is
            disabled.  The alert message will identify the problem encountered.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.TransformJobDisabled">
            <summary>
            This alert is raised when execution of a transfor job fails and the job is
            disabled.  The alert message will identify the problem encountered.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.EmailReceiveConnectionFailed">
            <summary>
            This alert is raised when a connection cannot be established with the server
            that is being used to receive e-mail.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.EmailReceiveMessageFailed">
            <summary>
            This alert is raised when an error is encountered receiving an e-mail message
            from an e-mail server.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.JobsNotScheduling">
            <summary>
            This alert is raised when jobs cannot be scheduled for some reason.  This usually
            occurs because the maximum number of jobs is active and a long time has elapsed
            since the last job was scheduled.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.JobNotRecovered">
            <summary>
            This alert is raised when the Output Manager server application is started and it
            detects a job that cannot be recovered.  The alert text describes the
            problem and the disposition of the job.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert1">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert2">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert3">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert4">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert5">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert6">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert7">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert8">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert9">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AlertMessageIdentifiers.CustomAlert10">
            <summary>
            This alert is reserved for custom job implementation using the 
            Output Manager .NET API or COM interface.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.EomAttributeType">
            <summary>
            Defines enumeration values for each of the attribute or configuration entities
            that can be configured.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.BackupAttribute">
            <summary>Backup attribute.</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.CodedCharacterSetTable">
            <summary>Coded Character Set Table</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.CommunicationListeningPath">
            <summary>Communication Listening Path</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.CommunicationPollingPath">
            <summary>Communication Polling Path</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.CommunicationSendingPath">
            <summary>Communication Sending Path</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.CustomJobAttribute">
            <summary>Custom Job Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.DataDependentAttribute">
            <summary>Data Dependent Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.DirectoryAlias">
            <summary>Directory Alias</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.DirectoryMonitor">
            <summary>Directory Monitor</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.EmailAttribute">
            <summary>E-mail Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.FileExpirationSearch">
            <summary>File Expiration Search</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.FileGroup">
            <summary>File Group</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.FileMask">
            <summary>File Mask</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.HeaderTrailerPage">
            <summary>Header or Trailer Page definition</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.IndexAttribute">
            <summary>Index Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.LogicalPageAttribute">
            <summary>Logical Page Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.LogicalPrinter">
            <summary>Logical Printer</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.PhysicalPrinter">
            <summary>Physical Printer</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.PrintAttribute">
            <summary>Print Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.SecurityRole">
            <summary>Security Role</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.TransferAttribute">
            <summary>Transfer Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.TranslateTable">
            <summary>Translate Table</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.MessageQueueMonitor">
            <summary>Message Queue Monitor</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.CertificateAlias">
            <summary>Certificate Alias</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.Credentials">
            <summary>Credentials</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.TransformAttribute">
            <summary>Transform Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.EomAttributeType.XmlProcessingDirective">
            <summary>XML ProcessingDirective</summary>
        </member>
        <member name="T:OutputMgr.Interface.DdaCommandType">
            <summary>
            Data Dependent Attribute (DDA) command type identifiers.
            </summary>
            <internal>
            The enumeration values are fixed for each command and must not be change
            because these values are stored in the users DDA configuration files.
            </internal>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.If">
            <summary>If command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.EndReport">
            <summary>End Report command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.ExecuteCommandFile">
            <summary>Execute Command File command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.ChangeWindowsFont">
            <summary>Change Windows Font command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.ExitItem">
            <summary>Exit Item command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.QueuePrintAttribute">
            <summary>Queue Print Attribute command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.PerformLogicalFormFeed">
            <summary>Perform Logical Form Feed command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.PerformPhysicalFormFeed">
            <summary>Perform Physical Form Feed command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.PositionToLine">
            <summary>Position to Line command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.PrintData">
            <summary>Print Data command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.SetDataOutputOff">
            <summary>Set Data Output Off command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.SetDataOutputOn">
            <summary>Set Data Output On command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.SetVariable">
            <summary>Set Variable command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.DumpVariables">
            <summary>Dump Variables command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.PositionGraphic">
            <summary>Position Graphic command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.DrawRectangle">
            <summary>Draw Rectangle command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.ConvertVariable">
            <summary>Convert Variable command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.ComputeVariable">
            <summary>Compute Variable command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.DisplayVariable">
            <summary>Display Variable command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.ConcatenateVariable">
            <summary>Concatenate Variable command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.SwapPrintAttribute">
            <summary>Swap Print Attribute command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.CallItem">
            <summary>Call Item command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.SearchVariable">
            <summary>Search Variable command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.CancelQueuedPrintAttribute">
            <summary>Cancel Queued Print Attribute command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.GetFieldCoordinates">
            <summary>Get Field Coordinates command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.WriteIndex">
            <summary>Write Index command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.SwapFormFile">
            <summary>Swap From File command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.PrintBarCode">
            <summary>Print Bar Code command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.GetUserInput">
            <summary>Get User Input command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.StartPrintJob">
            <summary>Start Print Job command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.StartTransferJob">
            <summary>Start Transfer Job command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.StartEmailJob">
            <summary>Start E-mail job command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.StartCustomJob">
            <summary>Start Custom Job command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.StartBackupJob">
            <summary>Start Backup Job command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.ElseIf">
            <summary>Else If command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.Else">
            <summary>Else command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.StartTransformJob">
            <summary>Start Transform Job command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.DrawChart">
            <summary>Draw Chart command</summary>
        </member>
        <member name="F:OutputMgr.Interface.DdaCommandType.DataTable">
            <summary>DataTable operations command</summary>
        </member>
        <member name="T:OutputMgr.Interface.EventMessageSeverities">
            <summary>
            Severities defined for Event Messages.
            </summary>
            <exclude/> This enum is not included in the API .chm file.
        </member>
        <member name="F:OutputMgr.Interface.EventMessageSeverities.Error">
            <summary>
            The event message is reporting an error.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EventMessageSeverities.Warning">
            <summary>
            The event message is reporting a warning.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EventMessageSeverities.Informational">
            <summary>
            The event message is informational.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EventMessageSeverities.None">
            <summary>
            No severity is associated with the event message (used for internal
            initialization purposes only).
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.FileDiscoveryTypes">
            <summary>
            File discovery types for the Directory Monitor.  Immediate uses the Windows
            FileSystemWatcher to discover files immediately, Periodic uses a periodic scan
            of the folder(s) to discover files.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.FileDiscoveryTypes.Immediate">
            <summary>
            Use a Windows File System Watcher object for near immediate notification of
            new files for processing.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.FileDiscoveryTypes.Periodic">
            <summary>
            Use a periodic scan of the folder(s) to discover new files for processing.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.ServerConstraints">
            <summary>
            Defines various server constraints or limits.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.ServerConstraints.MaxAttributeNameLength">
            <summary>
            Maximum allowed length of a configuration attribute name.
            This applies to configuration items such as Printer Attribute, File Mask, etc.
            </summary>
            <internal>
            <para>
            There is no concrete reason for this particular value.  The main reason
            to limit this name size is to keep the file and job database records from growing
            unreasonably large.  If they get too big, the records require multiple disk I/O
            which impacts performance.
            </para>
            <para>
            A non-concrete reason for the limit of 50 is that the Output Manager protocol
            passes the communication path name in the polling ping packet and that packet
            cannot handle more than 50 characters without a packet significant revision.
            </para>
            </internal>
        </member>
        <member name="F:OutputMgr.Interface.ServerConstraints.MaxAttributeCommentLength">
            <summary>
            Maximum allowed length of the comment field in a configuration attribute.
            This applies to configuration items such as Print Attribute, File Mask, etc.
            </summary>
            <internal>There is no concrete reason for this particular value.  The main reason
            to limit this field is to keep the attribute storage within a reasonable size.  This
            prevents users (probably testers) from providing a huge string just to the limits.
            Nothing in the application cares about this limit.  Raising the value may impact
            performance because the attribute collections would grow, but only if the comments
            are really that large.  Since the comments are all held as System.String objects,
            they only use as much space as the string requires.</internal>
        </member>
        <member name="T:OutputMgr.Interface.FileType">
            <summary>Describes the type of file being passed to the Output Manager service.</summary>
            <internal>This should only be used in interfaces that are exposed to external programs.
            The implementation of the interface method must map this enum to any other file type
            enum used within the service.</internal>
        </member>
        <member name="F:OutputMgr.Interface.FileType.Unknown">
            <summary>The client application does not know the file type.  The service application
            should determine it by reading the file contents.</summary>
        </member>
        <member name="F:OutputMgr.Interface.FileType.ASCII">
            <summary>The file contains ASCII data.</summary>
        </member>
        <member name="F:OutputMgr.Interface.FileType.PassThru">
            <summary>The file contains data that should not be interpreted by the service
            application.</summary>
        </member>
        <member name="F:OutputMgr.Interface.FileType.ShiftJIS">
            <summary>The file contains ShiftJIS (Japanese) data.</summary>
        </member>
        <member name="F:OutputMgr.Interface.FileType.XeroxMC1">
            <summary>The file contains embedded Xerox printer control commands.</summary>
        </member>
        <member name="T:OutputMgr.Interface.FileRemovalType">
            <summary>
            The choices for removing the file from the file database upon completion of all
            jobs scheduled for the associated file.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.FileRemovalType.Immediately">
            <summary>
            Remove file immediately after all jobs have completed.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.FileRemovalType.AfterTimeDelay">
            <summary>
            Remove file after the configured time delay (if the jobs have completed).
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PlexMode">
            <summary>
            Defines the printing simplex/duplex mode.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.PlexMode.NoChange">
            <summary>
            Do not change the simplex/duplex mode of the printer.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PlexMode.Simplex">
            <summary>
            Print as simplex.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PlexMode.DuplexLong">
            <summary>
            Print duplex using long side.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PlexMode.DuplexShort">
            <summary>
            Print duplex using short side.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PageOrientation">
            <summary>
            Defines the printing page orientation.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.PageOrientation.Landscape">
            <summary>
            Print as landscape.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PageOrientation.Portrait">
            <summary>
            Print as portrait.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PageOrientation.InverseLandscape">
            <summary>
            Print page in inverse (rotated 180 degrees) landscape.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PageOrientation.InversePortrait">
            <summary>
            print page in inverse (rotated 180 degrees) portrait.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PrintQuality">
            <summary>
            The print quality.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.PrintQuality.Letter">
            <summary>
            Letter quality.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrintQuality.Draft">
            <summary>
            Draft quality.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrintQuality.DP">
            <summary>
            Data Processing quality.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrintQuality.Default">
            <summary>
            Default print quality.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PaperType">
            <summary>
            Defined paper types.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.Letter">
            <summary>
            Letter paper (8.5 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.Legal">
            <summary>
            Legal paper (8.5 in. by 14 in.)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.Ledger">
            <summary>
            Ledger paper (17 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.Wide">
            <summary>
            Wide.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.Exec">
            <summary>
            Executive paper (7.25 in. by 10.5 in.)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.A3">
            <summary>
            A3 paper (297 mm by 420 mm)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.A4">
            <summary>
            A4 paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.A5">
            <summary>
            A5 paper (148 mm by 210 mm)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.B5">
            <summary>
            B5 (JIS) paper (182 mm by 257 mm)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.UserDefined">
            <summary>
            User defined paper size.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PaperType.B4">
            <summary>
            B4 (ISO) paper (250 mm by 353 mm)
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.TransportType">
            <summary>
            This enum defines the various transport types used by Output Manager to receive
            a file.
            </summary>
            <remarks>
            The obsoleted transport types remain defined to support backup files that were
            created with the respective transport type.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.TP0">
            <summary>
            Output Manager protocol on top of TP0 (RFC 1006)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.LPR">
            <summary>
            LPR/LPD protocol (RFC 1179)
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.NetBIOS">
            <summary>
            No longer used in Output Manager 7.0 and greater - replaced by <b>TP0</b>.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.Local">
            <summary>
            No longer used in Output Manager 7.0 and greater - replaced by <b>Remote</b>.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.DirectoryMonitor">
            <summary>
            File received through a configured directory monitor.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.NetWare">
            <summary>
            No longer used in Output Manager 7.0 and greater - replaced by <b>TP0</b>.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.DDE">
            <summary>
            No longer used in Output Manager 7.0 and greater - replaced by <b>Remote</b>.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.RawTCP">
            <summary>
            Raw TCP protocol.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.Email">
            <summary>
            E-mail receive.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.Index">
            <summary>
            Indexed file.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.LoopBack">
            <summary>
            Print output loop back file.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.COM">
            <summary>
            File received via IOutputManager COM interface.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.Remote">
            <summary>
            File received via a Remoting API from external client.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.MessageQueuing">
            <summary>
            Data received via Message Queuing.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.HTTP">
            <summary>
            Data recieved via HTTP.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.TransportType.HttpResponse">
            <summary>
            Data received via an HTTP Response from an HTTP transfer.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.EmailFormat">
            <summary>
            Provides enumerated values for the e-mail format for e-mails sent via SMTP.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.EmailFormat.DetermineDynamically">
            <summary>
            The e-mail format is determined dynamically.  If the file name or original file name
            that is being used as the contents of the message body has an .htm or .html extension,
            then the mail format is set to HTML.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailFormat.Html">
            <summary>
            The e-mail format is set to HTML.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailFormat.Text">
            <summary>
            The e-mail format is set to text.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.EmailImportance">
            <summary>
            E-mail importance.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailImportance.Low">
            <summary>
            Low importance.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailImportance.Medium">
            <summary>
            Medium importance (the default).
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailImportance.High">
            <summary>
            High importance.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.EmailSensitivity">
            <summary>
            E-mail sensitivity.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailSensitivity.NoSensitivity">
            <summary>
            No special sensitivity (the default).
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailSensitivity.Personal">
            <summary>
            Personal
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailSensitivity.Private">
            <summary>
            Private
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailSensitivity.Confidential">
            <summary>
            Designated as company confidential
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.LogicalPagePlacementOrder">
            <summary>
            The choices for page placement in a Logical Page Attribute.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.LogicalPagePlacementOrder.Horizontally">
            <summary>
            Horizontal placement.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.LogicalPagePlacementOrder.Vertically">
            <summary>
            Vertical placement.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.LogicalPrinterSelectionType">
            <summary>
            Selection options available for choosing the next printer contained in this
            logical printer definition to use.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.LogicalPrinterSelectionType.FirstAvailable">
            <summary>
            Choose the first available printer found.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.LogicalPrinterSelectionType.Rotate">
            <summary>
            Rotate through all printers.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.LogicalPrinterSelectionType.LeastUsed">
            <summary>
            Choose the least used printer.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.CodePages">
            <summary>
            Code page values.
            </summary>
            <remarks>
            The valid code pages range from 0 to 65535, with 0 indicating the encoding specified
            in the regional settings for the computer is to be used.  Typically, the code page
            values will be selected from the list of installed code pages and as such maintaining
            enumerated code page values is not necessary or desirable.
            <para>
            Some special code page selections are required when configuring Output Manager.  To
            support these special selections, the values are given unique negative numbers to
            avoid overlapping the valid code page numbers defined by Windows.  In addition, the
            values are started at -1000 instead of -1 to try and avoid likely collisions if
            Microsoft invents some special code page numbers like they did with code page 0.
            </para>
            <para>
            Note, we really do not want to promote the use of code page number 0 because if
            someone changes the language in the regional settings then Output Manager would
            start using a different code page.  For that reason, a "Default" code page value
            equated to 0 is not defined and not presented in the various client dropdown lists
            where a code page can be selected.  However, these dropdown lists do allow the
            user to type in an integer value and they could still use 0 if they want, but that
            is at their own risk.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.CodePages.None">
            <summary>
            No decoding/encoding is to occur, that is, the file is read such that each 8-bit
            byte value is mapped used as the Unicode character code point and round-trip
            encoding back to each 8-bit bytes is accomplished by using just the least
            significant 8-bits bits of the Unicode character.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CodePages.UseFileCodePage">
            <summary>
            Where specified, the code page associated with the file at the time it was
            received should be used.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CodePages.NoChange">
            <summary>
            No change in the encoding is to occur; however, if no code page is in effect
            the code page associated with the file will be used.
            </summary>
            <remarks>
            Typically this selection is used when configuring the code page property in
            either the Print Attribute or Coded Character Set Table Identifier used to
            encode Unicode characters to bytes for printing without the Windows Driver.
            It provides the ability to prevent a swapped to Print Attribute or Coded
            Character Set Table (which is part of a swapped to Print Attribute) from
            resetting the code page used to encode the Unicode characters back to bytes
            for printing.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.CodePages.Unicode">
            <summary>
            Microsoft code page number for little-endian Unicode.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CodePages.BigEndianUnicode">
            <summary>
            Microsoft code page number for big-endian Unicode.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CodePages.UTF8">
            <summary>
            Microsoft code page number for UTF-8.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.FileMaskFileType">
            <summary>
            Selection options for file mask file type.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.FileMaskFileType.Dynamic">
            <summary>
            Determine the file type dynamically.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.FileMaskFileType.Ascii">
            <summary>
            Set file type to ASCII.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.FileMaskFileType.Passthru">
            <summary>
            Set file type to PassThru.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.FileMaskFileType.XeroxMc1">
            <summary>
            Set file type to Xerox MC1.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PrinterType">
            <summary>
            Types of Output Manager printers.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterType.Unknown">
            <summary>
            A dummy enumeration value that is used internally until the printer type is set.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterType.Windows">
            <summary>
            A Windows printer (i.e., a printer associated with printer a installed on the computer).
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterType.TcpIp">
            <summary>
            A printer configured to send the spooled output using a Transfer Attribute
            to a network addressable printer and/or server using the protocol defined
            by the Transfer Attribute.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterType.Custom">
            <summary>
            A Custom printer used for formatting an output file for input to a custom job.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterType.Email">
            <summary>
            An E-mail printer used for formatting an output file for e-mailing.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterType.Index">
            <summary>
            An Index printer used for generating Indexed files.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterType.Image">
            <summary>
            A special printer for generating image files.  Currently only used with the
            TIFF driver.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PrinterKinds">
            <summary>
            Defines the kind of printers that are to be included in the list of printer
            names returned by <see cref="M:OutputMgr.Interface.IPrinters.GetPhysicalPrinterNames(OutputMgr.Interface.PrinterKinds)"/> and 
            <see cref="M:OutputMgr.Interface.IPrinters.GetLogicalPrinterNames(OutputMgr.Interface.PrinterKinds)"/>.  These are flag attributes
            that can be bitwise or'ed together to indicate the kind and type of printer
            names to get.
            </summary>
            <remarks>
            <para>
            Only a subset of the <b>PrinterKind</b> flags are meaningful with the interface
            method <see cref="M:OutputMgr.Interface.IPrinters.GetLogicalPrinterNames(OutputMgr.Interface.PrinterKinds)"/>.  In particular, the 
            <b>Windows</b> and <b>TcpIp</b> enumeration values are not recognized 
            because a logical printer can have a mixture of these kinds or printers.
            </para>
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.Custom">
            <summary>
            Get only printers with a type of 'Custom'.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.Email">
            <summary>
            Get only printers with a type of 'E-mail'.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.Index">
            <summary>
            Get only printers with a type of 'Index'.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.TcpIp">
            <summary>
            Get only printers with a type of 'TCP/IP'.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.Windows">
            <summary>
            Get only printers with a type of 'Windows'.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.EmailJobCompatible">
            <summary>
            Get only those printers that are compatible for the printing phase used to re-format
            a file into a new file for an e-mail job.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.Image">
            <summary>
            Get only printers of type 'Image'.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.All">
            <summary>
            Composite value indicating to get all physical and logical printers.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterKinds.AllButCustom">
            <summary>
            Composite value indicating to get all physical and logical printers but the custom
            printer type.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PrinterStatus">
            <summary>
            Statuses used for the printers.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.Ready">
            <summary>
            The printer is in the Ready (unlocked) state waiting for a print job to be
            scheduled for execution.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.PreProcessing">
            <summary>
            Printing is in the "pre-processing" phase, which includes opening the printer
            (Windows printer) and opening or creating print files.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.Printing">
            <summary>
            The file is being printed.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.PostProcessing">
            <summary>
            Printing is in the "post-processing" phase, which includes closing the printer
            and closing the associated print files.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.Distilling">
            <summary>
            The Postscript print file, created by printing to the Adobe Acrobat printer, is
            being processed by Acrobat Distiller to produce the output PDF file.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.Suspended">
            <summary>
            Printing of the print job on the printer has been suspended.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.OutstandingAlert">
            <summary>
            Printing of the print job is suspended waiting for an outstanding alert related
            to the print job and/or printer to be answered.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.Locked">
            <summary>
            The printer is locked.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterStatus.LockedDueToError">
            <summary>
            The printer has been locked due to an internal error.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.PrinterSpoolOption">
            <summary>
            Spooling options available for Windows printers.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.PrinterSpoolOption.WindowsDefault">
            <summary>
            User the default spooling option configured for the selected
            Windows printer.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterSpoolOption.SpoolToWindows">
            <summary>
            Spool to the Window's print manager.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.PrinterSpoolOption.PrintDirectToPrinter">
            <summary>
            Send output directly to the print device (i.e., do not spool to the
            Window's print manager).
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.GraphicTypes">
            <summary>
            Graphic types supported by the DDA command PositionGraphic.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.GraphicTypes.DetermineDynamically">
            <summary>
            Dynamically determine the graphic file type using the extension.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.GraphicTypes.Bmp">
            <summary>
            Bitmap file.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.GraphicTypes.Gif">
            <summary>
            Graphic Interchange Format.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.GraphicTypes.Jpeg">
            <summary>
            Joint Photographic Experts Group.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.GraphicTypes.Png">
            <summary>
            Portable Network Graphics.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.GraphicTypes.Tiff">
            <summary>
            Tag Image File Format.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.GraphicTypes.Wmf">
            <summary>
            Windows Metafile.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.CommunicationProtocol">
            <summary>
            The supported communication path protocols.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.CommunicationProtocol.OutputMgr">
            <summary>
            Output Manager protocol on top of TP0 (RFC 1006).
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CommunicationProtocol.LprLpd">
            <summary>
            LPR/LPD protocol (RFC 1179).
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CommunicationProtocol.RawTCP">
            <summary>
            Raw TCP protocol (i.e., no protocol just raw transfer of bytes until a
            close is received).  (Formerly, this was called the Simple TCP protocol).
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CommunicationProtocol.Http">
            <summary>
            HTTP protocol.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CommunicationProtocol.Ftp">
            <summary>
            File Transfer Protocol (FTP).
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.HeaderTrailerTextPosition">
            <summary>
            Header/Trailer pages - Positioning identifiers for header/trailer Items
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.LeftJustify">
            <summary>
            Left justified, full width of line.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.RightJustify">
            <summary>
            Right justified, full width of line.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.Center">
            <summary>
            Center in line.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.LeftHalf">
            <summary>
            Left half of page in line.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.RightHalf">
            <summary>
            Right half of page in line.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.LeftThird">
            <summary>
            Left third of page in line.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.CenterThird">
            <summary>
            Center third of page in line.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.RightThird">
            <summary>
            Right third of page in line.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextPosition.ByCharPosition">
            <summary>
            By starting character placement in line.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.HeaderTrailerTextSize">
            <summary>
            Header/Trailer pages - Character Size identifiers for header/trailer items
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextSize.OneByOne">
            <summary>
            Occupies 1 line and 1 column.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextSize.SevenByEight">
            <summary>
            Block output occupying 7 lines and 8 columns for each character.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerTextSize.TwelveByTwelve">
            <summary>
            Block output occupying 12 lines and 12 columns for each character.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.HeaderTrailerPositionBase">
            <summary>
            Header/Trailer pages - print option flag values for header/trailer items
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerPositionBase.LinesFromTop">
            <summary>
            Position specified number of lines from top of page.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.HeaderTrailerPositionBase.LinesFromBottom">
            <summary>
            Position specified number of lines from bottom of page.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.EmailSendingOption">
            <summary>E-mail sending options.</summary>
            <remarks>
            Indicates which expansion agents are used for sending e-mail jobs. When both SMTP and the 
            external agents are used, SMTP is used if the e-mail job contains only SMTP addresses.
            Otherwise, the external agent is used.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailSendingOption.UseSmtpAgentOnly">
            <summary>The service is to only use the internal SMTP e-mail provider.</summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailSendingOption.UseExternalAgentOnly">
            <summary>The service is to only use an external expansion agent.</summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailSendingOption.UseSmtpOrExternalAgent">
            <summary>Use both the internal SMTP and the external expansion agent.</summary>
        </member>
        <member name="T:OutputMgr.Interface.EmailRegisterService">
            <summary>Register service type for external e-mail agent</summary>
            <remarks>
            Indicates the type of service an external e-mail agent is registering for. This value is used
            in the call to the method RegisterForService(). Note that any subsequent register will replace
            any previous register. 
            registered for 
            </remarks>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.EmailRegisterService.DisableSuspend">
            <summary>Specified when the agent wants to not do the immediate suspend (which is the 
            default)</summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailRegisterService.Lookup">
            <summary>Specified when the agent is registering for e-mail address lookup.</summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailRegisterService.Send">
            <summary>Specified when the agent is registering for e-mail sending.</summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailRegisterService.Receive">
            <summary>Specified when the agent is registering for e-mail receiving.</summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailRegisterService.None">
            <summary>Specified when the agent is removing any previous registration. Note that this 
            has the same affect if the agent specifies a null IEmailClient interface object.</summary>
        </member>
        <member name="T:OutputMgr.Interface.enumExpansionStatus">
            <summary>E-mail expansion status within the Output Manager service</summary>
            <remarks>Enumeration which is a consolidation of various states of the e-mail expansion 
            within the Output Manager service. Its value is used both internally and externally as a quick 
            indicator of the status. For example, the legacy e-mail
            client uses it to find out when scheduling of e-mail jobs has been suspended.
            </remarks>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.enumExpansionStatus.MissingSmtpSendAgent">
            <summary>SMTP sending is enabled (UseInternalSmtpSendAgent is set), but there is no
            internal SMTP agent available.  This should be a transient condition that only occurs
            when the properties for SMTP sending are changing.
            When this is set, the EOM server generates an alert with an identifier of
            "EmailJobConfiguration" and a qualifier of "MissingSmtpSendAgent".</summary>
            <internal>It's not clear how this condition can occur.  If UseInternalSmtpSendAgent is
            set, then an EmailSmtpOutput object (the internal SMTP agent) should always be
            created.</internal>
        </member>
        <member name="F:OutputMgr.Interface.enumExpansionStatus.MissingExternalSendAgent">
            <summary>E-mail sending is configured to use an external agent for CDO or MAPI
            sending, but the Legacy Interface Assistant is not available.
            When this is set,  the EOM server generates an alert with an identifier of
            "EmailJobConfiguration" and a qualifier of "MissingExternalSendAgent".</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumExpansionStatus.EmailJobSchedulingStopped">
            <summary>The Output Manager server is not allowing e-mail jobs to be scheduled.
            This affects only sending, not receiving, of e-mail.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumExpansionStatus.UseExternalSendAgent">
            <summary>The current email settings indicate that the external agent
            (Legacy Interface Assistant) is to be used for sending of e-mail messages.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumExpansionStatus.UseInternalSmtpSendAgent">
            <summary>The current email settings indicate that the internal (SMTP) agent is to 
            be used for sending of e-mail messages.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumExpansionStatus.SchedulingActive">
            <summary>The Output Manager server is allowing e-mail jobs to be scheduled and the
            required internal (SMTP) or external (Legacy Interface Assistant) agent is available
            to perform the send.  This has no affect on receiving e-mail.</summary>
        </member>
        <member name="T:OutputMgr.Interface.ServiceControlOptions">
            <summary>
            Service Control Manager options to control the Output Manager service.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.ServiceControlOptions.DelayedTermination">
            <summary> Stop the service after waiting for all in-progress activities to complete.</summary>
        </member>
        <member name="T:OutputMgr.Interface.RemovalDisposition">
            <summary>
            Options for removal of the file from the file information database.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.RemovalDisposition.UponJobCompletion">
            <summary>
            Remove file once all jobs have completed.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.RemovalDisposition.AfterSpecifiedTime">
            <summary>
            Remove file after the specified time has elapsed since the file's 
            record was added to the file information database, but only if all
            jobs have also completed.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.RemovalDisposition.UseFileGroup">
            <summary>
            Remove the file based upon the file removal disposition in the
            File Group assigned to this file.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.DeleteDisposition">
            <summary>
            Options for the deletion of the file after it is removed from the file information
            database.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.DeleteDisposition.DoNotDelete">
            <summary>
            Do not delete the file when its record is removed.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.DeleteDisposition.UponRemoval">
            <summary>
            Delete the file when its record is removed.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.DeleteDisposition.UseFileGroup">
            <summary>
            Delete the based upon the file deletion disposition set in the
            assigned File Group when its record is removed.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.JobDisableOverrideFlags">
            <summary>
            Special operational overrides that the client can specify when calling method
            <see cref="M:OutputMgr.Interface.IManagedObjectCollection.Disable(System.Int64)"/> to direct the Output Manager
            server to ignore certain error checks in order to disable the job.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.JobDisableOverrideFlags.None">
            <summary>
            No overrides are specified.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.JobDisableOverrideFlags.InProgress">
            <summary>
            Indicates that the "in-progress" state is ignored and the job is disabled anyway.
            </summary>
            <remarks>
            This override is currently only honored for Transfer Jobs and when an in-progress
            transfer job is disabled the data transfer will be terminated.
            </remarks>
        </member>
        <member name="T:OutputMgr.Interface.ThresholdTypes">
            <summary>
            Entities which can have thresholds monitored.
            </summary>
            <exclude/> This enum is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.NumberOfFiles">
            <summary>Number of files exceeds the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.NumberOfPrintJobs">
            <summary>Number of print jobs exceeds the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.NumberOfTransferJobs">
            <summary>Number of transfer jobs exceeds the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.NumberOfBackupJobs">
            <summary>Number of backup jobs exceeds the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.NumberOfEmailJobs">
            <summary>Number of e-mail jobs exceeds the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.NumberOfCustomJobs">
            <summary>Number of custom jobs exceeds the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.NumberOfTransformJobs">
            <summary>Number of transform jobs exceeds the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.OutputManagerListeningPaths">
            <summary>Number of Output Manager communication listening paths has fallen below the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.LprLpdListeningPaths">
            <summary>Number of LPR/LPD communication listening paths has fallen below the defined threshold.</summary>
        </member>
        <member name="F:OutputMgr.Interface.ThresholdTypes.RawTcpListeningPaths">
            <summary>Number of Raw TCP communication listening paths has fallen below the defined threshold.</summary>
        </member>
        <member name="T:OutputMgr.Interface.FileExpirationSearchType">
            <summary>The search types available to FileExpirationSearch.</summary>
        </member>
        <member name="F:OutputMgr.Interface.FileExpirationSearchType.BackupIndex">
            <summary> Perform File Expiration Search on Backup/Index files.</summary>
        </member>
        <member name="F:OutputMgr.Interface.FileExpirationSearchType.ByCreationDate">
            <summary> Perform File Expiration Search on files based on creation date.</summary>
        </member>
        <member name="F:OutputMgr.Interface.FileExpirationSearchType.ByLastModifiedDate">
            <summary> Perform File Expiration Search on files based on last modified date.</summary>
        </member>
        <member name="T:OutputMgr.Interface.CertificateStoreLocation">
            <summary>
            The location of the certificate store.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.CertificateStoreLocation.CurrentUser">
            <summary>The certificate store used by the current user.</summary>
        </member>
        <member name="F:OutputMgr.Interface.CertificateStoreLocation.LocalMachine">
            <summary>The certificate store assigned to the local computer.</summary>
        </member>
        <member name="F:OutputMgr.Interface.CertificateStoreLocation.Service">
            <summary>The certificate store assigned to the service.</summary>
        </member>
        <member name="T:OutputMgr.Interface.ChartElements">
            <summary>
            The collection names that could be retrived from the chart template.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ChartElements.ChartAreas">
            <summary>
            The chart area collection in the chart template.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ChartElements.ChartLegends">
            <summary>
            The chart legend collection in the chart template.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ChartElements.ChartTypes">
            <summary>
            The chart type collection in the chart template.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ChartElements.ChartTitles">
            <summary>
            The chart title collection in the chart template.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.DisplayField">
            <summary>
            The fields used in various places throughout the service and client.  In
            particular, the management windows, file masking, and Header/Trailer Page.
            </summary>
            <internal>
            The DisplayField enumerators' identifiers are given hard-coded value assignments that
            MUST NEVER be changed.  Changing the value assignments will break existing configurations
            because the values are saved in configuration files (File Masking and Management Filter,
            Fields and Sort Order, and possibly other areas).  Therefore, new identifiers added to
            the DisplayField enumerator must be added at the end of current enumerator-list and must
            be assigned the next sequential available value and any removed identifiers must be
            commented as obsoleted and the value assignment for these obsoleted identifiers may not
            be reused.
            </internal>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.Unknown">
            <summary>Initial value.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.AlternativePath">
            <summary>Alternate transfer path name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.AttachmentName">
            <summary>E-mail message attachment name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.DirectoryMonitorName">
            <summary>Name of the Directory Monitor that processed the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.LastBackupDate">
            <summary>Date of the backup last performed on this file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.BackupIndexedExpiration">
            <summary>Backup or indexed file expiration date/time.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.BackupIndexedFile">
            <summary>Name of the backup or indexed file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.BackupIndexedFileAge">
            <summary>Backup or indexed file creation age.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.LastBackupTime">
            <summary>Time of the backup last performed on this file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.BottomMargin">
            <summary>Margin for bottom of page as defined by Print Attribute.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.BytesTransferred">
            <summary>The number of bytes transferred.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.ChargeCode">
            <summary>A-Series charge code that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.CharactersPerLine">
            <summary>The number chars per Line.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.CheckedBy">
            <summary>Name of user who checked the file in Print Preview.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.ReceivingPathName">
            <summary>Name of communication path that received the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.DataDirectoryFileName">
            <summary>Full directory/file name of the data file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.DataFileName">
            <summary>Name of the data file (does not include path information).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.DeleteType">
            <summary>Flag specifying when/if to delete the physical data file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.Destination">
            <summary>A-series destination printer.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EstimatedFileSize">
            <summary>Estimated file size of data to transfer (in bytes).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EstimatedPages">
            <summary>Estimated pages in print file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EventSeverity">
            <summary>Severity of Event Message.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EventMessage">
            <summary>Text of Event Message.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EventDate">
            <summary>Date of Event Message.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EventTime">
            <summary>Time of Event Message.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileAge">
            <summary>Number of days/hours file has been in the Output Manager database
            (used during file removal).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileDescription">
            <summary>Description of file contents (set by File Mask).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileGroup">
            <summary>Name of File group the file belongs to.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileMask">
            <summary>Name of File Mask that processed the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileName">
            <summary>Name of the file currently being printed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileNodeA">
            <summary>A-Series file node A.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileNodeB">
            <summary>A-Series file node B.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FilePriority">
            <summary>File Priority.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileSequenceNumber">
            <summary>Sequence numbers used by Header/Trailer Page.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileServer">
            <summary>Netware file server where the file came from.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileType">
            <summary>File type (i.e. ASCII, PassThru, ShiftJIS, etc.).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostAccount">
            <summary>Account number of the user that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostBannerID">
            <summary>Banner-id assigned to the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostCreateDate">
            <summary>Host file creation date.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostCreateTime">
            <summary>Host file creation time.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostFCycle">
            <summary>Source file cycle number.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostFileName">
            <summary>Source file name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostFullFileName">
            <summary>Fully qualified source file name.  For OS 2200,Qualifier*Filename(F-cycle)
            of host file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostPriority">
            <summary>File priority.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostProject">
            <summary>Project-id of the user that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostQualifier">
            <summary>Source qualifier name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostQueue">
            <summary>Source queue name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostRunid">
            <summary>Run-id of the user that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostSystem">
            <summary>Host system name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostUserid">
            <summary>User-id of the user that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IgnoreBandIdChangeRequests">
            <summary>Ignore band-ID change requests.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IgnoreLpiRequests">
            <summary>Ignore lines per inch change requests.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IgnoreSpecialFormRequests">
            <summary>Ignore special form requests.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey1">
            <summary>Index key one</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey2">
            <summary>Index key two</summary> 
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey3">
            <summary>Index key three</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey4">
            <summary>Index key four</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey5">
            <summary>Index key five</summary>      
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.InProgress">
            <summary>Flag indicating if the job is currently being serviced.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IPAddress">
            <summary>IP address of simple TCP/IP host system.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.JobClass">
            <summary>Job class that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.JobEnabled">
            <summary>Flag indicating if the job is currently enabled.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.JobName">
            <summary>Name of job that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.JobPriority">
            <summary>Priority of job.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.LastPrintAttributeReference">
            <summary>Last print attribute associated with the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.LastPrinterReference">
            <summary>Last printer associated with the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.ProductVersion">
            <summary>Software level.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.LinesPerInch">
            <summary>Lines per inch</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.LinesPerPage">
            <summary>Lines per page</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.LprLpdBanner">
            <summary>LPR/LPD banner name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailAddress">
            <summary>E-mail address.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailAttachFile">
            <summary>Path of automatic attachment file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailAttachmentName">
            <summary>Name to display for automatic attachment.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailAttribute">
            <summary>E-mail attribute name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailBlindCarbon">
            <summary>Blind carbon copy e-mail addresses.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailBodyFile">
            <summary>Path of automatic message body text.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailCarbonCopy">
            <summary>Carbon copy e-mail addresses.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailDelivered">
            <summary>Request for delivery receipt.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailDisplayName">
            <summary>E-mail attachment display name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailErrorAddress">
            <summary>E-mail error address.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailImportance">
            <summary>E-mail message importance.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailRead">
            <summary>Request for read receipt.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailReplyTo">
            <summary>Reply-to e-mail address.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailSensitivity">
            <summary>E-mail message sensitivity.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailSubject">
            <summary>E-mail subject.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.MixNumber">
            <summary>A-series mix number that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.NoteProject">
            <summary>A-series note project that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.NumberOfBytes">
            <summary>Size of file (in bytes).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.NumberOfCopies">
            <summary>Number of times the requested pages will be printed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.NumberOfJobs">
            <summary>Number of outstanding jobs for the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.Originator">
            <summary>E-mail message originator.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PageRanges">
            <summary>Page ranges in file for which print is requested.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PaperType">
            <summary>Paper type to be used to print the job.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.Pages">
            <summary>Number of pages currently being printed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PathPeerName">
            <summary>Path/peer name of transfer.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PercentageComplete">
            <summary>Percentage of transfer completed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrimaryPath">
            <summary>Primary transfer path name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrintDate">
            <summary>Date file was printed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrintTime">
            <summary>Time file was printed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrinterDriver">
            <summary>Type of printer (i.e. PCL, PostScript, Windows, etc.).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrinterId">
            <summary>Name of printer used to print the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrinterName">
            <summary>Name of printer.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrinterStatus">
            <summary>Status of printer (i.e. locked, or unlocked).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrinterType">
            <summary>Type of printer (i.e. Windows, TCP/IP, etc.).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.RemoveDaysHours">
            <summary>Number of days/hours to keep the file in the Output Manager database.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.RemoveType">
            <summary>Flag indicating when file will be removed from Output Manager
            database(i.e. UponJobCompletion, AfterSpecifiedTime, UseFileGroup).</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.SecurityLabel">
            <summary>Security label data.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.SequenceNumbers">
            <summary>Printer sequence numbers (the number of jobs printed on a particular
             printer since starting the application) used by Header/Trailer Page.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.ServerQueue">
            <summary>Print queue that the file came from.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.Subject">
            <summary>E-mail message subject.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TargetPrinter">
            <summary>Name of the physical/logical printer requested by the Print Job.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TimeDelay">
            <summary>Delay time between custom jobs.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TopMargin">
            <summary>Margin at top of page specified by Print Attribute</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferAction">
            <summary>Transfer action.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferComplete">
            <summary>Specifies if the file transfer has completed. </summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferDate">
            <summary>Date that the file transfer occurred.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferDayLimit">
            <summary>Day(s) of the week to which the file transfer is limited.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferDestinationQueue">
            <summary>Destination queue on receiving system.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferPriorityDrop">
            <summary>Drop priority after transfer failure.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferStartTime">
            <summary>Start time of file transfer.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferStatus">
            <summary>Status of transfer.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferTime">
            <summary>Time that the file transfer occurred.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferTimeLimit">
            <summary>Time of day to which the transfer is limited.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransportType">
            <summary>Transfer mechanism by which the file was received.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserArguments">
            <summary>The set of command line arguments to use when
            starting the application.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserCode">
            <summary>User code that queued the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserDayLimit">
            <summary>Day(s) of the week to which the custom job is limited.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserFileName">
            <summary>The application or document to start.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.CustomJobAttribute">
            <summary>Custom job attribute.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserLine">
            <summary>User line used by Header/Trailer Page</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag1">
            <summary>User tag 1 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag2">
            <summary>User tag 2 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag3">
            <summary>User tag 3 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag4">
            <summary>User tag 4 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag5">
            <summary>User tag 5 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag6">
            <summary>User tag 6 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag7">
            <summary>User tag 7 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag8">
            <summary>User tag 8 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag9">
            <summary>User tag 9 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTag10">
            <summary>User tag 10 from input file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UserTimeLimit">
            <summary>Time of day to which the custom job is limited.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.WebDirectoryKey">
            <summary>Web directory key used with web server.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailFrom">
            <summary>The e-mail address specified for the sender.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.JobOriginatingAttributeName">
            <summary>The name of the attribute that the job was originally created from.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrintHeaderPage">
            <summary>Indicator if header page is printed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrintTrailerPage">
            <summary>Indicator if trailer page is printed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TranslateTable">
            <summary>Translate table name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.WindowsPrinterName">
            <summary>Windows printer name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.DocumentSpoolingMethod">
            <summary>Document spooling method used for printer.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrintOutputFileOption">
            <summary>Print output file option.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.PrintOutputFileAction">
            <summary>Action to perform with output file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.BackupDirectory">
            <summary>Backup directory.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.WorkingDirectory">
            <summary>Working directory path.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey6">
            <summary>Index key six.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey7">
            <summary>Index key seven.</summary> 
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey8">
            <summary>Index key eight.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey9">
            <summary>Index key nine.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.IndexKey10">
            <summary>Index key ten.</summary>      
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.Interactive">
            <summary>Indicates if a Custom Job requires the Legacy Interface Assistant
            to launch the job.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.EmailBodyFormat">
            <summary>Format of the e-mail message body.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.TransferAttribute">
            <summary>Transfer attribute name.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.BannerPage">
            <summary>Indicates if the banner page is displayed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.HostPaperType">
            <summary>Paper type received from host.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileCreateDate">
            <summary>Date the backup or indexed file was created.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileCreateTime">
            <summary>Time the backup or indexed file was created.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.FileCodePage">
            <summary>The code page associated with the file.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.MessageLabel">
            <summary>The label associated with a message received from a message queue.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.MessageQueueLabel">
            <summary>
            The label associated with the message queue from which a message was received.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.MessageQueueMonitor">
            <summary>
            The name of the message queue monitor from which the message associated with the
            file was received.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.MessageQueueName">
            <summary>The name of the message queue from which a message was received.</summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.Uri">
            <summary>
            The canonical string representation of the URI used to transfer the file. 
            </summary>
            <remarks>
            The string returned does not contain port information when the port is the default port
            for the scheme.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UriAbsolutePath">
            <summary>
            The absolute path of the URI used to transfer the file.  This does not include the scheme,
            host name, or query portions of the URI.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UriQuery">
            <summary>
            They query information supplied with the URI used to transfer the file, if any.
            </summary>
            <remarks>
            Query information is separated from the path information part by a question (?) mark and
            continues to the end of the URI.  If any query information was specified with the URI,
            the query string will include the leading question mark.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.UriScheme">
            <summary>
            Gets the scheme with the URI associated with the file transfer.
            </summary>
            <remarks>
            The scheme is returned as a lowercase string.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.ContentType">
            <summary>
            Gets the Content-type associated with the file.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.GroupId">
            <summary>
            Gets the Group-id associated with the file.  Files that have the same group-id
            are logically grouped together.  The grouping is defined by the user.  This
            value merely gives the user the opportunity to define the group.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.DisplayField.LastRecognizedDisplayField">
            <summary>
            Used by the Server to ignore new display fields, sent by newer clients,
            that it does not recognize.
            </summary>
            <exclude/> This enumerator identifier is not included in the API .chm file.
        </member>
        <member name="T:OutputMgr.Interface.DdaItemArgumentException">
            <summary>The object generated to report a DDA item argument error.</summary>
        </member>
        <member name="M:OutputMgr.Interface.DdaItemArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the constructor required for deserialization to occur if a class 
            supports the ISerialization Interface. (It complements the GetObjectData()
            method for serialization).
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the context parameter <paramref name="context"/>.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.DdaItemArgumentException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implements the derived constructor required to support this class
            </summary>
            <param name="namedAttributeType">The NamedAttribute's class.ToString()</param>
            <param name="namedAttributeName">The NamedAttribute object's Name value.</param>
            <param name="propertyName">In this class, always the property "Items"</param>
            <param name="ddaItemName">The name of the DdaItem object's with the problem.</param>
            <param name="itemPropertyName">The name of the DdaItem's property with the problem.
            </param>
            <param name="message">The error message.</param>
            <exclude/> This method is not included in the API .chm file.   
        </member>
        <member name="M:OutputMgr.Interface.DdaItemArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialziation Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file.   
        </member>
        <member name="M:OutputMgr.Interface.DdaItemArgumentException.ToString">
            <summary>
            Overrides the base ToString() method used for tracing only.
            </summary> 
            <exclude/> This method is not included in the API .chm file.       
        </member>
        <member name="P:OutputMgr.Interface.DdaItemArgumentException.DdaItemName">
            <summary>
            Gets or sets the name of the DDA item. 
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.DdaItemArgumentException.ItemPropertyName">
            <summary>
            Gets or sets the name of the DDA item property 
            (for example, "Comments").
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.AttributeCollectionException">
            <summary>The object generated to report an attribute collection error.</summary>
        </member>
        <member name="M:OutputMgr.Interface.AttributeCollectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the constructor required for deserialization to occur if a class 
            supports the ISerialization Interface. (It complements the GetObjectData()
            method for serialization).
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the context parameter <paramref name="context"/>.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.AttributeCollectionException.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Implements the derived constructor required to support this class
            </summary>
            <param name="namedAttributeType">The NamedAttribute's class.ToString()</param>
            <param name="namedAttributeName">The NamedAttribute object's Name value.</param>
            <param name="propertyName">In this class, always the property "Items"</param>
            <param name="memberTypeName">The name of the member's type.</param>
            <param name="memberIndex">The index of the member with the problem.</param>
            <param name="memberPropertyName">The member property with the problem.</param>
            <param name="message">The error message.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.AttributeCollectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialziation Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.AttributeCollectionException.ToString">
            <summary>
            Overrides the base ToString() method used for tracing only.
            </summary>  
            <exclude/> This method is not included in the API .chm file.    
        </member>
        <member name="P:OutputMgr.Interface.AttributeCollectionException.MemberTypeName">
            <summary>
            Gets or sets the name of the member type.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeCollectionException.MemberPropertyName">
            <summary>
            Gets or sets the name of the collection member property with a problem 
            (for example, "PrintAttribute").
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.AttributeCollectionException.MemberIndex">
            <summary>
            Gets or sets the index of the collection member with a problem.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.DdaCommandCollectionException">
            <summary>
            The object generated to report a DDA command argument error for commands that are
            defined as a collection of objects.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandCollectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the constructor required for deserialization to occur if a class 
            supports the ISerialization Interface. (It complements the GetObjectData()
            method for serialization).
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the context parameter <paramref name="context"/>.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandCollectionException.#ctor(System.String,System.String,System.String,OutputMgr.Interface.DdaCommandType,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="namedAttributeType">The NamedAttribute's class.ToString()</param>
            <param name="namedAttributeName">The NamedAttribute object's Name value.</param>
            <param name="ddaItemName">The DdaItem object's Name value.</param>
            <param name="commandType">The DdaCommandType enumeration value which indicates
            which type of command generated the exception.</param>
            <param name="commandIndex">The index of the command within the DdaItem's Commands
            collection.</param>
            <param name="commandPropertyName">The DdaCommand property which has the problem.
            This can be empty if it is a general error with the command (i.e. An If command
            missing it's corresponding EndIf command.)</param>
            <param name="memberTypeName">The name of the member's type.</param>
            <param name="memberIndex">The index of the member with the problem.</param>
            <param name="memberPropertyName">The member property with the problem.</param>
            <param name="ddaOperandPropertyName">Name of the DdaOperand property with an error.
            </param>
            <param name="message">The error message.</param>
            <exclude/> This method is not included in the API .chm file.  
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandCollectionException.#ctor(System.String,System.String,System.String,System.String,OutputMgr.Interface.DdaCommandType,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="namedAttributeType">The NamedAttribute's class.ToString()</param>
            <param name="namedAttributeName">The NamedAttribute object's Name value.</param>
            <param name="ddaItemName">The DdaItem object's Name value.</param>
            <param name="referencingDdaName">Name of the Data Dependent Attribute that has
            a reference to attribute specifieed by <paramref name="namedAttributeName"/>
            that is in error.</param>
            <param name="commandType">The DdaCommandType enumeration value which indicates
            which type of command generated the exception.</param>
            <param name="commandIndex">The index of the command within the DdaItem's Commands
            collection.</param>
            <param name="commandPropertyName">The DdaCommand property which has the problem.
            This can be empty if it is a general error with the command (i.e. An If command
            missing it's corresponding EndIf command.)</param>
            <param name="memberTypeName">The name of the member's type.</param>
            <param name="memberIndex">The index of the member with the problem.</param>
            <param name="memberPropertyName">The member property with the problem.</param>
            <param name="ddaOperandPropertyName"></param>
            <param name="message">The error message.</param>
            <exclude/> This method is not included in the API .chm file.  
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandCollectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialziation Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file.  
        </member>
        <member name="M:OutputMgr.Interface.DdaCommandCollectionException.ToString">
            <summary>
            Overrides the base ToString() method used for tracing only.
            </summary>  
            <exclude/> This method is not included in the API .chm file.     
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandCollectionException.MemberTypeName">
            <summary>
            Gets or sets the name of the member type.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandCollectionException.MemberPropertyName">
            <summary>
            Gets or sets the name of the collection member property with a problem.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.DdaCommandCollectionException.MemberIndex">
            <summary>
            Gets or sets the index of the collection member with a problem.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.ServerConnection">
            <summary>
            Establishes a connection to the Output Manager service.
            This class allows external client programs to more easily use the Output Manager
            programmatic API.  
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.#ctor">
             <summary>Creates a new instance of the <see cref="T:OutputMgr.Interface.ServerConnection"/> class using default
             values for the server name, port and an unencrypted connection.</summary>
             <example>
             <para>The following C# example demonstrates connecting to the Output Manager service 
             using the default connection values.</para>
             <code>
               using OutputMgr.Interface;
               
               // Create instance for connection to "localhost", with default port number of 8086.
               ServerConnection sc = new ServerConnection();
               
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               IOutputManagerServer server = sc.Connect( out permissions );
            
               // Add client code here ...
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.#ctor(System.String)">
             <summary>Creates a new instance of the <see cref="T:OutputMgr.Interface.ServerConnection"/> class using the
             specified server and default values for all other connection parameters.</summary>
             <param name="eomServer">The name or IP address of the computer on which the
             Output Manager service resides.</param>
             <exception cref="T:System.ArgumentNullException">The <b>eomServer</b> parameter is null or empty.
             </exception>
             <example>
             <para>The following C# example demonstrates connecting to the Output Manager service 
             running on the server with IP address "222.222.222.222".</para>
             <code>
               using OutputMgr.Interface;
               
               // Create instance for connection to "222.222.222.222", with
               // default port number of 8086.
               ServerConnection sc = new ServerConnection( "222.222.222.222" );
               
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               IOutputManagerServer server = sc.Connect( out permissions );
            
               // Add client code here ...
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.#ctor(System.String,System.UInt32)">
             <summary>Creates a new instance of the <see cref="T:OutputMgr.Interface.ServerConnection"/> class using the
             specified server and port and an unencrypted connection.</summary>
             <param name="eomServer">The name or IP address of the computer on which the
             Output Manager service resides.</param>
             <param name="eomServerPort">The port number that the Output Manager service is
             using to listen for remote API requests.</param>
             <exception cref="T:System.ArgumentNullException">The <b>eomServer</b> parameter is null or empty.
             </exception>
             <example>
             <para>The following C# example demonstrates connecting to the Output Manager service 
             running on the server "eom1" using port number "1111".</para>
             <code>
               using OutputMgr.Interface;
               
               // Create instance for connection to "eom1", with
               // port number of 1111.
               ServerConnection sc = new ServerConnection( "eom1", 1111 );
               
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               IOutputManagerServer server = sc.Connect( out permissions );
            
               // Add client code here ...
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.#ctor(System.String,OutputMgr.Interface.ServerConnection.AuthenticationLevel)">
             <summary>Creates a new instance of the <see cref="T:OutputMgr.Interface.ServerConnection"/> class using the
             specified server and authentication and a default port.</summary>
             <param name="eomServer">The name or IP address of the computer on which the
             Output Manager service resides.</param>
             <param name="authentication">The desired level of authentication.</param>
             <example>
             <para>The following C# example demonstrates connecting to the Output Manager service 
             running on the server "eom1" requiring an encrypted connection.</para>
             <code>
               using OutputMgr.Interface;
               
               // Create instance for connection to "eom1", with
               // default port number of "8086" and authentication of "PacketPrivacy".
               ServerConnection sc = new ServerConnection( "eom1", 
                  OutputMgr.Interface.ServerConnection.AuthenticationLevel.PacketPrivacy );
               
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               IOutputManagerServer server = sc.Connect( out permissions );
            
               // Add client code here ...
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.#ctor(System.String,System.UInt32,OutputMgr.Interface.ServerConnection.AuthenticationLevel)">
             <summary>Creates a new instance of the <see cref="T:OutputMgr.Interface.ServerConnection"/> class using the
             specified server, port, and authentication.</summary>
             <param name="eomServer">The name or IP address of the computer on which the
             Output Manager service resides.</param>
             <param name="eomServerPort">The port number that the Output Manager service is
             using to listen for remote API requests.</param>
             <param name="authentication">The desired level of authentication.</param>
             <example>
             <para>The following C# example demonstrates connecting to the Output Manager 
             service running on the server "eom1" requiring an encrypted connection and a 
             port number of "1111".</para>
             <code>
               using OutputMgr.Interface;
               
               // Create instance for connection to "eom1", with
               // port number of "1111", authentication of "PacketPrivacy".
               ServerConnection sc = new ServerConnection( "eom1", 1111
                  OutputMgr.Interface.ServerConnection.AuthenticationLevel.PacketPrivacy );
               
               // Connect to the Output Manager service.
               string permissions = String.Empty;
               IOutputManagerServer server = sc.Connect( out permissions );
            
               // Add client code here ...
               
               // Disconnect from the Output Manager service.
               sc.Disconnect();
             </code>
             </example>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.GetEomUrl">
            <summary>Creates the URL that represents the location of the EOM server.
            This is required to create a .NET Remoting proxy for the server.</summary>
            <returns></returns>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.Connect(System.String@)">
            <summary>
            Establishes a unique client connection to the Output Manager service. A client 
            program uses the returned interface to obtain other interfaces in the Output Manager 
            object model. The permissions for the user are also returned so the client program 
            can determine which service functions are allowed for this user.
            </summary>
            <param name="xmlPermissions">The XML permissions which describe a 
            "OutputMgr.Server.SecurityPermissions" object. See the Output Manager 
            schema for more information.</param>
            <returns>An interface object that exposes the main Output Manager object model.</returns>
            <remarks>If an attempt is made to connect to an Output Manager 7.0 service, an
            exception of type <see cref="T:System.Runtime.Remoting.RemotingException"/> will be 
            returned.</remarks>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.Connect2(System.String@)">
            <summary>Creates the actual connection to the EOM server using the requested type
            of channel.</summary>
            <param name="xmlPermissions">The XML permissions which describe a 
            "OutputMgr.Server.SecurityPermissions" object. See the Output Manager 
            schema for more information.</param>
            <returns>Interface to the EOM server object model.</returns>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.CreateRemotingChannel">
            <summary>Create a Remoting channel using only code from the .NET Framework.</summary>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.Disconnect">
            <summary>
            Disconnects the client/server Remoting connection.  Clients must call this
            method when the server connection is no longer needed.  This method will dispose of
            all event registrations for the client so there is no need to do so explicitly.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.DisconnectRemoting">
            <summary>
            Close an active client connection to the Output Manager service.
            </summary>
            <remarks>This routine would be used when you want to activate/reconnect to 
            the same Output Manager service without defining another instance of this 
            <b>ServiceConnection</b> object. Normally when an object goes out of reference, then 
            any channels registered are also automatically deregistered. 
            </remarks>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.UnregisterRemotingChannel">
            <summary>Unregister any channels from the channel services.  Either the user
            has disconnected from the service or the connection failed.  In either case, the channels
            to the service are no longer needed.  The Microsoft implementation does not allow reuse
            of the channel objects.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.ServerConnection.ValidateAndSaveServerName(System.String)">
            <summary>
            Validates that the user has supplied a server name (or IP address).  If one was
            supplied, it is returned to the caller.  If not, an exception is thrown.
            </summary>
            <param name="eomServer">The server name (or IP address) supplied by the user.</param>
        </member>
        <member name="P:OutputMgr.Interface.ServerConnection.NormalTraceHandler">
            <summary>Users of this class should set this property if English trace
            information is desired for normal diagnostic trace information.</summary>
            <exclude>This property is not included in the API .chm file.</exclude>
        </member>
        <member name="P:OutputMgr.Interface.ServerConnection.VerboseTraceHandler">
            <summary>Users of this class should set this property if English trace
            information is desired for verbose diagnostic trace information.</summary>
            <exclude>This property is not included in the API .chm file.</exclude>
        </member>
        <member name="P:OutputMgr.Interface.ServerConnection.ServerInterface">
            <summary>Gets the <see cref="T:OutputMgr.Interface.IOutputManagerServer"/> object 
            that has been created by this instance. </summary>
        </member>
        <member name="T:OutputMgr.Interface.ServerConnection.AuthenticationLevel">
            <summary>
            Authentication level of the connection to the Output Manager service .
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ServerConnection.AuthenticationLevel.Connect">
            <summary>
            Service does not require encrypted connection. 
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ServerConnection.AuthenticationLevel.PacketPrivacy">
            <summary>
            Service requires encrypted connection. 
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.ServerConnection.SecurityProvider">
            <summary>
            The network security provider.  NTLM is the only value supported in EOM.
            </summary>
            <exclude/> This enum is not included in the API .chm file.
            Client connections using Kerberos security are not supported.
        </member>
        <member name="F:OutputMgr.Interface.ServerConnection.SecurityProvider.NTLM">
            <summary>
            
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ServerConnection.SecurityProvider.Kerberos">
            <summary>
            
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ServerConnection.SecurityProvider.Negotiate">
            <summary>
            
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.ServerConnection.VerboseTraceEventHandler">
            <summary>Allows verbose data to be written to diagnostic trace.</summary>
            <exclude/> This delegate is not included in the API .chm file.
        </member>
        <member name="T:OutputMgr.Interface.ServerConnection.NormalTraceEventHandler">
            <summary>Allows normal data to be written to diagnostic trace.</summary>
            <exclude/> This delegate is not included in the API .chm file.
        </member>
        <member name="T:OutputMgr.Interface.enumEmailError">
            <summary>
            Enumeration representing e-mail errors.
            </summary>
            <remarks>
            Public enumeration that uniquely identifies all the errors that are associated with the 
            EOM service expansion client, external client, and the internal SMTP client.
            </remarks>
            <exclude/> This enumeration is not included in the API .chm file.
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.None">
            <summary>No error</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.XmlError">
            <summary>Error in the XML.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.LookupAgentDisabled">
            <summary>Lookup agent is disabled.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.ReceiveAgentDisabled">
            <summary>Receive agent is disabled.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.CreateProviderObjectError">
            <summary>The method(s) to create the provider object from the original
            e-mail job failed.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.AgentSuspended">
            <summary>Agent suspended.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.RegisterUnavailable">
            <summary>The EOM service can only handle one register request at a time. This register 
            call failed because one is already pending.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SendErrorSuspend">
            <summary>The CDO send failed and the e-mail job should not be disabled. In
            addition, the expansion interface is automatically suspended until other notification.
            The assumption is that the problem is with the CDO provider.
            <para>Note that this behavior is similar to 6.1.2 and was implemented based on a 
            discussion with Erik.</para>
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SendErrorDisable">
            <summary>The CDO/SMTP send failed and the e-mail job should be disabled. The 
            assumption is that the problem is with the e-mail job, thus the interface to the migration
            agent is not suspended.
            <para>Note that this behavior is similar to 6.1.2 and was implemented based on a 
            discussion with Erik.</para>
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SendErrorUnresolvedRecipients">
            <summary>The send could not occur because of unresolved recipients and
            could not send to the error recipients because there were none.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.AgentException">
            <summary>Indicates an exception occurred in the agent.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.BadEmailJob">
            <summary>Indicates that the error occurred when creating the EmailMessage object from
            the e-mail job. The assumption made in HandleSendError() is that the error is with
            the sending
            and not with the specific e-mail job. An alert is sent indicating that sending has been
            disabled. The alert help gives additional details from the exception. One options for the
            user is to manually disable the e-mail job in case the problem is e-mail job related.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.FileException">
            <summary>Indicates that the error occurred when accessing one of the files associated 
            with the e-mail job. This problem is with the specific e-mail job and does not affect 
            either the EOM service or the external e-mail client. The e-mail job is disabled.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SmtpSendError">
            <summary>An SMTP sending error occurred.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SmtpNoEnabledOrValidServer">
            <summary>
            The SMTP send failed because the SMTP server(s) were either all disabled or otherwise
            invalid.  When this status is returned, the scheduling of e-mail jobs will pause for
            a short time.  The e-mail job is not disabled since there is nothing specific that would
            indicate the job itself is causing a problem.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SmtpRetryCondition">
            <summary>
            The SMTP send failed; however, the error indicates that it is server/connection
            related problem that may clear up eventually.  When this status is returned, the
            scheduling of e-mail jobs will be paused for a short time.  The e-mail job is not
            disabled since there is nothing specific that would indicate the job itself is
            causing a problem.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.AgentMultipleCall">
            <summary>The interfaces can only handle one call at a time. This exception is thrown
            when a second call is received when one is still active. This error should never occur
            because it usually indicates a programming error. The caller should handle this error
            by retrying (not immediately) the call.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.UnregisteredInterface">
            <summary>The interface used is no longer the registered. One example is
            when the client reregistered at the same time as the EOM service made the interface call.
            When received, the caller should take any action necessary to allow the reregister to 
            complete.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SentErrorNotification">
            <summary>Indicates that the e-mail message was sent to the error recipients, most likely 
            because of bad recipients.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.ReceiveErrorSuspend">
            <summary>The migration agent encountered an error during an e-mail receive
            operation. The error is serious enough to suspend the migration agent and retry the 
            connection to the email provider. Note that the main purpose of this error is to generate 
            an alert. </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.ReceiveErrorDisable">
            <summary>The migration agent encountered an error during an e-mail receive
            operation. The error is serious enough to disable e-mail receiving. An alert is sent 
            regarding this problem.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SchedulingStopped">
            <summary>Indicates that the scheduling of e-mail jobs has stopped in the EOM service. 
            When received on a register, the external e-mail client should retry the register after
            a short wait. When recieved on a NotifyError(), then the external e-mail client should
            unregister and then retry the register after a short wait.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SmtpBadRecipients">
            <summary>Indicates that the SMTP send could not be done because the recipients failed the
            simple check. If it occurs when sending to the normal recipients, the send is then 
            attempted using the external agent (if configured). Else, retry the send using the error
            recipients. If this error occurs when sending to the error recipients, then the mail job
            is disabled.</summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.SmtpFailedRecipientsException">
            <summary>
            A <see cref="F:OutputMgr.Interface.enumEmailError.SmtpFailedRecipientsException"/> occurred on the SMTP send call.  This
            means that the message could not be delivered to one or more, but not necessarily all, 
            of the recipients.  If this error occurs, an alert should be issued listing the failed
            recipients and the job disabled.  It is not considered acceptable to return using the
            external agent because that could result in duplicate e-mails being sent by us.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.ReceiveToServiceError">
            <summary>Indicates that the attempt to forward the received email message to the service
            failed. If this error occurs, then the service and/or migration agent is notified of the
            error. An enhancement is to save the details for the lost message for later on.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.AttachmentErrorSuspend">
            <summary>Indicates that the service encountered an error when working with an email job
            attachment and the error was such that the scheduling of email jobs should be suspended.
            It is the responsibility of a user to address the problem and manually reenable 
            scheduling.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.enumEmailError.AttachmentErrorDisable">
            <summary>Indicates that the service encountered an error when working with an email job
            attachment and the error was such that the email job should be disabled.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.EmailException">
            <summary>
            This is a custom exception for EOM e-mail namespace and is used within both the service and 
            the agent. 
            </summary>
            <remarks>The property,ParamName, of the base exception class (ArgumentException) is designed 
            to hold the name identifying the parameter causing the problem (as described in the message).  
            This fits the intent of any Eom client and server interaction for adding/updating attributes 
            to the server, however, .NET takes the information in the parameter and appends it to the 
            message also contained in the base class.  The message then gets displayed in the locale of 
            the end user. This text will not match the display text used by the Eom client to identify 
            the property in the users displayed window.  Therefore, this custom derived class is used to 
            accomplish the same function as the ArgumentException class but without appending this 
            information to the message text. In this derived class, no property name is passed to the 
            base ArgumentException class, therefore nothing is appended to the localized message to be 
            displayed to the user.  The ArgumentException class is then used only to hold the message 
            describing the error.  The intent is for this class to hold the property name information 
            and the Eom client must extrace it from from this class.  Before displaying the message
            text to the end user, it uses this information to find the resource which will identify the 
            property in end user terms (as displayed in the clients window(s)). This resource should be 
            appended to the error text so that the end user can identify the property of the attribute 
            causing the error.
            
            Important: Since the root base class for this class is <seealso cref="T:System.Exception"/>
            which implements the ISerializable interface, all derived classes in the hierarchy must 
            implement this interface. This class must then perform serialization on any data memebers 
            defined. To do this it implements the ISerialize interface method 
            <seealso cref="M:OutputMgr.Interface.EmailException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>. If the ISerialization Interface is supported by the class, 
            the .NET deserialization process then expects that this class must deserialize using a 
            constructor specifically designed for using the same information used to serialize
            the class.  See the constructor utilizing the SerializationInfo and StreamingContext 
            parameters (used by the ISerializable Interface method (GetObjectData)).</remarks>
            <exclude/> This class is not included in the API .chm file. 
        </member>
        <member name="F:OutputMgr.Interface.EmailException.COR_E_APPLICATION">
            <summary>
            Default HRESULT for the ApplicationException object upon construction.  If the
            HRESULT remains this value, then we know it wasn't set to a CDO 1.21 COM HRESULT
            and as such is not meaningful to display.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_alertHelp">
            <summary>Identifies the alert help text</summary>
            <remarks>
            The value is the alert help text for the alert. As with all alert help, this string value 
            is not localizable. Note that the intent is to always set the alert help with the details
            from the situation.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_alertLine">
            <summary>Identifies the alert line text</summary>
            <remarks>
            The value is the alert line text for the alert.  This field is not always set. In those 
            cases, the EOM service is responsible for setting the alert line. This string value is
            localizable and must come from a string resource file.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_alertQualifier">
            <summary>Identifies the alert qualifier</summary>
            <remarks>
            The value is the qualifier for the alert. This field is not set if the EOM service is.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_eventLine">
            <summary>Identifies the text for the event</summary>
            <remarks>
            The value is the text for the event message associated with this exception object. The
            string must always be from a resource file that is subject to localization. An empty 
            string indicates that there is not an event. The value in this field is used with the
            value in the field <see cref="F:OutputMgr.Interface.EmailException.m_eventSeverity"/>. Note that the default severity is
            "informational" if not set.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_traceLine">
            <summary>Identifies the trace line text</summary>
            <remarks>
            The value is the text to be traced.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_alertSeverity">
            <summary>Severity of the alert</summary>
            <remarks>
            The value is the severity of the alert. This field is not always set. In those cases, 
            the EOM service is responsible for setting the severity.
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_alertId">
            <summary>Alert identifier</summary>
            <remarks>
            The value is the alert identifier. This field is not always set. In those cases, the EOM
            service is responsible for setting the identifier. 
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_emailError">
            <summary></summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:OutputMgr.Interface.EmailException.m_eventSeverity">
            <summary>The severity associated with the event.</summary>
            <remarks>
            Identifies the severity for the event whose text is found in <see cref="F:OutputMgr.Interface.EmailException.m_eventLine"/>. 
            This field is only meaningful if an event string is specified. The default severity
            is "informational".
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.EmailException.#ctor">
            <summary>Default constructor for the EmailException object</summary>
        </member>
        <member name="M:OutputMgr.Interface.EmailException.#ctor(System.String,System.Exception)">
            <summary>Create new object specifying the message and the inner exception</summary>
            <param name="message">Identifies the message for the exception. This parameter can be null
            or String.Empty.</param>
            <param name="ex">Identifies the inner exception for the EmailException object. This 
            parameter can be null.</param>
        </member>
        <member name="M:OutputMgr.Interface.EmailException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor required for deserialization</summary>
            <remarks>
            Implements the constructor required for deserialization to occur if a class 
            supports the ISerialization Interface. (It complements the GetObjectData()
            method for serialization).
            </remarks>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the context parameter <paramref name="context"/>.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.EmailException.AssignFormattedException(System.Exception)">
            <summary></summary>
            <remarks>
            
            </remarks>
            <param name="exOuter"></param>
        </member>
        <member name="M:OutputMgr.Interface.EmailException.GetFormattedExceptionForAlertHelp(System.Text.StringBuilder,System.Exception)">
            <summary>Get details for the alert help on the exception</summary>
            <remarks>
            This static method is used to append the messages from inner exceptions to the end of the
            StringBuilder object specified in the parameter.
            </remarks>
            <param name="formattedException">Identifies the StringBuilder object where the 
            formatted text for an alert help is appended. This value must be specified and cannot
            be null.</param>
            <param name="exOuter">Identifies the exception object to process. If the object is an
            <see cref="T:OutputMgr.Interface.EmailException"/>, the assume that the inner exceptions have already been 
            processed and the text is located in <paramref name="formattedException"/>. Otherwise,
            process each of the inner exceptions and append the message with a CRLF between the
            exceptions.</param>
        </member>
        <member name="M:OutputMgr.Interface.EmailException.GetFormattedExceptionForTrace(System.Text.StringBuilder,System.Exception)">
            <summary>Get details for the trace on the exception</summary>
            <remarks>
            This static method is used to append the messages from inner exceptions to the end of the
            StringBuilder object specified in the parameter.
            </remarks>
            <param name="formattedException">Identifies the StringBuilder object where the 
            formatted text for the trace is appended. This value must be specified and cannot
            be null.</param>
            <param name="exOuter">Identifies the exception object to process. If the object is an
            <see cref="T:OutputMgr.Interface.EmailException"/>, the assume that the inner exceptions have already been 
            processed and the text is located in <paramref name="formattedException"/>. Otherwise,
            process each of the inner exceptions and append the message with a CRLF between the
            exceptions.</param>
        </member>
        <member name="M:OutputMgr.Interface.EmailException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Serialize the data members used within this class</summary>
            <remarks>
            Implements the only method defined for the ISerialziation Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </remarks>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.EmailException.ToString">
            <summary>
            Overrides the base ToString() method used for traceing only.
            </summary>     
        </member>
        <member name="P:OutputMgr.Interface.EmailException.AlertHelp">
            <summary>Get or set the alert help property of the alert</summary>
            <remarks>
            The alert help property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_alertHelp"/>. Note that this
            property is only meaningful if the instance includes an alert.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.AlertId">
            <summary>Get or set the alert id property of the alert</summary>
            <remarks>
            The alert id property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_alertId"/>. Note that this
            property is only meaningful if the instance includes an alert.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.AlertLine">
            <summary>Get or set the alert line property of the alert</summary>
            <remarks>
            The alert line property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_alertLine"/>. Note that this
            property is only meaningful if the instance includes an alert.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.AlertQualifier">
            <summary>Get or set the qualifier property of the alert</summary>
            <remarks>
            The qualifier property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_alertQualifier"/>. Note that this
            property is only meaningful if the instance includes an alert.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.AlertSeverity">
            <summary>Get or set the severity property of the alert</summary>
            <remarks>
            The severity property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_alertSeverity"/>. Note that this
            property is only meaningful if the instance includes an alert.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.EmailError">
            <summary>Get or set the email error property</summary>
            <remarks>
            The email error property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_emailError"/>.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.EventLine">
            <summary>Get or set the text for the event</summary>
            <remarks>
            The event line property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_eventLine"/>.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.EventSeverity">
            <summary>Get or set the severity property of the event</summary>
            <remarks>
            The severity property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_eventSeverity"/>. Note that this
            property is only meaningful if the <see cref="P:OutputMgr.Interface.EmailException.EventLine"/> property is set.
            <para>Special code is provided to return the default value of "Informational" when not
            set.</para>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.FormattedInnerExceptionsForAlert">
            <summary>
            
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.FormattedInnerExceptionsForTrace">
            <summary>
            
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.IsHResultSet">
            <summary>
            Gets a value indicating whether the HResult property has been set to a value
            other than the default value used by the base ApplicationException class.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.HResult">
            <summary>
            Gets or sets the HResult associated with the error, which is currently only
            applicable to the CDO 1.21 e-mail interface used by the Legacy Interface
            assistant.
            </summary>
            <remarks>
            The 'new' modifier is used to hide the base class property 
            <see cref="P:System.Exception.HResult"/>, which initializes the HResult
            to 0x80131600.  This class initializes its HResult field to 0 to denote that
            there is no corresponding HResult to display in alert and/or trace messages.
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.IsEmailErrorSmtpBadRecipients">
            <summary>
            Gets a value indicating whether the underlying error associated with this exception
            is due to e-mail addresses not being in proper SMTP format.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.EmailException.TraceLine">
            <summary>Get or set the text for the trace line</summary>
            <remarks>
            The trace line property is in the field <see cref="F:OutputMgr.Interface.EmailException.m_traceLine"/>.
            </remarks>
        </member>
        <member name="T:OutputMgr.Interface.ErrorCollection">
            <summary>
            Represents a class that contains a collection of errors and/or warnings that the
            callee returns to the caller for a given request.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.ErrorCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.ErrorCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            from which to deserialize data from to create this object.</param>
            <param name="context">Describes the source of the serialized stream (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>).</param>
        </member>
        <member name="M:OutputMgr.Interface.ErrorCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialization Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.</param>
            <param name="context">The destination for this serialization (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>).</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ErrorCollection.ToRichTextBox(System.String,System.String,System.Windows.Forms.RichTextBox)">
            <summary>
            Provides simple formatting of the error and warning messages into a
            <see cref="T:System.Windows.Forms.RichTextBox"/> control.
            </summary>
            <param name="errorTextHeading">An optional heading to precede error messages.
            Specify <c>null</c> or an empty string if no heading preceding
            the error messages
            is desired.</param>
            <param name="warningTextHeading">An optional heading to precede warning messages.
            Specify <c>null</c> or an empty string if no heading preceding
            the warning messages is desired.</param>
            <param name="richTextBox">The <see cref="T:System.Windows.Forms.RichTextBox"/>
            to update with the formatted error and warning messages.</param>
            <remarks>
            <para>
            The error and warning text headings are only inserted if there are errors and
            warnings, respectively.  If a heading is inserted, the respective messages are
            inserted following the heading as indented items.
            </para>
            <para>
            All error and warning messages are are listed as bulleted items unless there
            is only one message to format for each respective heading or there is only
            one message total and no headings at all.
            </para>
            <para>
            Specifying text for parameter <paramref name="errorTextHeading"/> and <c>null</c>
            for parameter <paramref name="warningTextHeading"/> results in both the errors
            and warnings being listed as indented items under the text heading given
            by <paramref name="errorTextHeading"/>.
            </para>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.ErrorCollection.ContainsErrors">
            <summary>
            Gets a value indicating whether the collection contains one or more entries
            that are classified as errors.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.ErrorCollection.ContainsOnlyWarnings">
            <summary>
            Gets a value indicating whether the collection contains only entries that
            are classified as warnings.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.ErrorCollection.CountOfErrors">
            <summary>
            Gets the count of entries in the collection that are classified as errors.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.ErrorCollection.CountOfWarnings">
            <summary>
            Gets the count of entries in the collection that are classified as warnings.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.ErrorDetail">
            <summary>
            The base object representing detail for a single error reported by the
            <see cref="T:OutputMgr.Interface.ErrorCollection"/> object.  All objects
            added to the collection are of this type or are derived from this type.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.ErrorDetail.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            from which to deserialize data from to create this object.</param>
            <param name="context">Describes the source of the serialized stream (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>).</param>
        </member>
        <member name="M:OutputMgr.Interface.ErrorDetail.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">A text message describing the error encountered.</param>
            <remarks>
            The error type defaults to <see cref="F:OutputMgr.Interface.ErrorDetail.ErrorType.Error"/>
            </remarks>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ErrorDetail.#ctor(System.String,OutputMgr.Interface.ErrorDetail.ErrorType)">
            <summary>
            Constructor.
            </summary>
            <param name="message">A text message describing the error encountered.</param>
            <param name="typeOfError">An <see cref="T:OutputMgr.Interface.ErrorDetail.ErrorType"/>
            value specifying the type of error this object describes.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ErrorDetail.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override of <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for serializing the data of
            this object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            top populate with data.</param>
            <param name="context">The destination for this serialization (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>).</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ErrorDetail.ToString">
            <summary>
            Overrides the base ToString() method used for tracing only.
            </summary>  
            <exclude/> This method is not included in the API .chm file.   
        </member>
        <member name="P:OutputMgr.Interface.ErrorDetail.TypeOfError">
            <summary>
            Gets or sets the type of error associated with this object.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.ErrorDetail.Message">
            <summary>
            Gets or sets the detailed message describing the error associated with this object.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.ErrorDetail.IsError">
            <summary>
            Gets a value indicating whether this object represents an error.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.ErrorDetail.IsWarning">
            <summary>
            Gets a value indicating whether this object represents a warning.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.ErrorDetail.ErrorType">
            <summary>
            Enumeration for the type of error represented by the object.  By definition,
            errors imply that the change was not made while warnings are used to describe
            abnormalities that by themselves do not prevent the change.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ErrorDetail.ErrorType.Warning">
            <summary>
            The collection contains one or more warnings.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.ErrorDetail.ErrorType.Error">
            <summary>
            The collection contains one or more errors that prevented the change from
            being made.  Warnings may also exist in the collection.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.ParameterErrorDetail">
            <summary>
            An object, derived from <see cref="T:OutputMgr.Interface.ErrorDetail"/>, that details
            an error or warning that is particular to a specific method parameter and optionally
            a property of the method parameter if the parameter is an object with properties.
            </summary>
        </member>
        <member name="M:OutputMgr.Interface.ParameterErrorDetail.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            from which to deserialize data from to create this object.</param>
            <param name="context">Describes the source of the serialized stream (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>).</param>
        </member>
        <member name="M:OutputMgr.Interface.ParameterErrorDetail.#ctor(System.String,System.String)">
            <summary>
            Construtor.
            </summary>
            <param name="parameterName">The name of the method parameter for which this
            object is created to report a problem.</param>
            <param name="message">Holds the text message describing problem that triggered the problem.</param>
            <remarks>
            The error type defaults to <see cref="F:OutputMgr.Interface.ErrorDetail.ErrorType.Error"/>
            </remarks>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ParameterErrorDetail.#ctor(System.String,System.String,OutputMgr.Interface.ErrorDetail.ErrorType)">
            <summary>
            Constructor.
            </summary>
            <param name="parameterName">The name of the method parameter for which this
            object is created to report a problem.</param>
            <param name="message">Holds the text message describing problem that triggered the problem.</param>
            <param name="typeOfError">An <see cref="T:OutputMgr.Interface.ErrorDetail.ErrorType"/>
            value specifying the type of error this object describes.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ParameterErrorDetail.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="parameterName">The name of the method parameter for which this
            object is created to report a problem.</param>
            <param name="propertyName">The name of the property associated with the
            parameter for which this problem is being reported.  If the parameter is
            not an object with properties, then by definition the property name should
            be set to null or an empty string.</param>
            <param name="message">Holds the text message describing problem that triggered the problem.</param>
            <remarks>
            The error type defaults to <see cref="F:OutputMgr.Interface.ErrorDetail.ErrorType.Error"/>
            </remarks>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ParameterErrorDetail.#ctor(System.String,System.String,System.String,OutputMgr.Interface.ErrorDetail.ErrorType)">
            <summary>
            Constructor.
            </summary>
            <param name="parameterName">The name of the method parameter for which this
            object is created to report a problem.</param>
            <param name="propertyName">Holds the name of the property the problem applies to.</param>
            <param name="message">Holds the text message describing problem that triggered the problem.</param>
            <param name="typeOfError">An <see cref="T:OutputMgr.Interface.ErrorDetail.ErrorType"/>
            value specifying the type of error this object describes.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ParameterErrorDetail.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialization Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.ParameterErrorDetail.ToString">
            <summary>
            Overrides the base ToString() method used for tracing only.
            </summary>  
            <exclude/> This method is not included in the API .chm file.   
        </member>
        <member name="P:OutputMgr.Interface.ParameterErrorDetail.ParameterName">
            <summary>
            Gets or sets the method parameter name for which this object was created to
            describe a problem.
            </summary>
        </member>
        <member name="P:OutputMgr.Interface.ParameterErrorDetail.PropertyName">
            <summary>
            Gets or sets the property name associated with the parameter for which this
            object was created to describe a problem.  If the parameter is not an object
            or the problem is not related to a property, the value is null or the empty
            string.
            </summary>
        </member>
        <member name="T:OutputMgr.Common.Constants">
            <summary>
            This class contains only constant values to be used throughout the product to
            avoid duplication and provide easy maintenance.
            </summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.DefaultPort">
            <summary>The default port number to connect to the service.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.LocalHost">
            <summary>The default host name.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.ServiceName">
            <summary>The name of the EOM service. Value used to create the SPN</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.HelpFileMain">
            <summary>Main Output Manager help file name.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.HelpTopicConfigUtility">
            <summary>Configuration Utility topic in the main help file.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.HelpTopicReportProblem">
            <summary>Report Problem topic in the main help file.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.HelpTopicMigrationAgent">
            <summary>Migration Agent topic in the main help file.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.HelpTopicLogViewer">
            <summary>Log Viewing topic in the main help file.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.HelpFileAlertExplorer">
            <summary>Main Alert Explorer help file name.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.HelpFileAlertFilter">
            <summary>Alert Explorer's filter help file name.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.HelpFileAlertPolicy">
            <summary>Alert Explorer's policy editor help file name.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.FolderData">
            <summary>Name of the folder where the configuration files are.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.FolderEmail">
            <summary>Name of the folder where the email attachment files are.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.FolderHelp">
            <summary>Name of the folder where the help files are.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.FolderLogFiles">
            <summary>Name of the folder where the log files are.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.FolderPrintControl">
            <summary>Name of the folder where the command files are.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.FolderPrintHold">
            <summary>Name of the folder where the print hold files are.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.ProgramDataSubFolder">
            <summary>
            The relative subfolder where the application/program specific data is placed.
            This is a subfolder of folder <see cref="F:System.Environment.SpecialFolder.CommonApplicationData"/>.
            </summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.FolderPrinterDebug">
            <summary>Name of the folder where the printer debug files are.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.FolderTrace">
            <summary>Name of the folder where the trace files are.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.SubFolderPrintTemp">
            <summary>Name of the subfolder under the system temporary folder where temporary
            files when printing to an output file.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.SubFolderTransforms">
            <summary>Name of the subfolder under the system temporary folder where intermediate 
            files are created for transforms jobs.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.DirAliasCommandFile">
            <summary>Name of the command files Directory Alias.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.DirAliasEmail">
            <summary>Name of the e-mail Directory Alias.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.DirAliasHelpFile">
            <summary>Name of the help Directory Alias.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.DirAliasLogFile">
            <summary>Name of the log files Directory Alias.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.DirAliasPrintHold">
            <summary>Name of the print hold Directory Alias.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.UnisysHomePage">
            <summary>Unisys home page.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.UnisysSupportPage">
            <summary>Unisys support page.</summary>
        </member>
        <member name="F:OutputMgr.Common.Constants.UnisysECommunityPage">
            <summary>Unisys E-community page.</summary>
        </member>
        <member name="T:OutputMgr.Interface.AttributeArgumentXmlException">
            <summary>The object generated to report an attribute argument XML error.</summary>
            <remarks>The property 
            <see cref="P:OutputMgr.Interface.AttributeArgumentException.PropertyName"/>
            hold the name the parameter causing the problem.</remarks>
            
        </member>
        <member name="M:OutputMgr.Interface.AttributeArgumentXmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the constructor required for deserialization to occur if a class 
            supports the ISerialization Interface. (It complements the GetObjectData()
            method for serialization).
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the context parameter <paramref name="context"/>.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
        </member>
        <member name="M:OutputMgr.Interface.AttributeArgumentXmlException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Implements the derived constructor required to support this class
            </summary>
            <param name="type">Will always be null(N/A).</param>    
            <param name="name">will always be null(N/A).</param>
            <param name="propertyName">Identifies the xml entry index of the particular
            Xml string that could not be serialized. If null, means the string array
            of Xml entries was null.</param>
            <param name="msg">Holds the text message describing the problem.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="M:OutputMgr.Interface.AttributeArgumentXmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the only method defined for the ISerialziation Interface. This method 
            is responsible for serializing the data members used within this class. It calls
            the corresponding method in the base class in order for serialization to take 
            place in the base class as well.
            </summary>
            <param name="info">Holds the information about what/where values are held for 
            serializing in the <paramref name="context"/> parameter.</param>
            <param name="context">Holds values for serialization/deserialization of data members
            for this class.</param>
            <exclude/> This method is not included in the API .chm file.
        </member>
        <member name="T:OutputMgr.Interface.AttributeErrorType">
            <summary>
            Enumeration for the type of error represented by the object.  Syntax is the
            most common setting.  The reference settings are used to
            distinguish between reference-to and reference-by problems.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AttributeErrorType.Syntax">
            <summary>
            The property named in <see cref="P:OutputMgr.Interface.AttributeArgumentException.PropertyName"/> 
            has a syntax error.  Possible syntax errors include: a numeric value being
            out of range or specifying an invalid keyword.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AttributeErrorType.ReferenceAdd">
            <summary>
            Cannot add/save because the attribute references another attribute or another
            attribute references an entity of this attribute that no longer exists (such
            as a DDA Call Item).
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AttributeErrorType.ReferenceDelete">
            <summary>
            Cannot delete because the attribute is referenced by another attribute
            or a file entry in the file database.
            </summary>
        </member>
        <member name="F:OutputMgr.Interface.AttributeErrorType.Warning">
            <summary>
            Add/Save/Delete was successful, but a warning exists.
            </summary>
        </member>
        <member name="T:OutputMgr.Interface.FileMaskExtension">
            <summary>
            <para>
            Provides a class that can be used to produce an XML string containing elements that 
            are used to supply a file mask definition through either the
            <see cref="M:OutputMgr.Interface.ICreateTask.CreateJobViaFileMask(System.String,System.String)"/> method or supplied via
            the custom File-Mask-Extension header with an HTTP request.
            </para>
            </summary>
            <remarks>
            Output Manager uses the invariant culture to extract the values specified in the File
            Mask Extension XML string.  The invariant culture is culture-insensitive, that is, it
            is associated with the English language but not with any country/region.
            
            Copyright © 2010 Unisys Corporation
             All rights reserved.
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.FileMaskExtension.GetFileMaskExtension(System.String)">
            <summary>
            Constructs the object by deserializing the input XML string into a
            <see cref="T:OutputMgr.Interface.FileMaskExtension"/> object.
            </summary>
            <param name="xml">An XML string that represents a
            <see cref="T:OutputMgr.Interface.FileMaskExtension"/>.</param>
            <returns>
            A <see cref="T:OutputMgr.Interface.FileMaskExtension"/> created by deserializing <paramref name="xml"/>.
            </returns>
            <remarks>
            The specified XML string is converted to an object using the invariant culture, which
            is culture-insensitive. The invariant culture is associated with the English language
            but not with any country/region.
            </remarks>
        </member>
        <member name="M:OutputMgr.Interface.FileMaskExtension.SerializeAsXml">
            <summary>
            Serializes this object into a culture-invariant XML string.
            </summary>
            <returns>
            A serialized object represented as an XML string.
            </returns>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.ContentType">
            <summary>
            Specifies the content or media type associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 256 Unicode characters (longer values will be truncated
                 by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Content Type</b> field name used in file mask
                 filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>ContentType</b> keyword used in keyword
                 substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$ContentType</b> Data Dependent Attribute (DDA)
                 system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.DirectoryMonitor">
            <summary>
            Specifies the name of the Directory Monitor that processed the file.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>It corresponds to the <b>Directory Monitor</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>DirectoryMonitorName</b> keyword used in keyword 
            substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$DirectoryMonitorName</b> Data Dependent Attribute 
            (DDA) system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.EstimatedPages">
            <summary>
            Specifies the estimated pages in the print file.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>It corresponds to the <b>EstimatedPages</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.FileCodePage">
            <summary>
            Specifies the code page associated with the file.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>It corresponds to the <b>File Code Page</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.FileType">
            <summary>
            Specifies the print file type (for example, ASCII, PASSTHRU, or ShiftJIS).
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>The value must be a string variation of type <see ref = 
            "OutputMgr.Interface.FileType"/>.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>File Type</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostAccount">
            <summary>
            Specifies an account number to be associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 17 Unicode characters (longer values will be
            truncated by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Account</b>, <b>Charge Code</b>, and
            <b>Receiving Path</b> field names used in file mask filtering and the management 
            window filtering and display.  
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Account</b> and <b>ChargeCode</b> keywords
            used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostAccount</b> and <b>$ChargeCode</b> 
            Data Dependent Attribute (DDA) system variables.  
              </description>
              </item>
              <item>
              <description>The Output Manager server overlays this property with the
            <see cref="P:OutputMgr.Interface.FileMaskExtension.JobName"/> property.  This property always takes precedence.
            If it is specified, the <b>JobName</b> property is ignored.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostBannerID">
            <summary>
            Specifies a banner-id to be associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 17 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Banner ID</b> field name used in file mask
            filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Banner</b> keyword used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostBannerId</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostFileCreateDate">
            <summary>
            Specifies the host file create date to be associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>The date should be specified using the invariant culture format
            "MM/dd/yyyy" if the data or file will subsequently be transferred to another Output
            Manager server using the Output Manager protocol or if it will be written to an
            information (.inf) file for posting to the Web Assistant or another application.  If
            it is not specified in a format that can be parsed using the invariant culture, then
            an empty string will be used when forwarding the date to another Output Manager
            server or writing it to the information (.inf) file.
              </description>
              </item>
              <item>
              <description>Maximum length is 50 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Create Date</b> field name used in the
              management window displays and the header/trailer page configuration.
            filtering and display.  
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>FileAsgDate</b> keyword used in keyword
              substitution.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostFileCreateTime">
            <summary>
            Specifies the host file create time to be associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>The time should be specified using the invariant culture format
            "HH:mm:ss" if the data or file will subsequently be transferred to another Output
            Manager server using the Output Manager protocol or if it will be written to an
            information (.inf) file for posting to the Web Assistant or another application.  If
            it is not specified in a format that can be parsed using the invariant culture, then
            an empty string will be used when forwarding the time to another Output Manager
            server or writing it to the information (.inf) file.
              </description>
              </item>
              <item>
              <description>Maximum length is 50 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Create Time</b> field name used in the
              management window displays and the header/trailer page configuration.
            filtering and display.  
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>FileAsgTime</b> keyword used in keyword
              substitution.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostFileName">
            <summary>
            Specifies a host file name to be associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 17 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host File Name</b>, <b>Attachment Name</b>, and
            <b>File Node B</b> field names used in file mask filtering and the management window 
            filtering and display.  
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Filename</b>, <b>MailAttName</b>, and <b>FileNodeB</b>
            keywords used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostFilename</b>, <b>$MailAttName</b>, and 
            <b>$FileNodeB</b> Data Dependent Attribute (DDA) system variables.  
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostFullFileName">
            <summary>
            Specifies a full or original host file name to be associated with the data or file
            being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 132 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Full File Name</b> field name used in file mask
              filtering and the management window filtering and display.  
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>OrigFilename</b> keywords used in keyword
              substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostFullFilename</b> Data Dependent Attribute (DDA)
              system variable.  
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostPaperType">
            <summary>
            Specifies the paper type received from the host.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>It corresponds to the <b>Host Paper Type</b> field name used in file mask
            filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>PaperType</b> keyword used in keyword 
            substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$PaperType</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostPriority">
            <summary>
            Specifies the print file priority.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 1 Unicode character (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Priority</b> field name used in file mask 
            filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostPriority</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostProject">
            <summary>
            Specifies a project identifier to be associated with the file.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 17 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Project</b> and <b>Note Project</b> field 
            names used in file mask filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Project</b> and <b>NoteProject</b> keywords 
            used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostProject</b> and <b>$NoteProject</b> 
            Data Dependent Attribute (DDA) system variables.
              </description>
              </item>
              <item>
              <description>The Output Manager server overlays this property with the
            <see cref="P:OutputMgr.Interface.FileMaskExtension.JobClass"/> property.  This property always takes precedence.
            If it is specified, the <b>JobClass</b> property is ignored.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostQualifier">
            <summary>
            Specifies the source qualifier name.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 17 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Qualifier</b> and <b>File Node A</b> field 
            names used in file mask filtering and the management window filtering and display.  
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Qualifier</b> and <b>FileNodeA</b> keywords 
            used in keyword substitution.  
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostQualifier</b> and <b>$FileNodeA</b> Data 
            Dependent Attribute (DDA) system variables.  
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostQueue">
            <summary>
            Specifies a host queue to be associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 31 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Queue</b>, <b>Destination</b>, <b>Server Queue</b>
            and field names used in file mask filtering and the management window filtering and display. 
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>HostQueue</b> keyword used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostQueue</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostRunID">
            <summary>
            Specifies a run identifier to be associated with the file.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 12 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host Run ID</b> and <b>Mix Number</b> field names 
            used in file mask filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>RunID</b> and <b>MixNumber</b> keywords used in 
            keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostRunId</b> and <b>$MixNumber</b> 
            Data Dependent Attribute (DDA) system variables.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostSystem">
            <summary>
            Specifies a host system name to be associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 45 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host System</b> and <b>File Server</b> field 
            names used in file mask filtering and the management window filtering and display.  
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>HostSys</b> keyword used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostSystem</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
              <item>
              <description>The Output Manager server overlays this property with the
            <see cref="P:OutputMgr.Interface.FileMaskExtension.IPAddress"/> property.  This property always takes precedence.
            If it is specified, the <b>IPAddress</b> property is ignored.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.HostUserID">
            <summary>
            Specifies a user identifier to be associated with the file.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 17 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Host User ID</b> and <b>User Code</b> field names
            used in file mask filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>UserID</b> keyword used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$HostUserId</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.IPAddress">
            <summary>
            Specifies the IP address of a simple TCP/IP host system.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 45 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>IP Address</b> field name used in file mask
            filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$IPAddress</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
              <item>
              <description>The Output Manager server overlays this property with the
            <see cref="P:OutputMgr.Interface.FileMaskExtension.HostSystem"/> property.  The <b>HostSystem</b> always takes precedence.
            If it is specified, this property is ignored.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.JobClass">
            <summary>
            Specifies the job class that queued the file.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 17 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Job Class</b> field name used in file mask
            filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>JobClass</b> keyword used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$JobClass</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
              <item>
              <description>The Output Manager server overlays this property with the
            <see cref="P:OutputMgr.Interface.FileMaskExtension.HostProject"/> property.  The <b>HostProject</b> always takes precedence.
            If it is specified, this property is ignored.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.JobName">
            <summary>
            Specifies the name of job that queued the file.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 17 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Job Name</b> field name used in file mask
            filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>JobName</b> keyword used in keyword substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$JobName</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
              <item>
              <description>The Output Manager server overlays this property with the
            <see cref="P:OutputMgr.Interface.FileMaskExtension.HostAccount"/> property.  The <b>HostAccount</b> always takes precedence.
            If it is specified, this property is ignored.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.MessageLabel">
            <summary>
            Specifies the label associated with the send message, which is a string that
            the application generating the message can optionally set.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 249 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Message Label</b> field name used in file mask
            filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>MessageLabel</b> keyword used in keyword 
            substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$MessageLabel</b> Data Dependent Attribute (DDA)
            system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.MessageQueueLabel">
            <summary>
            Specifies the label associated with the queue from which the message was received.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 124 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Message Queue Label</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>MessageQueueLabel</b> keyword used in keyword 
            substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$MessageQueueLabel</b> Data Dependent Attribute 
            (DDA) system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.MessageQueueMonitor">
            <summary>
            Specifies the name of the Message Queue Monitor attribute that defines the
            queue from which the message was received.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>It corresponds to the <b>Message Queue Monitor</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>MessageQueueMonitor</b> keyword used in keyword 
            substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$MessageQueueMonitor</b> Data Dependent Attribute 
            (DDA) system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.MessageQueueName">
            <summary>
            Specifies the name of the queue from which the message was received.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 124 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Message Queue Name</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>MessageQueueName</b> keyword used in keyword 
            substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$MessageQueueName</b> Data Dependent Attribute 
            (DDA) system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.Subject">
            <summary>
            Specifies the e-mail subject.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>Maximum length is 256 Unicode characters (longer values will be truncated
            by the server application).
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Subject</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>MailSubject</b> keyword used in keyword 
            substitution.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>$MailSubject</b> Data Dependent Attribute 
            (DDA) system variable.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.TransportType">
            <summary>
            Specifies the transfer mechanism by which the file was received.
            </summary>
            <remarks>
            <para>
            Specific details related to this property:
            </para>
            <list type="bullet">
              <item>
              <description>The value must be a string variation of type <see ref = 
            "OutputMgr.Interface.TransportType"/>.
              </description>
              </item>
              <item>
              <description>It corresponds to the <b>Transport Type</b> field name used in file
            mask filtering and the management window filtering and display.
              </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:OutputMgr.Interface.FileMaskExtension.UserTags">
            <summary>
            Specifies user tags to be associated with the data or file being sent.
            </summary>
            <remarks>
            <para>
            Up to 10 user tags can be specified in a single string, where each user
            tag is delimited by blanks, commas or double quotes around the individual
            user tag.  A maximum of 256 characters of user tag information can be
            specified.
            </para>
            <para>
            If user tags are specified via this property, then extracting of user tags
            from the sent data or file is skipped.  If no user tags are specified via
            this property, then the user tags are extracted from the sent data or file.
            </para>
            </remarks>
        </member>
    </members>
</doc>
